========== pass 1, file 'pyan/analyzer.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>}
Module
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.analyzer> to Import <Node module:logging>
New edge added for Use from <Node module:pyan.analyzer> to Import <Node module:logging>
Import ['ast']
Set ast in <Scope: module > to <Node module:ast>
Use from <Node module:pyan.analyzer> to Import <Node module:ast>
New edge added for Use from <Node module:pyan.analyzer> to Import <Node module:ast>
Import ['symtable']
Set symtable in <Scope: module > to <Node module:symtable>
Use from <Node module:pyan.analyzer> to Import <Node module:symtable>
New edge added for Use from <Node module:pyan.analyzer> to Import <Node module:symtable>
ImportFrom: from node import ['Node', 'Flavor']
Use from <Node module:pyan.analyzer> to ImportFrom <Node module:node>
New edge added for Use from <Node module:pyan.analyzer> to ImportFrom <Node module:node>
Set Node in <Scope: module > to <Node import:pyan.node.Node>
From setting name Node to <Node import:pyan.node.Node>
Set Flavor in <Scope: module > to <Node import:pyan.node.Flavor>
From setting name Flavor to <Node import:pyan.node.Flavor>
ImportFrom: from anutils import ['tail', 'get_module_name', 'format_alias', 'get_ast_node_name', 'sanitize_exprs', 'resolve_method_resolution_order', 'Scope', 'ExecuteInInnerScope', 'UnresolvedSuperCallError']
Use from <Node module:pyan.analyzer> to ImportFrom <Node module:anutils>
New edge added for Use from <Node module:pyan.analyzer> to ImportFrom <Node module:anutils>
Set tail in <Scope: module > to <Node import:pyan.anutils.tail>
From setting name tail to <Node import:pyan.anutils.tail>
Set get_module_name in <Scope: module > to <Node import:pyan.anutils.get_module_name>
From setting name get_module_name to <Node import:pyan.anutils.get_module_name>
Set format_alias in <Scope: module > to <Node import:pyan.anutils.format_alias>
From setting name format_alias to <Node import:pyan.anutils.format_alias>
Set get_ast_node_name in <Scope: module > to <Node import:pyan.anutils.get_ast_node_name>
From setting name get_ast_node_name to <Node import:pyan.anutils.get_ast_node_name>
Set sanitize_exprs in <Scope: module > to <Node import:pyan.anutils.sanitize_exprs>
From setting name sanitize_exprs to <Node import:pyan.anutils.sanitize_exprs>
Set resolve_method_resolution_order in <Scope: module > to <Node import:pyan.anutils.resolve_method_resolution_order>
From setting name resolve_method_resolution_order to <Node import:pyan.anutils.resolve_method_resolution_order>
Set Scope in <Scope: module > to <Node import:pyan.anutils.Scope>
From setting name Scope to <Node import:pyan.anutils.Scope>
Set ExecuteInInnerScope in <Scope: module > to <Node import:pyan.anutils.ExecuteInInnerScope>
From setting name ExecuteInInnerScope to <Node import:pyan.anutils.ExecuteInInnerScope>
Set UnresolvedSuperCallError in <Scope: module > to <Node import:pyan.anutils.UnresolvedSuperCallError>
From setting name UnresolvedSuperCallError to <Node import:pyan.anutils.UnresolvedSuperCallError>
ClassDef CallGraphVisitor
Def from <Node module:pyan.analyzer> to Class <Node class:pyan.analyzer.CallGraphVisitor>
Set CallGraphVisitor in <Scope: module > to <Node class:pyan.analyzer.CallGraphVisitor>
Attribute NodeVisitor of ast in context <class '_ast.Load'>
Resolve ast.NodeVisitor in context <class '_ast.Load'>
Get ast in <Scope: class CallGraphVisitor>, found in <Scope: module >, value <Node module:ast>
Resolved to attr NodeVisitor of <Node module:ast>
Use from <Node class:pyan.analyzer.CallGraphVisitor> to <Node attribute:ast.NodeVisitor> (target obj <Node module:ast> known but target attr NodeVisitor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node class:pyan.analyzer.CallGraphVisitor> to <Node attribute:ast.NodeVisitor> (target obj <Node module:ast> known but target attr NodeVisitor not resolved; maybe fwd ref or unanalyzed import)
FunctionDef __init__
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.__init__>
Set __init__ in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.__init__>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['self.logger'] [<_ast.BoolOp object at 0x7ffa5c67aac8>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ???:*.__name__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function __init__>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Store'>
Resolve self.logger in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
setattr logger on self to <Node attribute:logging.getLogger>
Assign ['self.module_names'] [<_ast.Dict object at 0x7ffa5c67acc0>]
Attribute module_names of self in context <class '_ast.Store'>
Assign ['self.module_to_filename'] [<_ast.Dict object at 0x7ffa5c67ada0>]
Attribute module_to_filename of self in context <class '_ast.Store'>
For-loop
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function __init__> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Assign ['mod_name'] [<_ast.Call object at 0x7ffa5c67aef0>]
Call get_module_name
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function __init__>, found in <Scope: module >, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node import:pyan.anutils.get_module_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node import:pyan.anutils.get_module_name>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function __init__> to <Node import:pyan.anutils.get_module_name>
Assign ['short_name'] [<_ast.Subscript object at 0x7ffa5c666048>]
Call mod_name.rsplit
Attribute rsplit of mod_name in context <class '_ast.Load'>
Resolve mod_name.rsplit in context <class '_ast.Load'>
Get mod_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node import:pyan.anutils.get_module_name>
Resolved to attr rsplit of <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.anutils.get_module_name.rsplit> (target obj <Node import:pyan.anutils.get_module_name> known but target attr rsplit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.anutils.get_module_name.rsplit> (target obj <Node import:pyan.anutils.get_module_name> known but target attr rsplit not resolved; maybe fwd ref or unanalyzed import)
Name short_name in context <class '_ast.Store'>
Set short_name in <Scope: function __init__> to <Node attribute:pyan.anutils.get_module_name.rsplit>
Assign [<_ast.Subscript object at 0x7ffa5c666278>] ['mod_name']
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node import:pyan.anutils.get_module_name>
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
Name short_name in context <class '_ast.Load'>
Get short_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:pyan.anutils.get_module_name.rsplit>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node attribute:pyan.anutils.get_module_name.rsplit>
Assign [<_ast.Subscript object at 0x7ffa5c666400>] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute module_to_filename of self in context <class '_ast.Load'>
Resolve self.module_to_filename in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_to_filename of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_to_filename not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_to_filename not resolved; maybe fwd ref or unanalyzed import)
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node import:pyan.anutils.get_module_name>
Assign ['self.filenames'] ['filenames']
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute filenames of self in context <class '_ast.Store'>
Resolve self.filenames in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
setattr filenames on self to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Assign ['self.defines_edges'] [<_ast.Dict object at 0x7ffa5c6666d8>]
Attribute defines_edges of self in context <class '_ast.Store'>
Assign ['self.uses_edges'] [<_ast.Dict object at 0x7ffa5c6667b8>]
Attribute uses_edges of self in context <class '_ast.Store'>
Assign ['self.nodes'] [<_ast.Dict object at 0x7ffa5c666898>]
Attribute nodes of self in context <class '_ast.Store'>
Assign ['self.scopes'] [<_ast.Dict object at 0x7ffa5c666978>]
Attribute scopes of self in context <class '_ast.Store'>
Assign ['self.class_base_ast_nodes'] [<_ast.Dict object at 0x7ffa5c666a58>]
Attribute class_base_ast_nodes of self in context <class '_ast.Store'>
Assign ['self.class_base_nodes'] [<_ast.Dict object at 0x7ffa5c666b38>]
Attribute class_base_nodes of self in context <class '_ast.Store'>
Assign ['self.mro'] [<_ast.Dict object at 0x7ffa5c666c18>]
Attribute mro of self in context <class '_ast.Store'>
Assign ['self.module_name'] [<_ast.NameConstant object at 0x7ffa5c666cf8>]
Attribute module_name of self in context <class '_ast.Store'>
Assign ['self.filename'] [<_ast.NameConstant object at 0x7ffa5c666dd8>]
Attribute filename of self in context <class '_ast.Store'>
Assign ['self.name_stack'] []
Attribute name_stack of self in context <class '_ast.Store'>
Assign ['self.scope_stack'] []
Attribute scope_stack of self in context <class '_ast.Store'>
Assign ['self.class_stack'] []
Attribute class_stack of self in context <class '_ast.Store'>
Assign ['self.context_stack'] []
Attribute context_stack of self in context <class '_ast.Store'>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c667278>]
Attribute last_value of self in context <class '_ast.Store'>
Call self.process
Attribute process of self in context <class '_ast.Load'>
Resolve self.process in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr process of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.process> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr process not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.process> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr process not resolved; maybe fwd ref or unanalyzed import)
FunctionDef process
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.process>
Set process in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.process>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
For-loop
Call range
Name range in context <class '_ast.Load'>
Get range in <Scope: function process>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
Name pas in context <class '_ast.Store'>
Set pas in <Scope: function process> to <Node ???:*.range>
For-loop
Attribute filenames of self in context <class '_ast.Load'>
Resolve self.filenames in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filenames on self returns <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function process> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Call self.logger.info
Name pas in context <class '_ast.Load'>
Get pas in <Scope: function process>, found in <Scope: function process>, value <Node ???:*.range>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.process_one
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute process_one of self in context <class '_ast.Load'>
Resolve self.process_one in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr process_one of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.process_one> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr process_one not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.process_one> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr process_one not resolved; maybe fwd ref or unanalyzed import)
Name pas in context <class '_ast.Load'>
Get pas in <Scope: function process>, found in <Scope: function process>, value <Node ???:*.range>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
Call self.resolve_base_classes
Attribute resolve_base_classes of self in context <class '_ast.Load'>
Resolve self.resolve_base_classes in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_base_classes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_base_classes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr resolve_base_classes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_base_classes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr resolve_base_classes not resolved; maybe fwd ref or unanalyzed import)
Call self.postprocess
Attribute postprocess of self in context <class '_ast.Load'>
Resolve self.postprocess in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr postprocess of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.postprocess> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr postprocess not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.postprocess> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr postprocess not resolved; maybe fwd ref or unanalyzed import)
FunctionDef process_one
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.process_one>
Set process_one in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.process_one>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute filenames of self in context <class '_ast.Load'>
Resolve self.filenames in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filenames on self returns <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Call ValueError
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute filenames of self in context <class '_ast.Load'>
Resolve self.filenames in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filenames on self returns <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function process_one>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.ValueError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.ValueError>
With (context manager)
Call open
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function process_one>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.open>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.open>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to With <Node ???:*.open>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node method:*.open.__enter__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node method:*.open.__exit__>
Call open
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function process_one>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.open>
Name f in context <class '_ast.Store'>
Set f in <Scope: function process_one> to <Node ???:*.open>
Assign ['content'] [<_ast.Call object at 0x7ffa5c66b470>]
Call f.read
Attribute read of f in context <class '_ast.Load'>
Resolve f.read in context <class '_ast.Load'>
Get f in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ???:*.open>
Resolved to attr read of <Node ???:*.open>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ???:*.read> (target obj f not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ???:*.read> (target obj f not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name content in context <class '_ast.Store'>
Set content in <Scope: function process_one> to <Node ???:*.read>
Assign ['self.filename'] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute filename of self in context <class '_ast.Store'>
Resolve self.filename in context <class '_ast.Store'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
setattr filename on self to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Assign ['self.module_name'] [<_ast.Call object at 0x7ffa5c66b6a0>]
Call get_module_name
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function process_one>, found in <Scope: module >, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node import:pyan.anutils.get_module_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node import:pyan.anutils.get_module_name>
Attribute module_name of self in context <class '_ast.Store'>
Resolve self.module_name in context <class '_ast.Store'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
setattr module_name on self to <Node import:pyan.anutils.get_module_name>
Call self.analyze_scopes
Name content in context <class '_ast.Load'>
Get content in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ???:*.read>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.read>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute analyze_scopes of self in context <class '_ast.Load'>
Resolve self.analyze_scopes in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_scopes not resolved; maybe fwd ref or unanalyzed import)
Call self.visit
Call ast.parse
Name content in context <class '_ast.Load'>
Get content in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ???:*.read>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.read>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute parse of ast in context <class '_ast.Load'>
Resolve ast.parse in context <class '_ast.Load'>
Get ast in <Scope: function process_one>, found in <Scope: module >, value <Node module:ast>
Resolved to attr parse of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:ast.parse> (target obj <Node module:ast> known but target attr parse not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:ast.parse> (target obj <Node module:ast> known but target attr parse not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.module_name'] [<_ast.NameConstant object at 0x7ffa5c66bb38>]
Attribute module_name of self in context <class '_ast.Store'>
Assign ['self.filename'] [<_ast.NameConstant object at 0x7ffa5c66bc18>]
Attribute filename of self in context <class '_ast.Store'>
FunctionDef resolve_base_classes
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes>
Set resolve_base_classes in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call len
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.len>
For-loop
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Store'>
Set node in <Scope: function resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Assign [<_ast.Subscript object at 0x7ffa5c682198>] []
Attribute class_base_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_nodes not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
For-loop
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Name ast_node in context <class '_ast.Store'>
Set ast_node in <Scope: function resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
Assign ['baseclass_node'] [<_ast.Call object at 0x7ffa5c682898>]
Call self.get_value
Attribute id of ast_node in context <class '_ast.Load'>
Resolve ast_node.id in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Resolved to attr id of <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.id> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.id> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute get_value of self in context <class '_ast.Load'>
Resolve self.get_value in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_value not resolved; maybe fwd ref or unanalyzed import)
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
Assign ['_', 'baseclass_node'] [<_ast.Call object at 0x7ffa5c682be0>]
Call self.get_attribute
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Attribute get_attribute of self in context <class '_ast.Load'>
Resolve self.get_attribute in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_attribute not resolved; maybe fwd ref or unanalyzed import)
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Assign ['baseclass_node'] [<_ast.NameConstant object at 0x7ffa5c682d30>]
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function resolve_base_classes>: value None is not a Node
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call isinstance
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
Attribute namespace of baseclass_node in context <class '_ast.Load'>
Resolve baseclass_node.namespace in context <class '_ast.Load'>
Get baseclass_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call <_ast.Subscript object at 0x7ffa5c684198>.append
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute append of <_ast.Subscript object at 0x7ffa5c684198> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c684198>.append in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c684198> in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c684198> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.logger.debug
Attribute class_base_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_nodes not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.mro'] [<_ast.Call object at 0x7ffa5c6846d8>]
Call resolve_method_resolution_order
Attribute class_base_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_nodes not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
getattr logger on self returns <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger>
Name resolve_method_resolution_order in context <class '_ast.Load'>
Get resolve_method_resolution_order in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node import:pyan.anutils.resolve_method_resolution_order>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node import:pyan.anutils.resolve_method_resolution_order>
Attribute mro of self in context <class '_ast.Store'>
Resolve self.mro in context <class '_ast.Store'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
setattr mro on self to <Node import:pyan.anutils.resolve_method_resolution_order>
Call self.logger.debug
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node import:pyan.anutils.resolve_method_resolution_order>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef postprocess
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.postprocess>
Set postprocess in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.postprocess>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.expand_unknowns
Attribute expand_unknowns of self in context <class '_ast.Load'>
Resolve self.expand_unknowns in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr expand_unknowns of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.expand_unknowns> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr expand_unknowns not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.expand_unknowns> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr expand_unknowns not resolved; maybe fwd ref or unanalyzed import)
Call self.contract_nonexistents
Attribute contract_nonexistents of self in context <class '_ast.Load'>
Resolve self.contract_nonexistents in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr contract_nonexistents of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.contract_nonexistents> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr contract_nonexistents not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.contract_nonexistents> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr contract_nonexistents not resolved; maybe fwd ref or unanalyzed import)
Call self.cull_inherited
Attribute cull_inherited of self in context <class '_ast.Load'>
Resolve self.cull_inherited in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr cull_inherited of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.cull_inherited> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr cull_inherited not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.cull_inherited> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr cull_inherited not resolved; maybe fwd ref or unanalyzed import)
Call self.collapse_inner
Attribute collapse_inner of self in context <class '_ast.Load'>
Resolve self.collapse_inner in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr collapse_inner of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.collapse_inner> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr collapse_inner not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node attribute:pyan.analyzer.CallGraphVisitor.collapse_inner> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr collapse_inner not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_Module
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Module>
Set visit_Module in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Module>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['module_node'] [<_ast.Call object at 0x7ffa5c689198>]
Call self.get_node
Attribute module_name of self in context <class '_ast.Load'>
Resolve self.module_name in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
getattr module_name on self returns <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node import:pyan.anutils.get_module_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node import:pyan.anutils.get_module_name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Module>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr MODULE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name module_node in context <class '_ast.Store'>
Set module_node in <Scope: function visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.associate_node
Name module_node in context <class '_ast.Load'>
Get module_node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute associate_node of self in context <class '_ast.Load'>
Resolve self.associate_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr associate_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.associate_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr associate_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.associate_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr associate_node not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] ['self.module_name']
Attribute module_name of self in context <class '_ast.Load'>
Resolve self.module_name in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
getattr module_name on self returns <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node import:pyan.anutils.get_module_name>
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_Module> to <Node import:pyan.anutils.get_module_name>
Call self.name_stack.append
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node import:pyan.anutils.get_module_name>
Attribute append of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.append in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node import:pyan.anutils.get_module_name>
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.append
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node import:pyan.anutils.get_module_name>
Attribute append of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.append in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.generic_visit
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Attribute generic_visit of self in context <class '_ast.Load'>
Resolve self.generic_visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr generic_visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.generic_visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr generic_visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.generic_visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr generic_visit not resolved; maybe fwd ref or unanalyzed import)
Call self.context_stack.pop
Attribute pop of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.pop in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.pop
Attribute pop of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.pop in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c68a128>]
Attribute last_value of self in context <class '_ast.Store'>
FunctionDef visit_ClassDef
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef>
Set visit_ClassDef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c68a4a8>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c68a5c0>]
Call from_node.get_name
Attribute get_name of from_node in context <class '_ast.Load'>
Resolve from_node.get_name in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Resolved to attr get_name of <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c68a6d8>]
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Attribute CLASS of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASS in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_ClassDef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr CLASS of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.node.Flavor.CLASS> (target obj <Node import:pyan.node.Flavor> known but target attr CLASS not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.node.Flavor.CLASS> (target obj <Node import:pyan.node.Flavor> known but target attr CLASS not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_defines_edge of self in context <class '_ast.Load'>
Resolve self.add_defines_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_defines_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_defines_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_defines_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.associate_node
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute associate_node of self in context <class '_ast.Load'>
Resolve self.associate_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr associate_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.associate_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr associate_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.associate_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr associate_node not resolved; maybe fwd ref or unanalyzed import)
Call self.set_value
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
Call self.class_stack.append
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute append of self.class_stack in context <class '_ast.Load'>
Resolve self.class_stack.append in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.class_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.class_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.append in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['inner_ns'] [<_ast.Call object at 0x7ffa5c68f358>]
Call <_ast.Call object at 0x7ffa5c68f3c8>.get_name
Attribute get_name of <_ast.Call object at 0x7ffa5c68f3c8> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c68f3c8>.get_name in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_name of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c68f3c8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c68f3c8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Store'>
Set inner_ns in <Scope: function visit_ClassDef> to <Node ???:*.get_name>
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ???:*.get_name>
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.append in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c68f8d0>] []
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
For-loop
Attribute bases of node in context <class '_ast.Load'>
Resolve node.bases in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr bases of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr bases not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr bases not resolved; maybe fwd ref or unanalyzed import)
Name b in context <class '_ast.Store'>
Set b in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Call <_ast.Subscript object at 0x7ffa5c68fba8>.append
Name b in context <class '_ast.Load'>
Get b in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Attribute append of <_ast.Subscript object at 0x7ffa5c68fba8> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c68fba8>.append in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c68fba8> in <Scope: function visit_ClassDef>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c68fba8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.visit
Name b in context <class '_ast.Load'>
Get b in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.context_stack.pop
Attribute pop of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.pop in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.pop
Attribute pop of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.pop in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.class_stack.pop
Attribute pop of self.class_stack in context <class '_ast.Load'>
Resolve self.class_stack.pop in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.class_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef visit_FunctionDef
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
Set visit_FunctionDef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['self_name', 'flavor'] [<_ast.Call object at 0x7ffa5c693860>]
Call self.analyze_functiondef
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Attribute analyze_functiondef of self in context <class '_ast.Load'>
Resolve self.analyze_functiondef in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_functiondef of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_functiondef not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_functiondef not resolved; maybe fwd ref or unanalyzed import)
Name self_name in context <class '_ast.Store'>
Set self_name in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c6939b0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c693ac8>]
Call from_node.get_name
Attribute get_name of from_node in context <class '_ast.Load'>
Resolve from_node.get_name in context <class '_ast.Load'>
Get from_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Resolved to attr get_name of <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c693be0>]
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_defines_edge of self in context <class '_ast.Load'>
Resolve self.add_defines_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_defines_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_defines_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_defines_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.associate_node
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute associate_node of self in context <class '_ast.Load'>
Resolve self.associate_node in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr associate_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.associate_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr associate_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.associate_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr associate_node not resolved; maybe fwd ref or unanalyzed import)
Call self.set_value
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
Call self.name_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.append in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['inner_ns'] [<_ast.Call object at 0x7ffa5c6986d8>]
Call <_ast.Call object at 0x7ffa5c698748>.get_name
Attribute get_name of <_ast.Call object at 0x7ffa5c698748> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c698748>.get_name in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_name of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c698748> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c698748> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Store'>
Set inner_ns in <Scope: function visit_FunctionDef> to <Node ???:*.get_name>
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.get_name>
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.append in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c698c88>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.get_name>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function visit_FunctionDef> to <Node ???:*.get_name>
Assign ['nonsense_node'] [<_ast.Call object at 0x7ffa5c698e10>]
Call self.get_node
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.get_name>
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name nonsense_node in context <class '_ast.Store'>
Set nonsense_node in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['all_args'] ['node.args']
Attribute args of node in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name all_args in context <class '_ast.Store'>
Set all_args in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
For-loop
Attribute args of all_args in context <class '_ast.Load'>
Resolve all_args.args in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr args of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name a in context <class '_ast.Store'>
Set a in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args>
Assign [<_ast.Subscript object at 0x7ffa5c69a198>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute arg of a in context <class '_ast.Load'>
Resolve a.arg in context <class '_ast.Load'>
Get a in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args>
Resolved to attr arg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args.arg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> known but target attr arg not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args.arg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> known but target attr arg not resolved; maybe fwd ref or unanalyzed import)
Attribute vararg of all_args in context <class '_ast.Load'>
Resolve all_args.vararg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr vararg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.vararg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr vararg not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.vararg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr vararg not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c69a470>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute vararg of all_args in context <class '_ast.Load'>
Resolve all_args.vararg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr vararg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.vararg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr vararg not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute kwonlyargs of all_args in context <class '_ast.Load'>
Resolve all_args.kwonlyargs in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr kwonlyargs of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwonlyargs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwonlyargs not resolved; maybe fwd ref or unanalyzed import)
Name a in context <class '_ast.Store'>
Set a in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs>
Assign [<_ast.Subscript object at 0x7ffa5c69a710>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute arg of a in context <class '_ast.Load'>
Resolve a.arg in context <class '_ast.Load'>
Get a in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs>
Resolved to attr arg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs.arg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> known but target attr arg not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs.arg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> known but target attr arg not resolved; maybe fwd ref or unanalyzed import)
Attribute kwarg of all_args in context <class '_ast.Load'>
Resolve all_args.kwarg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr kwarg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwarg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwarg not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwarg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwarg not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c69a9e8>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute kwarg of all_args in context <class '_ast.Load'>
Resolve all_args.kwarg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr kwarg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwarg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwarg not resolved; maybe fwd ref or unanalyzed import)
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Assign ['class_node'] [<_ast.Call object at 0x7ffa5c69acc0>]
Call self.get_current_class
Attribute get_current_class of self in context <class '_ast.Load'>
Resolve self.get_current_class in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_current_class of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_current_class not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_current_class not resolved; maybe fwd ref or unanalyzed import)
Name class_node in context <class '_ast.Store'>
Set class_node in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Assign [<_ast.Subscript object at 0x7ffa5c69ada0>] ['class_node']
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute defs of <_ast.Subscript object at 0x7ffa5c69ae10> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c69ae10>.defs in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c69ae10> in <Scope: function visit_FunctionDef>: no Node value (or name not in scope)
Resolved to attr defs of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj <_ast.Subscript object at 0x7ffa5c69ae10> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Call self.logger.info
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute defaults of node.args in context <class '_ast.Load'>
Resolve node.args.defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Unresolved, returning attr defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_FunctionDef> to <Node ???:*.defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute kw_defaults of node.args in context <class '_ast.Load'>
Resolve node.args.kw_defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Unresolved, returning attr kw_defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.kw_defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.kw_defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_FunctionDef> to <Node ???:*.kw_defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.kw_defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.kw_defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.context_stack.pop
Attribute pop of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.pop in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.pop
Attribute pop of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.pop in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef visit_AsyncFunctionDef
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef>
Set visit_AsyncFunctionDef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.visit_FunctionDef
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_AsyncFunctionDef>, found in <Scope: function visit_AsyncFunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef.^^^argument^^^>
Attribute visit_FunctionDef of self in context <class '_ast.Load'>
Resolve self.visit_FunctionDef in context <class '_ast.Load'>
Get self in <Scope: function visit_AsyncFunctionDef>, found in <Scope: function visit_AsyncFunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit_FunctionDef of <Node class:pyan.analyzer.CallGraphVisitor>
getattr visit_FunctionDef on self returns <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
FunctionDef visit_Lambda
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda>
Set visit_Lambda in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_Lambda>, found in <Scope: module >, value <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to With <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
For-loop
Attribute defaults of node.args in context <class '_ast.Load'>
Resolve node.args.defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Unresolved, returning attr defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_Lambda> to <Node ???:*.defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ???:*.defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node ???:*.defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute kw_defaults of node.args in context <class '_ast.Load'>
Resolve node.args.kw_defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Unresolved, returning attr kw_defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.kw_defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.kw_defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_Lambda> to <Node ???:*.kw_defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ???:*.kw_defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node ???:*.kw_defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.visit
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_Import
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Import>
Set visit_Import in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Import>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
ListComp
Call format_alias
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to Name <Node ???:*.x>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to Name <Node ???:*.x>
Name format_alias in context <class '_ast.Load'>
Get format_alias in <Scope: function listcomp>, found in <Scope: module >, value <Node import:pyan.anutils.format_alias>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to Name <Node import:pyan.anutils.format_alias>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to Name <Node import:pyan.anutils.format_alias>
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function listcomp>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Def from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to listcomp <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name import_item in context <class '_ast.Store'>
Set import_item in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Assign ['src_name'] ['import_item.name']
Attribute name of import_item in context <class '_ast.Load'>
Resolve import_item.name in context <class '_ast.Load'>
Get import_item in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name src_name in context <class '_ast.Store'>
Set src_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['tgt_name'] [<_ast.IfExp object at 0x7ffa5c4e3da0>]
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c4e3fd0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c4e7128>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Attribute IMPORTEDITEM of Flavor in context <class '_ast.Load'>
Resolve Flavor.IMPORTEDITEM in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Import>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr IMPORTEDITEM of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> (target obj <Node import:pyan.node.Flavor> known but target attr IMPORTEDITEM not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> (target obj <Node import:pyan.node.Flavor> known but target attr IMPORTEDITEM not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['is_new_edge'] [<_ast.Call object at 0x7ffa5c4e7390>]
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Name is_new_edge in context <class '_ast.Store'>
Set is_new_edge in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
Assign ['mod_name'] [<_ast.Subscript object at 0x7ffa5c4e7630>]
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['mod_name'] ['src_name']
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['tgt_module'] [<_ast.Call object at 0x7ffa5c4e7860>]
Call self.get_node
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Import>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr MODULE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name tgt_module in context <class '_ast.Store'>
Set tgt_module in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name tgt_module in context <class '_ast.Load'>
Get tgt_module in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['to_node.flavor'] ['Flavor.MODULE']
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Import>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr MODULE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
Attribute flavor of to_node in context <class '_ast.Store'>
Resolve to_node.flavor in context <class '_ast.Store'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Resolved to attr flavor of <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
setattr flavor on to_node to <Node attribute:pyan.node.Flavor.MODULE>
Call self.set_value
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name tgt_module in context <class '_ast.Load'>
Get tgt_module in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name is_new_edge in context <class '_ast.Load'>
Get is_new_edge in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_ImportFrom
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom>
Set visit_ImportFrom in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute module of node in context <class '_ast.Load'>
Resolve node.module in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr module of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr module not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr module not resolved; maybe fwd ref or unanalyzed import)
ListComp
Call format_alias
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to Name <Node ???:*.x>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to Name <Node ???:*.x>
Name format_alias in context <class '_ast.Load'>
Get format_alias in <Scope: function listcomp>, found in <Scope: module >, value <Node import:pyan.anutils.format_alias>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to Name <Node import:pyan.anutils.format_alias>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to Name <Node import:pyan.anutils.format_alias>
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function listcomp>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Def from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to listcomp <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['tgt_name'] ['node.module']
Attribute module of node in context <class '_ast.Load'>
Resolve node.module in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr module of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr module not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c4ec8d0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c4ec9e8>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_ImportFrom>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr MODULE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.MODULE> (target obj <Node import:pyan.node.Flavor> known but target attr MODULE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
Assign ['mod_name'] [<_ast.Subscript object at 0x7ffa5c4ee358>]
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_names not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Assign ['mod_name'] ['tgt_name']
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
For-loop
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name import_item in context <class '_ast.Store'>
Set import_item in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Assign ['name'] ['import_item.name']
Attribute name of import_item in context <class '_ast.Load'>
Resolve import_item.name in context <class '_ast.Load'>
Get import_item in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Assign ['new_name'] [<_ast.IfExp object at 0x7ffa5c4ee748>]
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name new_name in context <class '_ast.Store'>
Set new_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Assign ['tgt_id'] [<_ast.Call object at 0x7ffa5c4ee978>]
Call self.get_node
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name name in context <class '_ast.Load'>
Get name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Attribute IMPORTEDITEM of Flavor in context <class '_ast.Load'>
Resolve Flavor.IMPORTEDITEM in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_ImportFrom>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr IMPORTEDITEM of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> (target obj <Node import:pyan.node.Flavor> known but target attr IMPORTEDITEM not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> (target obj <Node import:pyan.node.Flavor> known but target attr IMPORTEDITEM not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name tgt_id in context <class '_ast.Store'>
Set tgt_id in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.set_value
Name new_name in context <class '_ast.Load'>
Get new_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name tgt_id in context <class '_ast.Load'>
Get tgt_id in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name new_name in context <class '_ast.Load'>
Get new_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name tgt_id in context <class '_ast.Load'>
Get tgt_id in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_Attribute
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute>
Set visit_Attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['objname'] [<_ast.Call object at 0x7ffa5c4f3080>]
Call get_ast_node_name
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Name objname in context <class '_ast.Store'>
Set objname in <Scope: function visit_Attribute> to <Node import:pyan.anutils.get_ast_node_name>
Call self.logger.debug
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Call type
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.type>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Store of ast in context <class '_ast.Load'>
Resolve ast.Store in context <class '_ast.Load'>
Get ast in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Store of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Assign ['new_value'] ['self.last_value']
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.last_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr last_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.last_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr last_value not resolved; maybe fwd ref or unanalyzed import)
Name new_value in context <class '_ast.Store'>
Set new_value in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.last_value>
Call self.set_attribute
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.last_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.last_value>
Attribute set_attribute of self in context <class '_ast.Load'>
Resolve self.set_attribute in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_attribute not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.last_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.last_value>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Load of ast in context <class '_ast.Load'>
Resolve ast.Load in context <class '_ast.Load'>
Get ast in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Load of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node', 'attr_node'] [<_ast.Call object at 0x7ffa5c4f3e80>]
Call self.get_attribute
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Attribute get_attribute of self in context <class '_ast.Load'>
Resolve self.get_attribute in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_attribute not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name attr_node in context <class '_ast.Store'>
Set attr_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
Call isinstance
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Call self.logger.info
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c4f7470>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of attr_node in context <class '_ast.Load'>
Resolve attr_node.namespace in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_wild
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute remove_wild of self in context <class '_ast.Load'>
Resolve self.remove_wild in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_wild of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr remove_wild not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr remove_wild not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] ['attr_node']
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['tgt_name'] ['node.attr']
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c4fc240>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c4fc358>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr get_name of <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c4fc470>]
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Attribute ATTRIBUTE of Flavor in context <class '_ast.Load'>
Resolve Flavor.ATTRIBUTE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr ATTRIBUTE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> (target obj <Node import:pyan.node.Flavor> known but target attr ATTRIBUTE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> (target obj <Node import:pyan.node.Flavor> known but target attr ATTRIBUTE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_wild
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute remove_wild of self in context <class '_ast.Load'>
Resolve self.remove_wild in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_wild of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr remove_wild not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['tgt_name'] ['node.attr']
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c500198>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c5002b0>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Attribute UNKNOWN of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNKNOWN in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr UNKNOWN of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.UNKNOWN> (target obj <Node import:pyan.node.Flavor> known but target attr UNKNOWN not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.UNKNOWN> (target obj <Node import:pyan.node.Flavor> known but target attr UNKNOWN not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef visit_Name
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Name>
Set visit_Name in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Name>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Call type
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.type>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Store of ast in context <class '_ast.Load'>
Resolve ast.Store in context <class '_ast.Load'>
Get ast in <Scope: function visit_Name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Store of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
Call self.set_value
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr set_value not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Load of ast in context <class '_ast.Load'>
Resolve ast.Load in context <class '_ast.Load'>
Get ast in <Scope: function visit_Name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Load of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
Assign ['tgt_name'] ['node.id']
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c5035f8>]
Call self.get_value
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Attribute get_value of self in context <class '_ast.Load'>
Resolve self.get_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_value not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Assign ['current_class'] [<_ast.Call object at 0x7ffa5c503748>]
Call self.get_current_class
Attribute get_current_class of self in context <class '_ast.Load'>
Resolve self.get_current_class in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_current_class of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_current_class not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_current_class not resolved; maybe fwd ref or unanalyzed import)
Name current_class in context <class '_ast.Store'>
Set current_class in <Scope: function visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name current_class in context <class '_ast.Load'>
Get current_class in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Name current_class in context <class '_ast.Load'>
Get current_class in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Call isinstance
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Name>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c503b70>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Attribute UNKNOWN of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNKNOWN in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Name>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr UNKNOWN of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.node.Flavor.UNKNOWN> (target obj <Node import:pyan.node.Flavor> known but target attr UNKNOWN not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.node.Flavor.UNKNOWN> (target obj <Node import:pyan.node.Flavor> known but target attr UNKNOWN not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c503dd8>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef visit_Assign
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
Set visit_Assign in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call len
Attribute targets of node in context <class '_ast.Load'>
Resolve node.targets in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr targets of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function visit_Assign>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node ???:*.len>
Call self.logger.debug
Call len
Attribute targets of node in context <class '_ast.Load'>
Resolve node.targets in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr targets of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function visit_Assign>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node ???:*.len>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['values'] [<_ast.Call object at 0x7ffa5c50aa90>]
Call sanitize_exprs
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_Assign>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function visit_Assign> to <Node import:pyan.anutils.sanitize_exprs>
For-loop
Attribute targets of node in context <class '_ast.Load'>
Resolve node.targets in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr targets of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets>
Assign ['targets'] [<_ast.Call object at 0x7ffa5c50acc0>]
Call sanitize_exprs
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets>
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_Assign>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node import:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_Assign> to <Node import:pyan.anutils.sanitize_exprs>
Call self.logger.debug
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node ???:*.x>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node ???:*.x>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.get_ast_node_name>
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function listcomp>, found in <Scope: function visit_Assign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node import:pyan.anutils.sanitize_exprs>
Def from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to listcomp <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp>
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.get_ast_node_name>
Name values in context <class '_ast.Load'>
Get values in <Scope: function listcomp>, found in <Scope: function visit_Assign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node import:pyan.anutils.sanitize_exprs>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node import:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_AnnAssign
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign>
Set visit_AnnAssign in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.visit_Assign
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_AnnAssign>, found in <Scope: function visit_AnnAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_AnnAssign>, found in <Scope: function visit_AnnAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AnnAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AnnAssign.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AnnAssign.^^^argument^^^>
Attribute visit_Assign of self in context <class '_ast.Load'>
Resolve self.visit_Assign in context <class '_ast.Load'>
Get self in <Scope: function visit_AnnAssign>, found in <Scope: function visit_AnnAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit_Assign of <Node class:pyan.analyzer.CallGraphVisitor>
getattr visit_Assign on self returns <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
FunctionDef visit_AugAssign
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign>
Set visit_AugAssign in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['targets'] [<_ast.Call object at 0x7ffa5c50d748>]
Call sanitize_exprs
Attribute target of node in context <class '_ast.Load'>
Resolve node.target in context <class '_ast.Load'>
Get node in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_AugAssign>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node import:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_AugAssign> to <Node import:pyan.anutils.sanitize_exprs>
Assign ['values'] [<_ast.Call object at 0x7ffa5c50d898>]
Call sanitize_exprs
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_AugAssign>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function visit_AugAssign> to <Node import:pyan.anutils.sanitize_exprs>
Call self.logger.debug
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node ???:*.x>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node ???:*.x>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.get_ast_node_name>
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function listcomp>, found in <Scope: function visit_AugAssign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node import:pyan.anutils.sanitize_exprs>
Def from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to listcomp <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp>
Call type
Attribute op of node in context <class '_ast.Load'>
Resolve node.op in context <class '_ast.Load'>
Get node in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Resolved to attr op of <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.op> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr op not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.op> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr op not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function visit_AugAssign>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node ???:*.type>
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.get_ast_node_name>
Name values in context <class '_ast.Load'>
Get values in <Scope: function listcomp>, found in <Scope: function visit_AugAssign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node import:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node import:pyan.anutils.sanitize_exprs>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node import:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_For
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
Set visit_For in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['targets'] [<_ast.Call object at 0x7ffa5c517358>]
Call sanitize_exprs
Attribute target of node in context <class '_ast.Load'>
Resolve node.target in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_For>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node import:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_For> to <Node import:pyan.anutils.sanitize_exprs>
Assign ['values'] [<_ast.Call object at 0x7ffa5c5174a8>]
Call sanitize_exprs
Attribute iter of node in context <class '_ast.Load'>
Resolve node.iter in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr iter of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.iter> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr iter not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.iter> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr iter not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_For>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function visit_For> to <Node import:pyan.anutils.sanitize_exprs>
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node import:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute orelse of node in context <class '_ast.Load'>
Resolve node.orelse in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr orelse of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr orelse not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr orelse not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_AsyncFor
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor>
Set visit_AsyncFor in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.visit_For
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_AsyncFor>, found in <Scope: function visit_AsyncFor>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFor.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFor.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFor.^^^argument^^^>
Attribute visit_For of self in context <class '_ast.Load'>
Resolve self.visit_For in context <class '_ast.Load'>
Get self in <Scope: function visit_AsyncFor>, found in <Scope: function visit_AsyncFor>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit_For of <Node class:pyan.analyzer.CallGraphVisitor>
getattr visit_For on self returns <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
FunctionDef visit_ListComp
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp>
Set visit_ListComp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_ListComp>, found in <Scope: module >, value <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to With <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Call self.visit
Attribute elt of node in context <class '_ast.Load'>
Resolve node.elt in context <class '_ast.Load'>
Get node in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Resolved to attr elt of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_SetComp
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp>
Set visit_SetComp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_SetComp>, found in <Scope: module >, value <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to With <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Call self.visit
Attribute elt of node in context <class '_ast.Load'>
Resolve node.elt in context <class '_ast.Load'>
Get node in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Resolved to attr elt of <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_DictComp
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp>
Set visit_DictComp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_DictComp>, found in <Scope: module >, value <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to With <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Call self.visit
Attribute key of node in context <class '_ast.Load'>
Resolve node.key in context <class '_ast.Load'>
Get node in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Resolved to attr key of <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.key> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr key not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.key> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr key not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.visit
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_GeneratorExp
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp>
Set visit_GeneratorExp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_GeneratorExp>, found in <Scope: module >, value <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to Name <Node import:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to With <Node import:pyan.anutils.ExecuteInInnerScope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Call self.visit
Attribute elt of node in context <class '_ast.Load'>
Resolve node.elt in context <class '_ast.Load'>
Get node in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Resolved to attr elt of <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_generators not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_Call
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_Call>
Set visit_Call in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Call>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Call get_ast_node_name
Attribute func of node in context <class '_ast.Load'>
Resolve node.func in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr func of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function visit_Call>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node import:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node import:pyan.anutils.get_ast_node_name>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute args of node in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name arg in context <class '_ast.Store'>
Set arg in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args>
Call self.visit
Name arg in context <class '_ast.Load'>
Get arg in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute keywords of node in context <class '_ast.Load'>
Resolve node.keywords in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr keywords of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr keywords not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr keywords not resolved; maybe fwd ref or unanalyzed import)
Name kw in context <class '_ast.Store'>
Set kw in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords>
Call self.visit
Attribute value of kw in context <class '_ast.Load'>
Resolve kw.value in context <class '_ast.Load'>
Get kw in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords>
Resolved to attr value of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords.value> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords.value> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Assign ['result_node'] [<_ast.Call object at 0x7ffa5c51ef28>]
Call self.resolve_builtins
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Attribute resolve_builtins of self in context <class '_ast.Load'>
Resolve self.resolve_builtins in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_builtins of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr resolve_builtins not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr resolve_builtins not resolved; maybe fwd ref or unanalyzed import)
Name result_node in context <class '_ast.Store'>
Set result_node in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function visit_Call>, found in <Scope: module >, value <Node import:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
Assign ['result_node'] [<_ast.NameConstant object at 0x7ffa5c631128>]
Name result_node in context <class '_ast.Store'>
Set result_node in <Scope: function visit_Call>: value None is not a Node
Call isinstance
Name result_node in context <class '_ast.Load'>
Get result_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Call>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Call>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node ???:*.isinstance>
Assign ['self.last_value'] ['result_node']
Name result_node in context <class '_ast.Load'>
Get result_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c6313c8>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] ['result_node']
Name result_node in context <class '_ast.Load'>
Get result_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.visit
Attribute func of node in context <class '_ast.Load'>
Resolve node.func in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr func of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_base_ast_nodes not resolved; maybe fwd ref or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c631dd8>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['class_node'] ['self.last_value']
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name class_node in context <class '_ast.Store'>
Set class_node in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c631fd0>]
Call self.get_node
Call class_node.get_name
Attribute get_name of class_node in context <class '_ast.Load'>
Resolve class_node.get_name in context <class '_ast.Load'>
Get class_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Resolved to attr get_name of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Call>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr METHOD of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_With
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.visit_With>
Set visit_With in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_With>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef add_uses_enter_exit_of
Def from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Function <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Set add_uses_enter_exit_of in <Scope: function visit_With> to <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Call isinstance
Name graph_node in context <class '_ast.Load'>
Get graph_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function add_uses_enter_exit_of>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function add_uses_enter_exit_of>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ???:*.isinstance>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ???:*.isinstance>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c62cc88>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['withed_obj_node'] ['graph_node']
Name graph_node in context <class '_ast.Load'>
Get graph_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Name withed_obj_node in context <class '_ast.Store'>
Set withed_obj_node in <Scope: function add_uses_enter_exit_of> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name withed_obj_node in context <class '_ast.Load'>
Get withed_obj_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name methodname in context <class '_ast.Store'>
Set methodname in <Scope: function add_uses_enter_exit_of>: value None is not a Node
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c6241d0>]
Call self.get_node
Call withed_obj_node.get_name
Attribute get_name of withed_obj_node in context <class '_ast.Load'>
Resolve withed_obj_node.get_name in context <class '_ast.Load'>
Get withed_obj_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Resolved to attr get_name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name methodname in context <class '_ast.Load'>
Get methodname in <Scope: function add_uses_enter_exit_of>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ???:*.methodname>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ???:*.methodname>
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function add_uses_enter_exit_of>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr METHOD of <Node import:pyan.node.Flavor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr add_uses_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute items of node in context <class '_ast.Load'>
Resolve node.items in context <class '_ast.Load'>
Get node in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Resolved to attr items of <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^> known but target attr items not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^> known but target attr items not resolved; maybe fwd ref or unanalyzed import)
Name withitem in context <class '_ast.Store'>
Set withitem in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Assign ['expr'] ['withitem.context_expr']
Attribute context_expr of withitem in context <class '_ast.Load'>
Resolve withitem.context_expr in context <class '_ast.Load'>
Get withitem in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Resolved to attr context_expr of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> known but target attr context_expr not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> known but target attr context_expr not resolved; maybe fwd ref or unanalyzed import)
Name expr in context <class '_ast.Store'>
Set expr in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Assign ['vars'] ['withitem.optional_vars']
Attribute optional_vars of withitem in context <class '_ast.Load'>
Resolve withitem.optional_vars in context <class '_ast.Load'>
Get withitem in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Resolved to attr optional_vars of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> known but target attr optional_vars not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> known but target attr optional_vars not resolved; maybe fwd ref or unanalyzed import)
Name vars in context <class '_ast.Store'>
Set vars in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c624b38>]
Attribute last_value of self in context <class '_ast.Store'>
Call self.visit
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call add_uses_enter_exit_of
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name add_uses_enter_exit_of in context <class '_ast.Load'>
Get add_uses_enter_exit_of in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c624e48>]
Attribute last_value of self in context <class '_ast.Store'>
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Call isinstance
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function visit_With>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_With>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node ???:*.isinstance>
Call self.analyze_binding
Call sanitize_exprs
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_With>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node import:pyan.anutils.sanitize_exprs>
Call sanitize_exprs
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_With>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node import:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_binding> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr analyze_binding not resolved; maybe fwd ref or unanalyzed import)
Call self.visit
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
FunctionDef analyze_functiondef
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Set analyze_functiondef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Attribute FunctionDef of ast in context <class '_ast.Load'>
Resolve ast.FunctionDef in context <class '_ast.Load'>
Get ast in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node module:ast>
Resolved to attr FunctionDef of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:ast.FunctionDef> (target obj <Node module:ast> known but target attr FunctionDef not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:ast.FunctionDef> (target obj <Node module:ast> known but target attr FunctionDef not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.TypeError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.TypeError>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c62ab70>]
Attribute last_value of self in context <class '_ast.Store'>
Assign ['deco_names'] []
Name deco_names in context <class '_ast.Store'>
Set deco_names in <Scope: function analyze_functiondef>: value None is not a Node
For-loop
Attribute decorator_list of ast_node in context <class '_ast.Load'>
Resolve ast_node.decorator_list in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Resolved to attr decorator_list of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> known but target attr decorator_list not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> known but target attr decorator_list not resolved; maybe fwd ref or unanalyzed import)
Name deco in context <class '_ast.Store'>
Set deco in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list>
Call self.visit
Name deco in context <class '_ast.Load'>
Get deco in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Assign ['deco_node'] ['self.last_value']
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name deco_node in context <class '_ast.Store'>
Set deco_node in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Call isinstance
Name deco_node in context <class '_ast.Load'>
Get deco_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.isinstance>
Call deco_names.append
Attribute name of deco_node in context <class '_ast.Load'>
Resolve deco_node.name in context <class '_ast.Load'>
Get deco_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of deco_names in context <class '_ast.Load'>
Resolve deco_names.append in context <class '_ast.Load'>
Get deco_names in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.append> (target obj deco_names not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.append> (target obj deco_names not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c632278>]
Attribute last_value of self in context <class '_ast.Store'>
Assign ['in_class_ns'] [<_ast.Call object at 0x7ffa5c632320>]
Call <_ast.Subscript object at 0x7ffa5c632390>.startswith
Attribute startswith of <_ast.Subscript object at 0x7ffa5c632390> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c632390>.startswith in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c632390> in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Resolved to attr startswith of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.startswith> (target obj <_ast.Subscript object at 0x7ffa5c632390> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.startswith> (target obj <_ast.Subscript object at 0x7ffa5c632390> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name in_class_ns in context <class '_ast.Store'>
Set in_class_ns in <Scope: function analyze_functiondef> to <Node ???:*.startswith>
Name in_class_ns in context <class '_ast.Load'>
Get in_class_ns in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.startswith>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.startswith>
Assign ['flavor'] ['Flavor.FUNCTION']
Attribute FUNCTION of Flavor in context <class '_ast.Load'>
Resolve Flavor.FUNCTION in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr FUNCTION of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.FUNCTION> (target obj <Node import:pyan.node.Flavor> known but target attr FUNCTION not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.FUNCTION> (target obj <Node import:pyan.node.Flavor> known but target attr FUNCTION not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node attribute:pyan.node.Flavor.FUNCTION>
Name deco_names in context <class '_ast.Load'>
Get deco_names in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.deco_names>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.deco_names>
Assign ['flavor'] ['Flavor.STATICMETHOD']
Attribute STATICMETHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.STATICMETHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr STATICMETHOD of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.STATICMETHOD> (target obj <Node import:pyan.node.Flavor> known but target attr STATICMETHOD not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.STATICMETHOD> (target obj <Node import:pyan.node.Flavor> known but target attr STATICMETHOD not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node attribute:pyan.node.Flavor.STATICMETHOD>
Name deco_names in context <class '_ast.Load'>
Get deco_names in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.deco_names>
Assign ['flavor'] ['Flavor.CLASSMETHOD']
Attribute CLASSMETHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASSMETHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr CLASSMETHOD of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.CLASSMETHOD> (target obj <Node import:pyan.node.Flavor> known but target attr CLASSMETHOD not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.CLASSMETHOD> (target obj <Node import:pyan.node.Flavor> known but target attr CLASSMETHOD not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node attribute:pyan.node.Flavor.CLASSMETHOD>
Assign ['flavor'] ['Flavor.METHOD']
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr METHOD of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node attribute:pyan.node.Flavor.METHOD>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.node.Flavor.METHOD>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.node.Flavor.METHOD>
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr METHOD of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.METHOD> (target obj <Node import:pyan.node.Flavor> known but target attr METHOD not resolved; maybe fwd ref or unanalyzed import)
Attribute CLASSMETHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASSMETHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr CLASSMETHOD of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.CLASSMETHOD> (target obj <Node import:pyan.node.Flavor> known but target attr CLASSMETHOD not resolved; maybe fwd ref or unanalyzed import)
Assign ['all_args'] ['ast_node.args']
Attribute args of ast_node in context <class '_ast.Load'>
Resolve ast_node.args in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name all_args in context <class '_ast.Store'>
Set all_args in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args>
Assign ['posargs'] ['all_args.args']
Attribute args of all_args in context <class '_ast.Load'>
Resolve all_args.args in context <class '_ast.Load'>
Get all_args in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args>
Resolved to attr args of <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name posargs in context <class '_ast.Store'>
Set posargs in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args>
Call len
Name posargs in context <class '_ast.Load'>
Get posargs in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args>
Name len in context <class '_ast.Load'>
Get len in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.len>
Assign ['self_name'] ['<_ast.Subscript object at 0x7ffa5c636048>.arg']
Attribute arg of <_ast.Subscript object at 0x7ffa5c636048> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c636048>.arg in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c636048> in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Resolved to attr arg of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.arg> (target obj <_ast.Subscript object at 0x7ffa5c636048> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.arg> (target obj <_ast.Subscript object at 0x7ffa5c636048> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name self_name in context <class '_ast.Store'>
Set self_name in <Scope: function analyze_functiondef> to <Node ???:*.arg>
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.arg>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.arg>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.node.Flavor.METHOD>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.node.Flavor.METHOD>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.node.Flavor.METHOD>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.node.Flavor.METHOD>
FunctionDef analyze_binding
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Set analyze_binding in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c636518>]
Attribute last_value of self in context <class '_ast.Store'>
Call len
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.len>
Call len
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.len>
Assign ['captured_values'] []
Name captured_values in context <class '_ast.Store'>
Set captured_values in <Scope: function analyze_binding>: value None is not a Node
For-loop
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name value in context <class '_ast.Store'>
Set value in <Scope: function analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Call self.visit
Name value in context <class '_ast.Load'>
Get value in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Call captured_values.append
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute append of captured_values in context <class '_ast.Load'>
Resolve captured_values.append in context <class '_ast.Load'>
Get captured_values in <Scope: function analyze_binding>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.append> (target obj captured_values not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.append> (target obj captured_values not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c636b70>]
Attribute last_value of self in context <class '_ast.Store'>
For-loop
Call zip
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name captured_values in context <class '_ast.Load'>
Get captured_values in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.captured_values>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.captured_values>
Name zip in context <class '_ast.Load'>
Get zip in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
Name tgt in context <class '_ast.Store'>
Set tgt in <Scope: function analyze_binding> to <Node ???:*.zip>
Name val in context <class '_ast.Store'>
Set val in <Scope: function analyze_binding> to <Node ???:*.zip>
Assign ['self.last_value'] ['val']
Name val in context <class '_ast.Load'>
Get val in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node ???:*.zip>
Call self.visit
Name tgt in context <class '_ast.Load'>
Get tgt in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c63d048>]
Attribute last_value of self in context <class '_ast.Store'>
For-loop
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name value in context <class '_ast.Store'>
Set value in <Scope: function analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Call self.visit
Name value in context <class '_ast.Load'>
Get value in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name tgt in context <class '_ast.Store'>
Set tgt in <Scope: function analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Call self.visit
Name tgt in context <class '_ast.Load'>
Get tgt in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c63d4a8>]
Attribute last_value of self in context <class '_ast.Store'>
FunctionDef analyze_generators
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Set analyze_generators in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
For-loop
Name generators in context <class '_ast.Load'>
Get generators in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Name gen in context <class '_ast.Store'>
Set gen in <Scope: function analyze_generators> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Assign ['targets'] [<_ast.Call object at 0x7ffa5c63d748>]
Call sanitize_exprs
Attribute target of gen in context <class '_ast.Load'>
Resolve gen.target in context <class '_ast.Load'>
Get gen in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function analyze_generators>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node import:pyan.anutils.sanitize_exprs>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node import:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function analyze_generators> to <Node import:pyan.anutils.sanitize_exprs>
Assign ['values'] [<_ast.Call object at 0x7ffa5c63d898>]
Call sanitize_exprs
Attribute iter of gen in context <class '_ast.Load'>
Resolve gen.iter in context <class '_ast.Load'>
Get gen in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Resolved to attr iter of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.iter> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr iter not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.iter> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr iter not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function analyze_generators>, found in <Scope: module >, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function analyze_generators> to <Node import:pyan.anutils.sanitize_exprs>
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node import:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node import:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node import:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_binding on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
For-loop
Attribute ifs of gen in context <class '_ast.Load'>
Resolve gen.ifs in context <class '_ast.Load'>
Get gen in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Resolved to attr ifs of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr ifs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr ifs not resolved; maybe fwd ref or unanalyzed import)
Name expr in context <class '_ast.Store'>
Set expr in <Scope: function analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs>
Call self.visit
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr visit not resolved; maybe fwd ref or unanalyzed import)
FunctionDef resolve_builtins
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Set resolve_builtins in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Attribute Call of ast in context <class '_ast.Load'>
Resolve ast.Call in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Call of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Call> (target obj <Node module:ast> known but target attr Call not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Call> (target obj <Node module:ast> known but target attr Call not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.TypeError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.TypeError>
Assign ['func_ast_node'] ['ast_node.func']
Attribute func of ast_node in context <class '_ast.Load'>
Resolve ast_node.func in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Resolved to attr func of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
Name func_ast_node in context <class '_ast.Store'>
Set func_ast_node in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Call isinstance
Name func_ast_node in context <class '_ast.Load'>
Get func_ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
Assign ['funcname'] ['func_ast_node.id']
Attribute id of func_ast_node in context <class '_ast.Load'>
Resolve func_ast_node.id in context <class '_ast.Load'>
Get func_ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Resolved to attr id of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name funcname in context <class '_ast.Store'>
Set funcname in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Assign ['class_node'] [<_ast.Call object at 0x7ffa5c6435f8>]
Call self.get_current_class
Attribute get_current_class of self in context <class '_ast.Load'>
Resolve self.get_current_class in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_current_class of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_current_class not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_current_class not resolved; maybe fwd ref or unanalyzed import)
Name class_node in context <class '_ast.Store'>
Set class_node in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.debug
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node import:pyan.anutils.resolve_method_resolution_order>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node import:pyan.anutils.resolve_method_resolution_order>
Call len
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node import:pyan.anutils.resolve_method_resolution_order>
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name len in context <class '_ast.Load'>
Get len in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.len>
Assign ['result'] [<_ast.Subscript object at 0x7ffa5c643c18>]
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node import:pyan.anutils.resolve_method_resolution_order>
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name result in context <class '_ast.Store'>
Set result in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.debug
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name result in context <class '_ast.Load'>
Get result in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name result in context <class '_ast.Load'>
Get result in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Assign ['msg'] [<_ast.BinOp object at 0x7ffa5c647128>]
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name msg in context <class '_ast.Store'>
Set msg in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.info
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call UnresolvedSuperCallError
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node import:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
Assign ['msg'] [<_ast.BinOp object at 0x7ffa5c647470>]
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name msg in context <class '_ast.Store'>
Set msg in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.info
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call UnresolvedSuperCallError
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_current_class>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node import:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node import:pyan.anutils.UnresolvedSuperCallError>
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Call len
Attribute args of ast_node in context <class '_ast.Load'>
Resolve ast_node.args in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.len>
Assign ['obj_astnode'] [<_ast.Subscript object at 0x7ffa5c647a90>]
Attribute args of ast_node in context <class '_ast.Load'>
Resolve ast_node.args in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name obj_astnode in context <class '_ast.Store'>
Set obj_astnode in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Call isinstance
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
Call self.logger.debug
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Call get_ast_node_name
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node import:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node import:pyan.anutils.get_ast_node_name>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['attrname'] [<_ast.BinOp object at 0x7ffa5c64a0f0>]
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Name attrname in context <class '_ast.Store'>
Set attrname in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Assign ['tmp_astnode'] [<_ast.Call object at 0x7ffa5c64a208>]
Call ast.Attribute
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Name attrname in context <class '_ast.Load'>
Get attrname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Attribute ctx of obj_astnode in context <class '_ast.Load'>
Resolve obj_astnode.ctx in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Resolved to attr ctx of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args.ctx> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args.ctx> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name tmp_astnode in context <class '_ast.Store'>
Set tmp_astnode in <Scope: function resolve_builtins> to <Node attribute:ast.Attribute>
Assign ['obj_node', 'attr_node'] [<_ast.Call object at 0x7ffa5c64a518>]
Call self.get_attribute
Name tmp_astnode in context <class '_ast.Load'>
Get tmp_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:ast.Attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:ast.Attribute>
Attribute get_attribute of self in context <class '_ast.Load'>
Resolve self.get_attribute in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_attribute not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Name attr_node in context <class '_ast.Store'>
Set attr_node in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Call self.logger.debug
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Call get_ast_node_name
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node import:pyan.anutils.get_ast_node_name>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute>
FunctionDef resolve_attribute
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Set resolve_attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.TypeError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.TypeError>
Call self.logger.debug
Call get_ast_node_name
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call type
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node', 'attr_name'] [<_ast.Call object at 0x7ffa5c64e470>]
Call self.resolve_attribute
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute resolve_attribute of self in context <class '_ast.Load'>
Resolve self.resolve_attribute in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name attr_name in context <class '_ast.Store'>
Set attr_name in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] [<_ast.Call object at 0x7ffa5c64e828>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c64ea58>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute Num of ast in context <class '_ast.Load'>
Resolve ast.Num in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Num of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Num> (target obj <Node module:ast> known but target attr Num not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Num> (target obj <Node module:ast> known but target attr Num not resolved; maybe fwd ref or unanalyzed import)
Attribute Str of ast in context <class '_ast.Load'>
Resolve ast.Str in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Str of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Str> (target obj <Node module:ast> known but target attr Str not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Str> (target obj <Node module:ast> known but target attr Str not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Assign ['t'] [<_ast.Call object at 0x7ffa5c6537b8>]
Call type
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
Name t in context <class '_ast.Store'>
Set t in <Scope: function resolve_attribute> to <Node ???:*.type>
Assign ['tn'] ['t.__name__']
Attribute __name__ of t in context <class '_ast.Load'>
Resolve t.__name__ in context <class '_ast.Load'>
Get t in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ???:*.type>
Resolved to attr __name__ of <Node ???:*.type>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.__name__> (target obj t not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.__name__> (target obj t not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name tn in context <class '_ast.Store'>
Set tn in <Scope: function resolve_attribute> to <Node ???:*.__name__>
Assign ['obj_node'] [<_ast.Call object at 0x7ffa5c6539e8>]
Call self.get_node
Name tn in context <class '_ast.Load'>
Get tn in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ???:*.__name__>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.__name__>
Attribute CLASS of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASS in context <class '_ast.Load'>
Get Flavor in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr CLASS of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.node.Flavor.CLASS> (target obj <Node import:pyan.node.Flavor> known but target attr CLASS not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.node.Flavor.CLASS> (target obj <Node import:pyan.node.Flavor> known but target attr CLASS not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node>
Call isinstance
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute Call of ast in context <class '_ast.Load'>
Resolve ast.Call in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Call of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Call> (target obj <Node module:ast> known but target attr Call not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Call> (target obj <Node module:ast> known but target attr Call not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node'] [<_ast.Call object at 0x7ffa5c653dd8>]
Call self.resolve_builtins
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute resolve_builtins of self in context <class '_ast.Load'>
Resolve self.resolve_builtins in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_builtins of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_builtins on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Assign ['obj_node'] [<_ast.Call object at 0x7ffa5c657400>]
Call self.get_value
Call get_ast_node_name
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node import:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node import:pyan.anutils.get_ast_node_name>
Attribute get_value of self in context <class '_ast.Load'>
Resolve self.get_value in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_value of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_value not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_value>
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
FunctionDef analyze_scopes
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes>
Set analyze_scopes in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['scopes'] [<_ast.Dict object at 0x7ffa5c657b00>]
Name scopes in context <class '_ast.Store'>
Set scopes in <Scope: function analyze_scopes>: value None is not a Node
FunctionDef process
Def from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Function <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Set process in <Scope: function analyze_scopes> to <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Assign ['sc'] [<_ast.Call object at 0x7ffa5c657c88>]
Call Scope
Name table in context <class '_ast.Load'>
Get table in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Name Scope in context <class '_ast.Load'>
Get Scope in <Scope: function process>, found in <Scope: module >, value <Node import:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node import:pyan.anutils.Scope>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node import:pyan.anutils.Scope>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function process> to <Node import:pyan.anutils.Scope>
Assign ['ns'] [<_ast.IfExp object at 0x7ffa5c657da0>]
Call len
Attribute name of sc in context <class '_ast.Load'>
Resolve sc.name in context <class '_ast.Load'>
Get sc in <Scope: function process>, found in <Scope: function process>, value <Node import:pyan.anutils.Scope>
Resolved to attr name of <Node import:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.name> (target obj <Node import:pyan.anutils.Scope> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.name> (target obj <Node import:pyan.anutils.Scope> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function process>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ???:*.len>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ???:*.len>
Name parent_ns in context <class '_ast.Load'>
Get parent_ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Attribute name of sc in context <class '_ast.Load'>
Resolve sc.name in context <class '_ast.Load'>
Get sc in <Scope: function process>, found in <Scope: function process>, value <Node import:pyan.anutils.Scope>
Resolved to attr name of <Node import:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.name> (target obj <Node import:pyan.anutils.Scope> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name parent_ns in context <class '_ast.Load'>
Get parent_ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function process> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Assign [<_ast.Subscript object at 0x7ffa5c65d0b8>] ['sc']
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function process>, found in <Scope: function process>, value <Node import:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node import:pyan.anutils.Scope>
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function process>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ???:*.scopes>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
For-loop
Call table.get_children
Attribute get_children of table in context <class '_ast.Load'>
Resolve table.get_children in context <class '_ast.Load'>
Get table in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Resolved to attr get_children of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^> known but target attr get_children not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^> known but target attr get_children not resolved; maybe fwd ref or unanalyzed import)
Name t in context <class '_ast.Store'>
Set t in <Scope: function process> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children>
Call process
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Name t in context <class '_ast.Load'>
Get t in <Scope: function process>, found in <Scope: function process>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children>
Name process in context <class '_ast.Load'>
Get process in <Scope: function process>, found in <Scope: function analyze_scopes>, value <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Call process
Attribute module_name of self in context <class '_ast.Load'>
Resolve self.module_name in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
getattr module_name on self returns <Node import:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node import:pyan.anutils.get_module_name>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node import:pyan.anutils.get_module_name>
Call symtable.symtable
Name code in context <class '_ast.Load'>
Get code in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Attribute symtable of symtable in context <class '_ast.Load'>
Resolve symtable.symtable in context <class '_ast.Load'>
Get symtable in <Scope: function analyze_scopes>, found in <Scope: module >, value <Node module:symtable>
Resolved to attr symtable of <Node module:symtable>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:symtable.symtable> (target obj <Node module:symtable> known but target attr symtable not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:symtable.symtable> (target obj <Node module:symtable> known but target attr symtable not resolved; maybe fwd ref or unanalyzed import)
Name process in context <class '_ast.Load'>
Get process in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
For-loop
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function analyze_scopes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function analyze_scopes> to <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> resolves <Node ???:*.scopes>; removing wildcard
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c65d898>] [<_ast.Subscript object at 0x7ffa5c65d9b0>]
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function analyze_scopes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node class:pyan.analyzer.CallGraphVisitor> resolves <Node ???:*.scopes>; removing wildcard
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c65db00>]
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function analyze_scopes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function analyze_scopes> to <Node ???:*.scopes>
Assign ['oldsc'] [<_ast.Subscript object at 0x7ffa5c65dc50>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node class:pyan.analyzer.CallGraphVisitor> resolves <Node ???:*.scopes>; removing wildcard
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name oldsc in context <class '_ast.Store'>
Set oldsc in <Scope: function analyze_scopes> to <Node ???:*.scopes>
For-loop
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function analyze_scopes> to <Node ???:*.defs>
Name name in context <class '_ast.Load'>
Get name in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.defs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.defs>
Attribute defs of oldsc in context <class '_ast.Load'>
Resolve oldsc.defs in context <class '_ast.Load'>
Get oldsc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj oldsc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c65df98>] [<_ast.Subscript object at 0x7ffa5c6600f0>]
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.defs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.defs>
Attribute defs of oldsc in context <class '_ast.Load'>
Resolve oldsc.defs in context <class '_ast.Load'>
Get oldsc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj oldsc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.defs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.defs>
Call self.logger.debug
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node class:pyan.analyzer.CallGraphVisitor> resolves <Node ???:*.scopes>; removing wildcard
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_current_class
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Set get_current_class in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call len
Attribute class_stack of self in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function get_current_class>, found in <Scope: function get_current_class>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_stack not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_stack not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function get_current_class>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to Name <Node ???:*.len>
Attribute class_stack of self in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function get_current_class>, found in <Scope: function get_current_class>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr class_stack not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_node_of_current_namespace
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Set get_node_of_current_namespace in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call len
Attribute name_stack of self in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr name_stack not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr name_stack not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function get_node_of_current_namespace>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node ???:*.len>
Assign ['namespace'] [<_ast.Call object at 0x7ffa5c660a90>]
Call <_ast.Str object at 0x7ffa5c660b00>.join
Attribute name_stack of self in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr name_stack not resolved; maybe fwd ref or unanalyzed import)
Attribute join of <_ast.Str object at 0x7ffa5c660b00> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x7ffa5c660b00>.join in context <class '_ast.Load'>
Resolved to attr join of <Node class:Str>
getattr join on <_ast.Str object at 0x7ffa5c660b00> returns <Node attribute:Str.join>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:Str.join>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:Str.join>
Name namespace in context <class '_ast.Store'>
Set namespace in <Scope: function get_node_of_current_namespace> to <Node attribute:Str.join>
Assign ['name'] [<_ast.Subscript object at 0x7ffa5c660d30>]
Attribute name_stack of self in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr name_stack not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack>
Call self.get_node
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node attribute:Str.join>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node attribute:Str.join>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack>
Attribute NAMESPACE of Flavor in context <class '_ast.Load'>
Resolve Flavor.NAMESPACE in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node_of_current_namespace>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr NAMESPACE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.node.Flavor.NAMESPACE> (target obj <Node import:pyan.node.Flavor> known but target attr NAMESPACE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.node.Flavor.NAMESPACE> (target obj <Node import:pyan.node.Flavor> known but target attr NAMESPACE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_value
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Set get_value in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
FunctionDef find_scope
Def from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Function <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Set find_scope in <Scope: function get_value> to <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
For-loop
Call reversed
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function find_scope>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
Name reversed in context <class '_ast.Load'>
Get reversed in <Scope: function find_scope>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ???:*.reversed>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ???:*.reversed>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function find_scope> to <Node ???:*.reversed>
Name name in context <class '_ast.Load'>
Get name in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Resolved to attr defs of <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Resolved to attr defs of <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ???:*.reversed>
Assign ['sc'] [<_ast.Call object at 0x7ffa5c4777f0>]
Call find_scope
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Name find_scope in context <class '_ast.Load'>
Get find_scope in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function get_value> to <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Assign ['value'] [<_ast.Subscript object at 0x7ffa5c4779e8>]
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Resolved to attr defs of <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> (target obj <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> (target obj <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Name value in context <class '_ast.Store'>
Set value in <Scope: function get_value> to <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Call isinstance
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function get_value>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_value>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ???:*.isinstance>
Call self.logger.info
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef set_value
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Set set_value in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
FunctionDef find_scope
Def from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Function <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Set find_scope in <Scope: function set_value> to <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
For-loop
Call reversed
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function find_scope>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scope_stack not resolved; maybe fwd ref or unanalyzed import)
Name reversed in context <class '_ast.Load'>
Get reversed in <Scope: function find_scope>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ???:*.reversed>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ???:*.reversed>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function find_scope> to <Node ???:*.reversed>
Name name in context <class '_ast.Load'>
Get name in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.find_scope.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.find_scope.^^^argument^^^>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.find_scope.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Resolved to attr defs of <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ???:*.reversed>
Assign ['sc'] [<_ast.Call object at 0x7ffa5c47ecf8>]
Call find_scope
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name find_scope in context <class '_ast.Load'>
Get find_scope in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function set_value> to <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Call isinstance
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function set_value>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_value>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ???:*.isinstance>
Assign [<_ast.Subscript object at 0x7ffa5c47efd0>] ['value']
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Resolved to attr defs of <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> (target obj <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> (target obj <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Call self.logger.info
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function set_value>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function set_value>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function set_value>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_attribute
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Set get_attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function get_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.TypeError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.TypeError>
Call isinstance
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Load of ast in context <class '_ast.Load'>
Resolve ast.Load in context <class '_ast.Load'>
Get ast in <Scope: function get_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Load of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
Call ValueError
Call type
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.type>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.ValueError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.ValueError>
Assign ['obj_node', 'attr_name'] [<_ast.Call object at 0x7ffa5c46b160>]
Call self.resolve_attribute
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Attribute resolve_attribute of self in context <class '_ast.Load'>
Resolve self.resolve_attribute in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name attr_name in context <class '_ast.Store'>
Set attr_name in <Scope: function get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function get_attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] [<_ast.Call object at 0x7ffa5c46b4e0>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute ATTRIBUTE of Flavor in context <class '_ast.Load'>
Resolve Flavor.ATTRIBUTE in context <class '_ast.Load'>
Get Flavor in <Scope: function get_attribute>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr ATTRIBUTE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> (target obj <Node import:pyan.node.Flavor> known but target attr ATTRIBUTE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> (target obj <Node import:pyan.node.Flavor> known but target attr ATTRIBUTE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
FunctionDef lookup
Def from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Function <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Set lookup in <Scope: function get_attribute> to <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c46bba8>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function lookup> to <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Resolved to attr defs of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Resolved to attr defs of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Assign ['value_node'] [<_ast.Call object at 0x7ffa5c46bf98>]
Call lookup
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name lookup in context <class '_ast.Load'>
Get lookup in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Store'>
Set value_node in <Scope: function get_attribute> to <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node import:pyan.anutils.resolve_method_resolution_order>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node import:pyan.anutils.resolve_method_resolution_order>
For-loop
Call tail
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node import:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node import:pyan.anutils.resolve_method_resolution_order>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name tail in context <class '_ast.Load'>
Get tail in <Scope: function get_attribute>, found in <Scope: module >, value <Node import:pyan.anutils.tail>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node import:pyan.anutils.tail>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node import:pyan.anutils.tail>
Name base_node in context <class '_ast.Store'>
Set base_node in <Scope: function get_attribute> to <Node import:pyan.anutils.tail>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c4745c0>]
Call base_node.get_name
Attribute get_name of base_node in context <class '_ast.Load'>
Resolve base_node.get_name in context <class '_ast.Load'>
Get base_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node import:pyan.anutils.tail>
Resolved to attr get_name of <Node import:pyan.anutils.tail>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.anutils.tail.get_name> (target obj <Node import:pyan.anutils.tail> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.anutils.tail.get_name> (target obj <Node import:pyan.anutils.tail> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_attribute> to <Node attribute:pyan.anutils.tail.get_name>
Assign ['value_node'] [<_ast.Call object at 0x7ffa5c4746d8>]
Call lookup
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.anutils.tail.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.anutils.tail.get_name>
Name lookup in context <class '_ast.Load'>
Get lookup in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Store'>
Set value_node in <Scope: function get_attribute> to <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name base_node in context <class '_ast.Load'>
Get base_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node import:pyan.anutils.tail>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node import:pyan.anutils.tail>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
FunctionDef set_attribute
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.set_attribute>
Set set_attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.set_attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function set_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.TypeError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.TypeError>
Call isinstance
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Store of ast in context <class '_ast.Load'>
Resolve ast.Store in context <class '_ast.Load'>
Get ast in <Scope: function set_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Store of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Call ValueError
Call type
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.type>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.ValueError>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.ValueError>
Call isinstance
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function set_attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node', 'attr_name'] [<_ast.Call object at 0x7ffa5c4726d8>]
Call self.resolve_attribute
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Attribute resolve_attribute of self in context <class '_ast.Load'>
Resolve self.resolve_attribute in context <class '_ast.Load'>
Get self in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name attr_name in context <class '_ast.Store'>
Set attr_name in <Scope: function set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function set_attribute>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node import:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] [<_ast.Call object at 0x7ffa5c472a58>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c472c88>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Assign [<_ast.Subscript object at 0x7ffa5c472dd8>] ['new_value']
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
FunctionDef get_node
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Set get_node in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Attribute UNSPECIFIED of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNSPECIFIED in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr UNSPECIFIED of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.UNSPECIFIED> (target obj <Node import:pyan.node.Flavor> known but target attr UNSPECIFIED not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.UNSPECIFIED> (target obj <Node import:pyan.node.Flavor> known but target attr UNSPECIFIED not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name n in context <class '_ast.Store'>
Set n in <Scope: function get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute namespace of n in context <class '_ast.Load'>
Resolve n.namespace in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Call Flavor.specificity
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute specificity of Flavor in context <class '_ast.Load'>
Resolve Flavor.specificity in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr specificity of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.specificity> (target obj <Node import:pyan.node.Flavor> known but target attr specificity not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.specificity> (target obj <Node import:pyan.node.Flavor> known but target attr specificity not resolved; maybe fwd ref or unanalyzed import)
Call Flavor.specificity
Attribute flavor of n in context <class '_ast.Load'>
Resolve n.flavor in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.flavor> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.flavor> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Attribute specificity of Flavor in context <class '_ast.Load'>
Resolve Flavor.specificity in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr specificity of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.specificity> (target obj <Node import:pyan.node.Flavor> known but target attr specificity not resolved; maybe fwd ref or unanalyzed import)
Assign ['n.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute flavor of n in context <class '_ast.Store'>
Resolve n.flavor in context <class '_ast.Store'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute module_to_filename of self in context <class '_ast.Load'>
Resolve self.module_to_filename in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_to_filename of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_to_filename not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_to_filename not resolved; maybe fwd ref or unanalyzed import)
Assign ['filename'] [<_ast.Subscript object at 0x7ffa5c479be0>]
Attribute module_to_filename of self in context <class '_ast.Load'>
Resolve self.module_to_filename in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_to_filename of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr module_to_filename not resolved; maybe fwd ref or unanalyzed import)
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Assign ['filename'] ['self.filename']
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Assign ['n'] [<_ast.Call object at 0x7ffa5c479e48>]
Call Node
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function get_node>, found in <Scope: module >, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node import:pyan.node.Node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node import:pyan.node.Node>
Name n in context <class '_ast.Store'>
Set n in <Scope: function get_node> to <Node import:pyan.node.Node>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Call <_ast.Subscript object at 0x7ffa5c47d1d0>.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node import:pyan.node.Node>
Attribute append of <_ast.Subscript object at 0x7ffa5c47d1d0> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c47d1d0>.append in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c47d1d0> in <Scope: function get_node>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c47d1d0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c47d1d0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c47d358>] ['n']
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node import:pyan.node.Node>
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node import:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node import:pyan.node.Node>
FunctionDef get_parent_node
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Set get_parent_node in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Attribute namespace of graph_node in context <class '_ast.Load'>
Resolve graph_node.namespace in context <class '_ast.Load'>
Get graph_node in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns', 'name'] [<_ast.Call object at 0x7ffa5c47d898>]
Call graph_node.namespace.rsplit
Attribute rsplit of graph_node.namespace in context <class '_ast.Load'>
Resolve graph_node.namespace.rsplit in context <class '_ast.Load'>
Resolve graph_node.namespace in context <class '_ast.Load'>
Get graph_node in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Unresolved, returning attr rsplit of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node ???:*.rsplit> (target obj graph_node.namespace not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node ???:*.rsplit> (target obj graph_node.namespace not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_parent_node> to <Node ???:*.rsplit>
Name name in context <class '_ast.Store'>
Set name in <Scope: function get_parent_node> to <Node ???:*.rsplit>
Assign ['ns', 'name'] [<_ast.Str object at 0x7ffa5c47db00>, 'graph_node.namespace']
Attribute namespace of graph_node in context <class '_ast.Load'>
Resolve graph_node.namespace in context <class '_ast.Load'>
Get graph_node in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_parent_node>: value None is not a Node
Name name in context <class '_ast.Store'>
Set name in <Scope: function get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ???:*.rsplit>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to Name <Node ???:*.rsplit>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef associate_node
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Set associate_node in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['graph_node.ast_node'] ['ast_node']
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Attribute ast_node of graph_node in context <class '_ast.Store'>
Resolve graph_node.ast_node in context <class '_ast.Store'>
Get graph_node in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Resolved to attr ast_node of <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Assign ['graph_node.filename'] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Attribute filename of graph_node in context <class '_ast.Store'>
Resolve graph_node.filename in context <class '_ast.Store'>
Get graph_node in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Resolved to attr filename of <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
FunctionDef add_defines_edge
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Set add_defines_edge in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c487518>] [<_ast.Call object at 0x7ffa5c487630>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function add_defines_edge>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ???:*.set>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ???:*.set>
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Call <_ast.Subscript object at 0x7ffa5c487978>.add
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Attribute add of <_ast.Subscript object at 0x7ffa5c487978> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c487978>.add in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c487978> in <Scope: function add_defines_edge>: no Node value (or name not in scope)
Resolved to attr add of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.add> (target obj <_ast.Subscript object at 0x7ffa5c487978> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.add> (target obj <_ast.Subscript object at 0x7ffa5c487978> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['from_node.defined'] [<_ast.NameConstant object at 0x7ffa5c487b70>]
Attribute defined of from_node in context <class '_ast.Store'>
Assign ['to_node.defined'] [<_ast.NameConstant object at 0x7ffa5c487c50>]
Attribute defined of to_node in context <class '_ast.Store'>
FunctionDef add_uses_edge
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Set add_uses_edge in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c487fd0>] [<_ast.Call object at 0x7ffa5c48a128>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function add_uses_edge>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ???:*.set>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ???:*.set>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Call <_ast.Subscript object at 0x7ffa5c48a470>.add
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute add of <_ast.Subscript object at 0x7ffa5c48a470> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c48a470>.add in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c48a470> in <Scope: function add_uses_edge>: no Node value (or name not in scope)
Resolved to attr add of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.add> (target obj <_ast.Subscript object at 0x7ffa5c48a470> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.add> (target obj <_ast.Subscript object at 0x7ffa5c48a470> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of to_node in context <class '_ast.Load'>
Resolve to_node.namespace in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_wild
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute name of to_node in context <class '_ast.Load'>
Resolve to_node.name in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute remove_wild of self in context <class '_ast.Load'>
Resolve self.remove_wild in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_wild of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr remove_wild not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr remove_wild not resolved; maybe fwd ref or unanalyzed import)
FunctionDef remove_uses_edge
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Set remove_uses_edge in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Assign ['u'] [<_ast.Subscript object at 0x7ffa5c48ac18>]
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Name u in context <class '_ast.Store'>
Set u in <Scope: function remove_uses_edge> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Name u in context <class '_ast.Load'>
Get u in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Call u.remove
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Attribute remove of u in context <class '_ast.Load'>
Resolve u.remove in context <class '_ast.Load'>
Get u in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Resolved to attr remove of <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^.remove> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^> known but target attr remove not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^.remove> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^> known but target attr remove not resolved; maybe fwd ref or unanalyzed import)
FunctionDef remove_wild
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Set remove_wild in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Call <_ast.Call object at 0x7ffa5c48d390>.find
Attribute find of <_ast.Call object at 0x7ffa5c48d390> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c48d390>.find in context <class '_ast.Load'>
Unresolved function call as obj, returning attr find of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node ???:*.find> (target obj <_ast.Call object at 0x7ffa5c48d390> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node ???:*.find> (target obj <_ast.Call object at 0x7ffa5c48d390> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Assign ['matching_wilds'] [<_ast.ListComp object at 0x7ffa5c48d6a0>]
ListComp
Name n in context <class '_ast.Load'>
Get n in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ???:*.n>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ???:*.n>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function listcomp>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name n in context <class '_ast.Store'>
Set n in <Scope: function listcomp> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Attribute namespace of n in context <class '_ast.Load'>
Resolve n.namespace in context <class '_ast.Load'>
Get n in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute name of n in context <class '_ast.Load'>
Resolve n.name in context <class '_ast.Load'>
Get n in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function listcomp>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Def from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to listcomp <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name matching_wilds in context <class '_ast.Store'>
Set matching_wilds in <Scope: function remove_wild> to <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Call len
Name matching_wilds in context <class '_ast.Load'>
Get matching_wilds in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function remove_wild>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ???:*.len>
Call len
Name matching_wilds in context <class '_ast.Load'>
Get matching_wilds in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function remove_wild>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ???:*.len>
Assign ['wild_node'] [<_ast.Subscript object at 0x7ffa5c48dd30>]
Name matching_wilds in context <class '_ast.Load'>
Get matching_wilds in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name wild_node in context <class '_ast.Store'>
Set wild_node in <Scope: function remove_wild> to <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name wild_node in context <class '_ast.Load'>
Get wild_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name wild_node in context <class '_ast.Load'>
Get wild_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Attribute remove_uses_edge of self in context <class '_ast.Load'>
Resolve self.remove_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
FunctionDef contract_nonexistents
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents>
Set contract_nonexistents in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['new_uses_edges'] []
Name new_uses_edges in context <class '_ast.Store'>
Set new_uses_edges in <Scope: function contract_nonexistents>: value None is not a Node
Assign ['removed_uses_edges'] []
Name removed_uses_edges in context <class '_ast.Store'>
Set removed_uses_edges in <Scope: function contract_nonexistents>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute defined of n2 in context <class '_ast.Load'>
Resolve n2.defined in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr defined of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.defined> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.defined> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Assign ['n3'] [<_ast.Call object at 0x7ffa5c492940>]
Call self.get_node
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute ast_node of n2 in context <class '_ast.Load'>
Resolve n2.ast_node in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr ast_node of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.ast_node> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr ast_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.ast_node> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr ast_node not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['n3.defined'] [<_ast.NameConstant object at 0x7ffa5c492ba8>]
Attribute defined of n3 in context <class '_ast.Store'>
Call new_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute append of new_uses_edges in context <class '_ast.Load'>
Resolve new_uses_edges.append in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.append> (target obj new_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.append> (target obj new_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call removed_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute append of removed_uses_edges in context <class '_ast.Load'>
Resolve removed_uses_edges.append in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.append> (target obj removed_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.logger.info
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name new_uses_edges in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function contract_nonexistents> to <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function contract_nonexistents> to <Node ???:*.new_uses_edges>
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
For-loop
Name removed_uses_edges in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function contract_nonexistents> to <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function contract_nonexistents> to <Node ???:*.removed_uses_edges>
Call self.remove_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
Attribute remove_uses_edge of self in context <class '_ast.Load'>
Resolve self.remove_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
FunctionDef expand_unknowns
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns>
Set expand_unknowns in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['new_defines_edges'] []
Name new_defines_edges in context <class '_ast.Store'>
Set new_defines_edges in <Scope: function expand_unknowns>: value None is not a Node
For-loop
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
For-loop
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call new_defines_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Attribute append of new_defines_edges in context <class '_ast.Load'>
Resolve new_defines_edges.append in context <class '_ast.Load'>
Get new_defines_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.append> (target obj new_defines_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.append> (target obj new_defines_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name new_defines_edges in context <class '_ast.Load'>
Get new_defines_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function expand_unknowns> to <Node ???:*.new_defines_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function expand_unknowns> to <Node ???:*.new_defines_edges>
Call self.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Attribute add_defines_edge of self in context <class '_ast.Load'>
Resolve self.add_defines_edge in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_defines_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_defines_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['new_uses_edges'] []
Name new_uses_edges in context <class '_ast.Store'>
Set new_uses_edges in <Scope: function expand_unknowns>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call new_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Attribute append of new_uses_edges in context <class '_ast.Load'>
Resolve new_uses_edges.append in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.append> (target obj new_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name new_uses_edges in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function expand_unknowns> to <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function expand_unknowns> to <Node ???:*.new_uses_edges>
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Name n in context <class '_ast.Store'>
Set n in <Scope: function expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Attribute namespace of n in context <class '_ast.Load'>
Resolve n.namespace in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['n.defined'] [<_ast.NameConstant object at 0x7ffa5c49f668>]
Attribute defined of n in context <class '_ast.Store'>
FunctionDef cull_inherited
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited>
Set cull_inherited in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['removed_uses_edges'] []
Name removed_uses_edges in context <class '_ast.Store'>
Set removed_uses_edges in <Scope: function cull_inherited>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Assign ['inherited'] [<_ast.NameConstant object at 0x7ffa5c49fb38>]
Name inherited in context <class '_ast.Store'>
Set inherited in <Scope: function cull_inherited>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute name of n3 in context <class '_ast.Load'>
Resolve n3.name in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Resolved to attr namespace of <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['pn2'] [<_ast.Call object at 0x7ffa5c5e3208>]
Call self.get_parent_node
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute get_parent_node of self in context <class '_ast.Load'>
Resolve self.get_parent_node in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_parent_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_parent_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn2 in context <class '_ast.Store'>
Set pn2 in <Scope: function cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Assign ['pn3'] [<_ast.Call object at 0x7ffa5c5e3358>]
Call self.get_parent_node
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute get_parent_node of self in context <class '_ast.Load'>
Resolve self.get_parent_node in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_parent_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_parent_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn3 in context <class '_ast.Store'>
Set pn3 in <Scope: function cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn2 in context <class '_ast.Load'>
Get pn2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name pn3 in context <class '_ast.Load'>
Get pn3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name pn2 in context <class '_ast.Load'>
Get pn2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Assign ['inherited'] [<_ast.NameConstant object at 0x7ffa5c5e3780>]
Name inherited in context <class '_ast.Store'>
Set inherited in <Scope: function cull_inherited>: value None is not a Node
Name inherited in context <class '_ast.Load'>
Get inherited in <Scope: function cull_inherited>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.inherited>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.inherited>
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Call removed_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute append of removed_uses_edges in context <class '_ast.Load'>
Resolve removed_uses_edges.append in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function cull_inherited>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.append> (target obj removed_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.append> (target obj removed_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.logger.info
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name removed_uses_edges in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function cull_inherited>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function cull_inherited> to <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function cull_inherited> to <Node ???:*.removed_uses_edges>
Call self.remove_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
Attribute remove_uses_edge of self in context <class '_ast.Load'>
Resolve self.remove_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
FunctionDef collapse_inner
Def from <Node class:pyan.analyzer.CallGraphVisitor> to Function <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner>
Set collapse_inner in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Name name in context <class '_ast.Load'>
Get name in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Name n in context <class '_ast.Store'>
Set n in <Scope: function collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Assign ['pn'] [<_ast.Call object at 0x7ffa5c5e7588>]
Call self.get_parent_node
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Attribute get_parent_node of self in context <class '_ast.Load'>
Resolve self.get_parent_node in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_parent_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_parent_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn in context <class '_ast.Store'>
Set pn in <Scope: function collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> (target obj <Node class:pyan.analyzer.CallGraphVisitor> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Call self.logger.info
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Name pn in context <class '_ast.Load'>
Get pn in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name pn in context <class '_ast.Load'>
Get pn in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Assign ['n.defined'] [<_ast.NameConstant object at 0x7ffa5c5e7d68>]
Attribute defined of n in context <class '_ast.Store'>
========== pass 1, file 'pyan/anutils.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>}
Module
Import ['os.path']
Set: name os.path not in scope
Use from <Node module:pyan.anutils> to Import <Node module:os.path>
New edge added for Use from <Node module:pyan.anutils> to Import <Node module:os.path>
Import ['ast']
Set ast in <Scope: module > to <Node module:ast>
Use from <Node module:pyan.anutils> to Import <Node module:ast>
New edge added for Use from <Node module:pyan.anutils> to Import <Node module:ast>
ImportFrom: from node import ['Flavor']
Use from <Node module:pyan.anutils> to ImportFrom <Node module:node>
New edge added for Use from <Node module:pyan.anutils> to ImportFrom <Node module:node>
Set Flavor in <Scope: module > to <Node import:pyan.node.Flavor>
From setting name Flavor to <Node import:pyan.node.Flavor>
FunctionDef head
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.head>
Set head in <Scope: module > to <Node function:pyan.anutils.head>
Call len
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function head>, found in <Scope: function head>, value <Node ---:pyan.anutils.head.^^^argument^^^>
Use from <Node function:pyan.anutils.head> to Name <Node ---:pyan.anutils.head.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.head> to Name <Node ---:pyan.anutils.head.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function head>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.head> to Name <Node ???:*.len>
New edge added for Use from <Node function:pyan.anutils.head> to Name <Node ???:*.len>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function head>, found in <Scope: function head>, value <Node ---:pyan.anutils.head.^^^argument^^^>
Use from <Node function:pyan.anutils.head> to Name <Node ---:pyan.anutils.head.^^^argument^^^>
FunctionDef tail
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.tail>
Set tail in <Scope: module > to <Node function:pyan.anutils.tail>
Call len
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function tail>, found in <Scope: function tail>, value <Node ---:pyan.anutils.tail.^^^argument^^^>
Use from <Node function:pyan.anutils.tail> to Name <Node ---:pyan.anutils.tail.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.tail> to Name <Node ---:pyan.anutils.tail.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function tail>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.tail> to Name <Node ???:*.len>
New edge added for Use from <Node function:pyan.anutils.tail> to Name <Node ???:*.len>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function tail>, found in <Scope: function tail>, value <Node ---:pyan.anutils.tail.^^^argument^^^>
Use from <Node function:pyan.anutils.tail> to Name <Node ---:pyan.anutils.tail.^^^argument^^^>
FunctionDef get_module_name
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.get_module_name>
Set get_module_name in <Scope: module > to <Node function:pyan.anutils.get_module_name>
Call os.path.basename
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute basename of os.path in context <class '_ast.Load'>
Resolve os.path.basename in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr basename of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.basename> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.basename> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call get_module_name
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function get_module_name>, found in <Scope: module >, value <Node function:pyan.anutils.get_module_name>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node function:pyan.anutils.get_module_name>
New edge added for Use from <Node function:pyan.anutils.get_module_name> to Name <Node function:pyan.anutils.get_module_name>
Assign ['init_path'] [<_ast.Call object at 0x7ffa5c616940>]
Call os.path.join
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute join of os.path in context <class '_ast.Load'>
Resolve os.path.join in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr join of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name init_path in context <class '_ast.Store'>
Set init_path in <Scope: function get_module_name> to <Node ???:*.join>
Assign ['mod_name'] [<_ast.Call object at 0x7ffa5c616be0>]
Call <_ast.Call object at 0x7ffa5c616c50>.replace
Attribute replace of <_ast.Call object at 0x7ffa5c616c50> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c616c50>.replace in context <class '_ast.Load'>
Unresolved function call as obj, returning attr replace of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.replace> (target obj <_ast.Call object at 0x7ffa5c616c50> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.replace> (target obj <_ast.Call object at 0x7ffa5c616c50> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function get_module_name> to <Node ???:*.replace>
Call os.path.exists
Name init_path in context <class '_ast.Load'>
Get init_path in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.join>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.join>
Attribute exists of os.path in context <class '_ast.Load'>
Resolve os.path.exists in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr exists of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.replace>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.replace>
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.replace>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.replace>
Call get_module_name
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function get_module_name>, found in <Scope: module >, value <Node function:pyan.anutils.get_module_name>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node function:pyan.anutils.get_module_name>
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.replace>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.replace>
FunctionDef format_alias
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.format_alias>
Set format_alias in <Scope: module > to <Node function:pyan.anutils.format_alias>
Call isinstance
Name x in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to Name <Node ---:pyan.anutils.format_alias.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.format_alias> to Name <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Attribute alias of ast in context <class '_ast.Load'>
Resolve ast.alias in context <class '_ast.Load'>
Get ast in <Scope: function format_alias>, found in <Scope: module >, value <Node module:ast>
Resolved to attr alias of <Node module:ast>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:ast.alias> (target obj <Node module:ast> known but target attr alias not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.format_alias> to <Node attribute:ast.alias> (target obj <Node module:ast> known but target attr alias not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function format_alias>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.isinstance>
New edge added for Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name x in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to Name <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function format_alias>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.type>
New edge added for Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function format_alias>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.TypeError>
New edge added for Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.TypeError>
Attribute asname of x in context <class '_ast.Load'>
Resolve x.asname in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr asname of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.asname> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.asname> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute name of x in context <class '_ast.Load'>
Resolve x.name in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute asname of x in context <class '_ast.Load'>
Resolve x.asname in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr asname of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.asname> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute name of x in context <class '_ast.Load'>
Resolve x.name in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_ast_node_name
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.get_ast_node_name>
Set get_ast_node_name in <Scope: module > to <Node function:pyan.anutils.get_ast_node_name>
Call isinstance
Name x in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function get_ast_node_name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_ast_node_name>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ???:*.isinstance>
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ???:*.isinstance>
Call get_ast_node_name
Attribute value of x in context <class '_ast.Load'>
Resolve x.value in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.value> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.value> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function get_ast_node_name>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node function:pyan.anutils.get_ast_node_name>
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute attr of x in context <class '_ast.Load'>
Resolve x.attr in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.attr> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.attr> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Name x in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function get_ast_node_name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_ast_node_name>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ???:*.isinstance>
Attribute id of x in context <class '_ast.Load'>
Resolve x.id in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.id> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.id> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
FunctionDef sanitize_exprs
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.sanitize_exprs>
Set sanitize_exprs in <Scope: module > to <Node function:pyan.anutils.sanitize_exprs>
FunctionDef process
Def from <Node function:pyan.anutils.sanitize_exprs> to Function <Node function:pyan.anutils.sanitize_exprs.process>
Set process in <Scope: function sanitize_exprs> to <Node function:pyan.anutils.sanitize_exprs.process>
Call isinstance
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Attribute Tuple of ast in context <class '_ast.Load'>
Resolve ast.Tuple in context <class '_ast.Load'>
Get ast in <Scope: function process>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Tuple of <Node module:ast>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.Tuple> (target obj <Node module:ast> known but target attr Tuple not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.Tuple> (target obj <Node module:ast> known but target attr Tuple not resolved; maybe fwd ref or unanalyzed import)
Attribute List of ast in context <class '_ast.Load'>
Resolve ast.List in context <class '_ast.Load'>
Get ast in <Scope: function process>, found in <Scope: module >, value <Node module:ast>
Resolved to attr List of <Node module:ast>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.List> (target obj <Node module:ast> known but target attr List not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.List> (target obj <Node module:ast> known but target attr List not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function process>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ???:*.isinstance>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ???:*.isinstance>
Attribute elts of expr in context <class '_ast.Load'>
Resolve expr.elts in context <class '_ast.Load'>
Get expr in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Resolved to attr elts of <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:pyan.anutils.sanitize_exprs.process.^^^argument^^^.elts> (target obj <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^> known but target attr elts not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:pyan.anutils.sanitize_exprs.process.^^^argument^^^.elts> (target obj <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^> known but target attr elts not resolved; maybe fwd ref or unanalyzed import)
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Call isinstance
Name exprs in context <class '_ast.Load'>
Get exprs in <Scope: function sanitize_exprs>, found in <Scope: function sanitize_exprs>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name tuple in context <class '_ast.Load'>
Get tuple in <Scope: function sanitize_exprs>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.tuple>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.tuple>
Name list in context <class '_ast.Load'>
Get list in <Scope: function sanitize_exprs>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.list>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.list>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function sanitize_exprs>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.isinstance>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.isinstance>
ListComp
Call process
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node ???:*.expr>
New edge added for Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node ???:*.expr>
Name process in context <class '_ast.Load'>
Get process in <Scope: function listcomp>, found in <Scope: function sanitize_exprs>, value <Node function:pyan.anutils.sanitize_exprs.process>
Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs.process>
New edge added for Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs.process>
Name exprs in context <class '_ast.Load'>
Get exprs in <Scope: function listcomp>, found in <Scope: function sanitize_exprs>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name expr in context <class '_ast.Store'>
Set expr in <Scope: function listcomp> to <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Def from <Node function:pyan.anutils.sanitize_exprs> to listcomp <Node namespace:pyan.anutils.sanitize_exprs.listcomp>
Call process
Name exprs in context <class '_ast.Load'>
Get exprs in <Scope: function sanitize_exprs>, found in <Scope: function sanitize_exprs>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name process in context <class '_ast.Load'>
Get process in <Scope: function sanitize_exprs>, found in <Scope: function sanitize_exprs>, value <Node function:pyan.anutils.sanitize_exprs.process>
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node function:pyan.anutils.sanitize_exprs.process>
New edge added for Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node function:pyan.anutils.sanitize_exprs.process>
FunctionDef resolve_method_resolution_order
Def from <Node module:pyan.anutils> to Function <Node function:pyan.anutils.resolve_method_resolution_order>
Set resolve_method_resolution_order in <Scope: module > to <Node function:pyan.anutils.resolve_method_resolution_order>
ClassDef LinearizationImpossible
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Class <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Set LinearizationImpossible in <Scope: function resolve_method_resolution_order> to <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Name Exception in context <class '_ast.Load'>
Get Exception in <Scope: class LinearizationImpossible>: no Node value (or name not in scope)
Use from <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible> to Name <Node ???:*.Exception>
New edge added for Use from <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible> to Name <Node ???:*.Exception>
ImportFrom: from functools import ['reduce']
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to ImportFrom <Node module:functools>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to ImportFrom <Node module:functools>
Set reduce in <Scope: function resolve_method_resolution_order> to <Node import:functools.reduce>
From setting name reduce to <Node import:functools.reduce>
ImportFrom: from operator import ['add']
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to ImportFrom <Node module:operator>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to ImportFrom <Node module:operator>
Set add in <Scope: function resolve_method_resolution_order> to <Node import:operator.add>
From setting name add to <Node import:operator.add>
FunctionDef C3_find_good_head
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Function <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Set C3_find_good_head in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Assign ['flat_tails'] [<_ast.Call object at 0x7ffa5c6201d0>]
Call reduce
Name add in context <class '_ast.Load'>
Get add in <Scope: function C3_find_good_head>, found in <Scope: function resolve_method_resolution_order>, value <Node import:operator.add>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:operator.add>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:operator.add>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name reduce in context <class '_ast.Load'>
Get reduce in <Scope: function C3_find_good_head>, found in <Scope: function resolve_method_resolution_order>, value <Node import:functools.reduce>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:functools.reduce>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:functools.reduce>
Name flat_tails in context <class '_ast.Store'>
Set flat_tails in <Scope: function C3_find_good_head> to <Node import:functools.reduce>
For-loop
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name hd in context <class '_ast.Store'>
Set hd in <Scope: function C3_find_good_head> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name flat_tails in context <class '_ast.Load'>
Get flat_tails in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node import:functools.reduce>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:functools.reduce>
Call LinearizationImpossible
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name LinearizationImpossible in context <class '_ast.Load'>
Get LinearizationImpossible in <Scope: function C3_find_good_head>, found in <Scope: function resolve_method_resolution_order>, value <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node method:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible.__init__> (call creates an instance)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node method:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible.__init__> (call creates an instance)
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
FunctionDef remove_all
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Function <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
Set remove_all in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
ListComp
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ???:*.x>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ???:*.x>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function remove_all>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name elt in context <class '_ast.Load'>
Get elt in <Scope: function listcomp>, found in <Scope: function remove_all>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Def from <Node function:pyan.anutils.resolve_method_resolution_order.remove_all> to listcomp <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp>
FunctionDef remove_all_in
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Function <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Set remove_all_in in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
ListComp
Call remove_all
Name elt in context <class '_ast.Load'>
Get elt in <Scope: function listcomp>, found in <Scope: function remove_all_in>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ???:*.lst>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ???:*.lst>
Name remove_all in context <class '_ast.Load'>
Get remove_all in <Scope: function listcomp>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function listcomp>, found in <Scope: function remove_all_in>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Name lst in context <class '_ast.Store'>
Set lst in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Def from <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in> to listcomp <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp>
FunctionDef C3_merge
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Function <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Set C3_merge in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Assign ['out'] []
Name out in context <class '_ast.Store'>
Set out in <Scope: function C3_merge>: value None is not a Node
Call logger.debug
Name out in context <class '_ast.Load'>
Get out in <Scope: function C3_merge>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.out>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.out>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['heads'] [<_ast.ListComp object at 0x7ffa5c5a60f0>]
ListComp
Call head
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ???:*.lst>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ???:*.lst>
Name head in context <class '_ast.Load'>
Get head in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.head>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.head>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.head>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function listcomp>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name lst in context <class '_ast.Store'>
Set lst in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Call head
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name head in context <class '_ast.Load'>
Get head in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.head>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.head>
Def from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to listcomp <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name heads in context <class '_ast.Store'>
Set heads in <Scope: function C3_merge> to <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Call len
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function C3_merge>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.len>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.len>
Assign ['tails'] [<_ast.ListComp object at 0x7ffa5c5a6550>]
ListComp
Call tail
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name tail in context <class '_ast.Load'>
Get tail in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.tail>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.tail>
New edge added for Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.tail>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function listcomp>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name lst in context <class '_ast.Store'>
Set lst in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name tails in context <class '_ast.Store'>
Set tails in <Scope: function C3_merge> to <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Call logger.debug
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['hd'] [<_ast.Call object at 0x7ffa5c5a6940>]
Call C3_find_good_head
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name C3_find_good_head in context <class '_ast.Load'>
Get C3_find_good_head in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Name hd in context <class '_ast.Store'>
Set hd in <Scope: function C3_merge> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Call logger.debug
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call out.append
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Attribute append of out in context <class '_ast.Load'>
Resolve out.append in context <class '_ast.Load'>
Get out in <Scope: function C3_merge>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node ???:*.append> (target obj out not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node ???:*.append> (target obj out not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['lists'] [<_ast.Call object at 0x7ffa5c5a6d30>]
Call remove_all_in
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name remove_all_in in context <class '_ast.Load'>
Get remove_all_in in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Name lists in context <class '_ast.Store'>
Set lists in <Scope: function C3_merge> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Name out in context <class '_ast.Load'>
Get out in <Scope: function C3_merge>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.out>
Assign ['mro'] [<_ast.Dict object at 0x7ffa5c5a6ef0>]
Name mro in context <class '_ast.Store'>
Set mro in <Scope: function resolve_method_resolution_order>: value None is not a Node
Assign ['memo'] [<_ast.Dict object at 0x7ffa5c5a6fd0>]
Name memo in context <class '_ast.Store'>
Set memo in <Scope: function resolve_method_resolution_order>: value None is not a Node
FunctionDef C3_linearize
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Function <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Set C3_linearize in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call seen.add
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute add of seen in context <class '_ast.Load'>
Resolve seen.add in context <class '_ast.Load'>
Get seen in <Scope: function C3_linearize>: no Node value (or name not in scope)
Resolved to attr add of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.add> (target obj seen not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.add> (target obj seen not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Call len
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.len>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.len>
Assign [<_ast.Subscript object at 0x7ffa5c5a9748>] ['node']
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Assign ['lists'] []
Name lists in context <class '_ast.Store'>
Set lists in <Scope: function C3_linearize>: value None is not a Node
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function C3_linearize> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name seen in context <class '_ast.Load'>
Get seen in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.seen>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.seen>
Call lists.append
Call C3_linearize
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name C3_linearize in context <class '_ast.Load'>
Get C3_linearize in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Attribute append of lists in context <class '_ast.Load'>
Resolve lists.append in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.append> (target obj lists not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.append> (target obj lists not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call lists.append
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute append of lists in context <class '_ast.Load'>
Resolve lists.append in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.append> (target obj lists not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call logger.debug
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.lists>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.lists>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c5ad358>] [<_ast.BinOp object at 0x7ffa5c5ad438>]
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Call C3_merge
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.lists>
Name C3_merge in context <class '_ast.Load'>
Get C3_merge in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Store'>
Set node in <Scope: function resolve_method_resolution_order> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['seen'] [<_ast.Call object at 0x7ffa5c5adbe0>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.set>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.set>
Name seen in context <class '_ast.Store'>
Set seen in <Scope: function resolve_method_resolution_order> to <Node ???:*.set>
Assign [<_ast.Subscript object at 0x7ffa5c5adc88>] [<_ast.Call object at 0x7ffa5c5add68>]
Call C3_linearize
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name C3_linearize in context <class '_ast.Load'>
Get C3_linearize in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Name mro in context <class '_ast.Load'>
Get mro in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name LinearizationImpossible in context <class '_ast.Load'>
Get LinearizationImpossible in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Call logger.error
Name e in context <class '_ast.Load'>
Get e in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.e>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.e>
Attribute error of logger in context <class '_ast.Load'>
Resolve logger.error in context <class '_ast.Load'>
Get logger in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr error of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.error> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr error not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.error> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr error not resolved; maybe fwd ref or unanalyzed import)
Assign ['memo'] [<_ast.Dict object at 0x7ffa5c5b0048>]
Name memo in context <class '_ast.Store'>
Set memo in <Scope: function resolve_method_resolution_order>: value None is not a Node
FunctionDef lookup_bases_recursive
Def from <Node function:pyan.anutils.resolve_method_resolution_order> to Function <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Set lookup_bases_recursive in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Call seen.add
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Attribute add of seen in context <class '_ast.Load'>
Resolve seen.add in context <class '_ast.Load'>
Get seen in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ???:*.set>
Resolved to attr add of <Node ???:*.set>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node ???:*.add> (target obj seen not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node ???:*.add> (target obj seen not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function lookup_bases_recursive>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
Assign ['out'] ['node']
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name out in context <class '_ast.Store'>
Set out in <Scope: function lookup_bases_recursive> to <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function lookup_bases_recursive> to <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name seen in context <class '_ast.Load'>
Get seen in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ???:*.set>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.set>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.set>
Call out.append
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Attribute append of out in context <class '_ast.Load'>
Resolve out.append in context <class '_ast.Load'>
Get out in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Resolved to attr append of <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call out.extend
Call lookup_bases_recursive
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name lookup_bases_recursive in context <class '_ast.Load'>
Get lookup_bases_recursive in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Attribute extend of out in context <class '_ast.Load'>
Resolve out.extend in context <class '_ast.Load'>
Get out in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Resolved to attr extend of <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.extend> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> known but target attr extend not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.extend> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> known but target attr extend not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c5b09e8>] ['out']
Name out in context <class '_ast.Load'>
Get out in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function lookup_bases_recursive>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function lookup_bases_recursive>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Assign ['mro'] [<_ast.Dict object at 0x7ffa5c5b0c88>]
Name mro in context <class '_ast.Store'>
Set mro in <Scope: function resolve_method_resolution_order>: value None is not a Node
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Store'>
Set node in <Scope: function resolve_method_resolution_order> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['seen'] [<_ast.Call object at 0x7ffa5c5b0f60>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.set>
Name seen in context <class '_ast.Store'>
Set seen in <Scope: function resolve_method_resolution_order> to <Node ???:*.set>
Assign [<_ast.Subscript object at 0x7ffa5c5b4048>] [<_ast.Call object at 0x7ffa5c5b4128>]
Call lookup_bases_recursive
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name lookup_bases_recursive in context <class '_ast.Load'>
Get lookup_bases_recursive in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Name mro in context <class '_ast.Load'>
Get mro in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name mro in context <class '_ast.Load'>
Get mro in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
ClassDef UnresolvedSuperCallError
Def from <Node module:pyan.anutils> to Class <Node class:pyan.anutils.UnresolvedSuperCallError>
Set UnresolvedSuperCallError in <Scope: module > to <Node class:pyan.anutils.UnresolvedSuperCallError>
Name Exception in context <class '_ast.Load'>
Get Exception in <Scope: class UnresolvedSuperCallError>: no Node value (or name not in scope)
Use from <Node class:pyan.anutils.UnresolvedSuperCallError> to Name <Node ???:*.Exception>
New edge added for Use from <Node class:pyan.anutils.UnresolvedSuperCallError> to Name <Node ???:*.Exception>
ClassDef Scope
Def from <Node module:pyan.anutils> to Class <Node class:pyan.anutils.Scope>
Set Scope in <Scope: module > to <Node class:pyan.anutils.Scope>
FunctionDef __init__
Def from <Node class:pyan.anutils.Scope> to Function <Node method:pyan.anutils.Scope.__init__>
Set __init__ in <Scope: class Scope> to <Node method:pyan.anutils.Scope.__init__>
Method def: setting self name "self" to <Node class:pyan.anutils.Scope>
Assign ['name'] [<_ast.Call object at 0x7ffa5c5b45c0>]
Call table.get_name
Attribute get_name of table in context <class '_ast.Load'>
Resolve table.get_name in context <class '_ast.Load'>
Get table in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Resolved to attr get_name of <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function __init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Name name in context <class '_ast.Load'>
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node method:pyan.anutils.Scope.__init__> to Name <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Assign ['name'] [<_ast.Str object at 0x7ffa5c5b47b8>]
Name name in context <class '_ast.Store'>
Set name in <Scope: function __init__>: value None is not a Node
Assign ['self.name'] ['name']
Name name in context <class '_ast.Load'>
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node method:pyan.anutils.Scope.__init__> to Name <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Attribute name of self in context <class '_ast.Store'>
Resolve self.name in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.Scope>
Resolved to attr name of <Node class:pyan.anutils.Scope>
setattr name on self to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Assign ['self.type'] [<_ast.Call object at 0x7ffa5c5b4978>]
Call table.get_type
Attribute get_type of table in context <class '_ast.Load'>
Resolve table.get_type in context <class '_ast.Load'>
Get table in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Resolved to attr get_type of <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_type not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_type not resolved; maybe fwd ref or unanalyzed import)
Attribute type of self in context <class '_ast.Store'>
Resolve self.type in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.Scope>
Resolved to attr type of <Node class:pyan.anutils.Scope>
setattr type on self to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
Assign ['self.defs'] [<_ast.DictComp object at 0x7ffa5c5b4ac8>]
DictComp
Name iden in context <class '_ast.Load'>
Get iden in <Scope: function dictcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to Name <Node ???:*.iden>
New edge added for Use from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to Name <Node ???:*.iden>
Call table.get_identifiers
Attribute get_identifiers of table in context <class '_ast.Load'>
Resolve table.get_identifiers in context <class '_ast.Load'>
Get table in <Scope: function dictcomp>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Resolved to attr get_identifiers of <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Use from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_identifiers not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_identifiers not resolved; maybe fwd ref or unanalyzed import)
Name iden in context <class '_ast.Store'>
Set iden in <Scope: function dictcomp> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers>
Def from <Node method:pyan.anutils.Scope.__init__> to dictcomp <Node namespace:pyan.anutils.Scope.__init__.dictcomp>
Attribute defs of self in context <class '_ast.Store'>
Resolve self.defs in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.Scope>
Resolved to attr defs of <Node class:pyan.anutils.Scope>
setattr defs on self to <Node namespace:pyan.anutils.Scope.__init__.dictcomp>
FunctionDef __repr__
Def from <Node class:pyan.anutils.Scope> to Function <Node method:pyan.anutils.Scope.__repr__>
Set __repr__ in <Scope: class Scope> to <Node method:pyan.anutils.Scope.__repr__>
Method def: setting self name "self" to <Node class:pyan.anutils.Scope>
Attribute type of self in context <class '_ast.Load'>
Resolve self.type in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.anutils.Scope>
Resolved to attr type of <Node class:pyan.anutils.Scope>
getattr type on self returns <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
Use from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
New edge added for Use from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.anutils.Scope>
Resolved to attr name of <Node class:pyan.anutils.Scope>
getattr name on self returns <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
New edge added for Use from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
ClassDef ExecuteInInnerScope
Def from <Node module:pyan.anutils> to Class <Node class:pyan.anutils.ExecuteInInnerScope>
Set ExecuteInInnerScope in <Scope: module > to <Node class:pyan.anutils.ExecuteInInnerScope>
FunctionDef __init__
Def from <Node class:pyan.anutils.ExecuteInInnerScope> to Function <Node method:pyan.anutils.ExecuteInInnerScope.__init__>
Set __init__ in <Scope: class ExecuteInInnerScope> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__>
Method def: setting self name "self" to <Node class:pyan.anutils.ExecuteInInnerScope>
Assign ['self.analyzer'] ['analyzer']
Name analyzer in context <class '_ast.Load'>
Get analyzer in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__init__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__init__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute analyzer of self in context <class '_ast.Store'>
Resolve self.analyzer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr analyzer of <Node class:pyan.anutils.ExecuteInInnerScope>
setattr analyzer on self to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Assign ['self.scopename'] ['scopename']
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__init__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute scopename of self in context <class '_ast.Store'>
Resolve self.scopename in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr scopename of <Node class:pyan.anutils.ExecuteInInnerScope>
setattr scopename on self to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
FunctionDef __enter__
Def from <Node class:pyan.anutils.ExecuteInInnerScope> to Function <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
Set __enter__ in <Scope: class ExecuteInInnerScope> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
Method def: setting self name "self" to <Node class:pyan.anutils.ExecuteInInnerScope>
Assign ['analyzer'] ['self.analyzer']
Attribute analyzer of self in context <class '_ast.Load'>
Resolve self.analyzer in context <class '_ast.Load'>
Get self in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr analyzer of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr analyzer on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name analyzer in context <class '_ast.Store'>
Set analyzer in <Scope: function __enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Assign ['scopename'] ['self.scopename']
Attribute scopename of self in context <class '_ast.Load'>
Resolve self.scopename in context <class '_ast.Load'>
Get self in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr scopename of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr scopename on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name scopename in context <class '_ast.Store'>
Set scopename in <Scope: function __enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Call analyzer.name_stack.append
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute append of analyzer.name_stack in context <class '_ast.Load'>
Resolve analyzer.name_stack.append in context <class '_ast.Load'>
Resolve analyzer.name_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr name_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['inner_ns'] [<_ast.Call object at 0x7ffa5c5b9748>]
Call <_ast.Call object at 0x7ffa5c5b97b8>.get_name
Attribute get_name of <_ast.Call object at 0x7ffa5c5b97b8> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c5b97b8>.get_name in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_name of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c5b97b8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c5b97b8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Store'>
Set inner_ns in <Scope: function __enter__> to <Node ???:*.get_name>
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ???:*.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.get_name>
Attribute scopes of analyzer in context <class '_ast.Load'>
Resolve analyzer.scopes in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scopes of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Call analyzer.name_stack.pop
Attribute pop of analyzer.name_stack in context <class '_ast.Load'>
Resolve analyzer.name_stack.pop in context <class '_ast.Load'>
Resolve analyzer.name_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr name_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.pop> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.pop> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call ValueError
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ???:*.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.get_name>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function __enter__>: no Node value (or name not in scope)
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.ValueError>
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.ValueError>
Call analyzer.scope_stack.append
Attribute scopes of analyzer in context <class '_ast.Load'>
Resolve analyzer.scopes in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scopes of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ???:*.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.get_name>
Attribute append of analyzer.scope_stack in context <class '_ast.Load'>
Resolve analyzer.scope_stack.append in context <class '_ast.Load'>
Resolve analyzer.scope_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scope_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call analyzer.context_stack.append
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute append of analyzer.context_stack in context <class '_ast.Load'>
Resolve analyzer.context_stack.append in context <class '_ast.Load'>
Resolve analyzer.context_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr context_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name self in context <class '_ast.Load'>
Get self in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
FunctionDef __exit__
Def from <Node class:pyan.anutils.ExecuteInInnerScope> to Function <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Set __exit__ in <Scope: class ExecuteInInnerScope> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Method def: setting self name "self" to <Node class:pyan.anutils.ExecuteInInnerScope>
Assign ['analyzer'] ['self.analyzer']
Attribute analyzer of self in context <class '_ast.Load'>
Resolve self.analyzer in context <class '_ast.Load'>
Get self in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr analyzer of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr analyzer on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name analyzer in context <class '_ast.Store'>
Set analyzer in <Scope: function __exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Assign ['scopename'] ['self.scopename']
Attribute scopename of self in context <class '_ast.Load'>
Resolve self.scopename in context <class '_ast.Load'>
Get self in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr scopename of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr scopename on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name scopename in context <class '_ast.Store'>
Set scopename in <Scope: function __exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Call analyzer.context_stack.pop
Attribute pop of analyzer.context_stack in context <class '_ast.Load'>
Resolve analyzer.context_stack.pop in context <class '_ast.Load'>
Resolve analyzer.context_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr context_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call analyzer.scope_stack.pop
Attribute pop of analyzer.scope_stack in context <class '_ast.Load'>
Resolve analyzer.scope_stack.pop in context <class '_ast.Load'>
Resolve analyzer.scope_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scope_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call analyzer.name_stack.pop
Attribute pop of analyzer.name_stack in context <class '_ast.Load'>
Resolve analyzer.name_stack.pop in context <class '_ast.Load'>
Resolve analyzer.name_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr name_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c5bc6d8>]
Call analyzer.get_node_of_current_namespace
Attribute get_node_of_current_namespace of analyzer in context <class '_ast.Load'>
Resolve analyzer.get_node_of_current_namespace in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr get_node_of_current_namespace of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function __exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c5bc7f0>]
Call from_node.get_name
Attribute get_name of from_node in context <class '_ast.Load'>
Resolve from_node.get_name in context <class '_ast.Load'>
Get from_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Resolved to attr get_name of <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function __exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c5bc908>]
Call analyzer.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute NAMESPACE of Flavor in context <class '_ast.Load'>
Resolve Flavor.NAMESPACE in context <class '_ast.Load'>
Get Flavor in <Scope: function __exit__>, found in <Scope: module >, value <Node import:pyan.node.Flavor>
Resolved to attr NAMESPACE of <Node import:pyan.node.Flavor>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.node.Flavor.NAMESPACE> (target obj <Node import:pyan.node.Flavor> known but target attr NAMESPACE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.node.Flavor.NAMESPACE> (target obj <Node import:pyan.node.Flavor> known but target attr NAMESPACE not resolved; maybe fwd ref or unanalyzed import)
Attribute get_node of analyzer in context <class '_ast.Load'>
Resolve analyzer.get_node in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr get_node of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function __exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Call analyzer.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Attribute add_defines_edge of analyzer in context <class '_ast.Load'>
Resolve analyzer.add_defines_edge in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr add_defines_edge of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.add_defines_edge> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.add_defines_edge> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
Call analyzer.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Attribute info of analyzer.logger in context <class '_ast.Load'>
Resolve analyzer.logger.info in context <class '_ast.Load'>
Resolve analyzer.logger in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr logger of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr info of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.info> (target obj analyzer.logger not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.info> (target obj analyzer.logger not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['analyzer.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Attribute last_value of analyzer in context <class '_ast.Store'>
Resolve analyzer.last_value in context <class '_ast.Store'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr last_value of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
========== pass 1, file 'pyan/__init__.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >}
Module
ImportFrom: from main import ['main']
Use from <Node module:pyan> to ImportFrom <Node module:main>
New edge added for Use from <Node module:pyan> to ImportFrom <Node module:main>
Set main in <Scope: module > to <Node import:pyan.main.main>
From setting name main to <Node import:pyan.main.main>
Assign ['__version__'] [<_ast.Str object at 0x7ffa5c5c83c8>]
Name __version__ in context <class '_ast.Store'>
Set __version__ in <Scope: module >: value None is not a Node
========== pass 1, file 'pyan/main.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>}
Module
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.main> to Import <Node module:logging>
New edge added for Use from <Node module:pyan.main> to Import <Node module:logging>
ImportFrom: from glob import ['glob']
Use from <Node module:pyan.main> to ImportFrom <Node module:glob>
New edge added for Use from <Node module:pyan.main> to ImportFrom <Node module:glob>
Set glob in <Scope: module > to <Node import:glob.glob>
From setting name glob to <Node import:glob.glob>
ImportFrom: from optparse import ['OptionParser']
Use from <Node module:pyan.main> to ImportFrom <Node module:optparse>
New edge added for Use from <Node module:pyan.main> to ImportFrom <Node module:optparse>
Set OptionParser in <Scope: module > to <Node import:optparse.OptionParser>
From setting name OptionParser to <Node import:optparse.OptionParser>
ImportFrom: from analyzer import ['CallGraphVisitor']
Use from <Node module:pyan.main> to ImportFrom <Node module:analyzer>
New edge added for Use from <Node module:pyan.main> to ImportFrom <Node module:analyzer>
Set CallGraphVisitor in <Scope: module > to <Node class:pyan.analyzer.CallGraphVisitor>
From setting name CallGraphVisitor to <Node class:pyan.analyzer.CallGraphVisitor>
ImportFrom: from visgraph import ['VisualGraph']
Use from <Node module:pyan.main> to ImportFrom <Node module:visgraph>
New edge added for Use from <Node module:pyan.main> to ImportFrom <Node module:visgraph>
Set VisualGraph in <Scope: module > to <Node import:pyan.visgraph.VisualGraph>
From setting name VisualGraph to <Node import:pyan.visgraph.VisualGraph>
ImportFrom: from writers import ['TgfWriter', 'DotWriter', 'YedWriter']
Use from <Node module:pyan.main> to ImportFrom <Node module:writers>
New edge added for Use from <Node module:pyan.main> to ImportFrom <Node module:writers>
Set TgfWriter in <Scope: module > to <Node import:pyan.writers.TgfWriter>
From setting name TgfWriter to <Node import:pyan.writers.TgfWriter>
Set DotWriter in <Scope: module > to <Node import:pyan.writers.DotWriter>
From setting name DotWriter to <Node import:pyan.writers.DotWriter>
Set YedWriter in <Scope: module > to <Node import:pyan.writers.YedWriter>
From setting name YedWriter to <Node import:pyan.writers.YedWriter>
FunctionDef main
Def from <Node module:pyan.main> to Function <Node function:pyan.main.main>
Set main in <Scope: module > to <Node function:pyan.main.main>
Assign ['usage'] [<_ast.Str object at 0x7ffa5c5cc0b8>]
Name usage in context <class '_ast.Store'>
Set usage in <Scope: function main>: value None is not a Node
Assign ['desc'] [<_ast.Str object at 0x7ffa5c5cc160>]
Name desc in context <class '_ast.Store'>
Set desc in <Scope: function main>: value None is not a Node
Assign ['parser'] [<_ast.Call object at 0x7ffa5c5cc208>]
Call OptionParser
Name usage in context <class '_ast.Load'>
Get usage in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.usage>
New edge added for Use from <Node function:pyan.main.main> to Name <Node ???:*.usage>
Name desc in context <class '_ast.Load'>
Get desc in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.desc>
New edge added for Use from <Node function:pyan.main.main> to Name <Node ???:*.desc>
Name OptionParser in context <class '_ast.Load'>
Get OptionParser in <Scope: function main>, found in <Scope: module >, value <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to Name <Node import:optparse.OptionParser>
New edge added for Use from <Node function:pyan.main.main> to Name <Node import:optparse.OptionParser>
Name parser in context <class '_ast.Store'>
Set parser in <Scope: function main> to <Node import:optparse.OptionParser>
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Assign ['options', 'args'] [<_ast.Call object at 0x7ffa5c5d55f8>]
Call parser.parse_args
Attribute parse_args of parser in context <class '_ast.Load'>
Resolve parser.parse_args in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr parse_args of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args> (target obj <Node import:optparse.OptionParser> known but target attr parse_args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args> (target obj <Node import:optparse.OptionParser> known but target attr parse_args not resolved; maybe fwd ref or unanalyzed import)
Name options in context <class '_ast.Store'>
Set options in <Scope: function main> to <Node attribute:optparse.OptionParser.parse_args>
Name args in context <class '_ast.Store'>
Set args in <Scope: function main> to <Node attribute:optparse.OptionParser.parse_args>
Assign ['filenames'] [<_ast.ListComp object at 0x7ffa5c5d5710>]
ListComp
Name fn2 in context <class '_ast.Load'>
Get fn2 in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node ???:*.fn2>
New edge added for Use from <Node namespace:pyan.main.main.listcomp> to Name <Node ???:*.fn2>
Name args in context <class '_ast.Load'>
Get args in <Scope: function listcomp>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node attribute:optparse.OptionParser.parse_args>
New edge added for Use from <Node namespace:pyan.main.main.listcomp> to Name <Node attribute:optparse.OptionParser.parse_args>
Name fn in context <class '_ast.Store'>
Set fn in <Scope: function listcomp> to <Node attribute:optparse.OptionParser.parse_args>
Call glob
Name fn in context <class '_ast.Load'>
Get fn in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:optparse.OptionParser.parse_args>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node attribute:optparse.OptionParser.parse_args>
Name glob in context <class '_ast.Load'>
Get glob in <Scope: function listcomp>, found in <Scope: module >, value <Node import:glob.glob>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node import:glob.glob>
New edge added for Use from <Node namespace:pyan.main.main.listcomp> to Name <Node import:glob.glob>
Name fn2 in context <class '_ast.Store'>
Set fn2 in <Scope: function listcomp> to <Node import:glob.glob>
Def from <Node function:pyan.main.main> to listcomp <Node namespace:pyan.main.main.listcomp>
Name filenames in context <class '_ast.Store'>
Set filenames in <Scope: function main> to <Node namespace:pyan.main.main.listcomp>
Call len
Name args in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to Name <Node attribute:optparse.OptionParser.parse_args>
Name len in context <class '_ast.Load'>
Get len in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.len>
New edge added for Use from <Node function:pyan.main.main> to Name <Node ???:*.len>
Call parser.error
Attribute error of parser in context <class '_ast.Load'>
Resolve parser.error in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr error of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.error> (target obj <Node import:optparse.OptionParser> known but target attr error not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.error> (target obj <Node import:optparse.OptionParser> known but target attr error not resolved; maybe fwd ref or unanalyzed import)
Attribute nested_groups of options in context <class '_ast.Load'>
Resolve options.nested_groups in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr nested_groups of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.nested_groups> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr nested_groups not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.nested_groups> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr nested_groups not resolved; maybe fwd ref or unanalyzed import)
Assign ['options.grouped'] [<_ast.NameConstant object at 0x7ffa5c5d5cf8>]
Attribute grouped of options in context <class '_ast.Store'>
Assign ['graph_options'] [<_ast.Dict object at 0x7ffa5c5d5da0>]
Attribute draw_defines of options in context <class '_ast.Load'>
Resolve options.draw_defines in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr draw_defines of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_defines> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr draw_defines not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_defines> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr draw_defines not resolved; maybe fwd ref or unanalyzed import)
Attribute draw_uses of options in context <class '_ast.Load'>
Resolve options.draw_uses in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr draw_uses of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_uses> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr draw_uses not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_uses> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr draw_uses not resolved; maybe fwd ref or unanalyzed import)
Attribute colored of options in context <class '_ast.Load'>
Resolve options.colored in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr colored of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.colored> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr colored not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.colored> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr colored not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped_alt of options in context <class '_ast.Load'>
Resolve options.grouped_alt in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr grouped_alt of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped_alt> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr grouped_alt not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped_alt> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr grouped_alt not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped of options in context <class '_ast.Load'>
Resolve options.grouped in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr grouped of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
Attribute nested_groups of options in context <class '_ast.Load'>
Resolve options.nested_groups in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr nested_groups of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.nested_groups> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr nested_groups not resolved; maybe fwd ref or unanalyzed import)
Attribute annotated of options in context <class '_ast.Load'>
Resolve options.annotated in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr annotated of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.annotated> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr annotated not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.annotated> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr annotated not resolved; maybe fwd ref or unanalyzed import)
Name graph_options in context <class '_ast.Store'>
Set graph_options in <Scope: function main> to <Node attribute:optparse.OptionParser.parse_args.annotated>
Assign ['logger'] [<_ast.Call object at 0x7ffa5c5d9390>]
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.__name__>
New edge added for Use from <Node function:pyan.main.main> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Store'>
Set logger in <Scope: function main> to <Node attribute:logging.getLogger>
Attribute very_verbose of options in context <class '_ast.Load'>
Resolve options.very_verbose in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr very_verbose of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.very_verbose> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr very_verbose not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.very_verbose> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr very_verbose not resolved; maybe fwd ref or unanalyzed import)
Call logger.setLevel
Attribute DEBUG of logging in context <class '_ast.Load'>
Resolve logging.DEBUG in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr DEBUG of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.DEBUG> (target obj <Node module:logging> known but target attr DEBUG not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.DEBUG> (target obj <Node module:logging> known but target attr DEBUG not resolved; maybe fwd ref or unanalyzed import)
Attribute setLevel of logger in context <class '_ast.Load'>
Resolve logger.setLevel in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr setLevel of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
Attribute verbose of options in context <class '_ast.Load'>
Resolve options.verbose in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr verbose of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.verbose> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr verbose not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.verbose> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr verbose not resolved; maybe fwd ref or unanalyzed import)
Call logger.setLevel
Attribute INFO of logging in context <class '_ast.Load'>
Resolve logging.INFO in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr INFO of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.INFO> (target obj <Node module:logging> known but target attr INFO not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.INFO> (target obj <Node module:logging> known but target attr INFO not resolved; maybe fwd ref or unanalyzed import)
Attribute setLevel of logger in context <class '_ast.Load'>
Resolve logger.setLevel in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr setLevel of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
Call logger.setLevel
Attribute WARN of logging in context <class '_ast.Load'>
Resolve logging.WARN in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr WARN of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.WARN> (target obj <Node module:logging> known but target attr WARN not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.WARN> (target obj <Node module:logging> known but target attr WARN not resolved; maybe fwd ref or unanalyzed import)
Attribute setLevel of logger in context <class '_ast.Load'>
Resolve logger.setLevel in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr setLevel of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
Call logger.addHandler
Call logging.StreamHandler
Attribute StreamHandler of logging in context <class '_ast.Load'>
Resolve logging.StreamHandler in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr StreamHandler of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.StreamHandler> (target obj <Node module:logging> known but target attr StreamHandler not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.StreamHandler> (target obj <Node module:logging> known but target attr StreamHandler not resolved; maybe fwd ref or unanalyzed import)
Attribute addHandler of logger in context <class '_ast.Load'>
Resolve logger.addHandler in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr addHandler of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.addHandler> (target obj <Node attribute:logging.getLogger> known but target attr addHandler not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.addHandler> (target obj <Node attribute:logging.getLogger> known but target attr addHandler not resolved; maybe fwd ref or unanalyzed import)
Attribute logname of options in context <class '_ast.Load'>
Resolve options.logname in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr logname of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.logname> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr logname not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.logname> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr logname not resolved; maybe fwd ref or unanalyzed import)
Assign ['handler'] [<_ast.Call object at 0x7ffa5c5d9c50>]
Call logging.FileHandler
Attribute logname of options in context <class '_ast.Load'>
Resolve options.logname in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr logname of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.logname> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr logname not resolved; maybe fwd ref or unanalyzed import)
Attribute FileHandler of logging in context <class '_ast.Load'>
Resolve logging.FileHandler in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr FileHandler of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.FileHandler> (target obj <Node module:logging> known but target attr FileHandler not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:logging.FileHandler> (target obj <Node module:logging> known but target attr FileHandler not resolved; maybe fwd ref or unanalyzed import)
Name handler in context <class '_ast.Store'>
Set handler in <Scope: function main> to <Node attribute:logging.FileHandler>
Call logger.addHandler
Name handler in context <class '_ast.Load'>
Get handler in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.FileHandler>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.FileHandler>
Attribute addHandler of logger in context <class '_ast.Load'>
Resolve logger.addHandler in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr addHandler of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.addHandler> (target obj <Node attribute:logging.getLogger> known but target attr addHandler not resolved; maybe fwd ref or unanalyzed import)
Assign ['v'] [<_ast.Call object at 0x7ffa5c5d9ef0>]
Call CallGraphVisitor
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function main>, found in <Scope: function main>, value <Node namespace:pyan.main.main.listcomp>
Use from <Node function:pyan.main.main> to Name <Node namespace:pyan.main.main.listcomp>
New edge added for Use from <Node function:pyan.main.main> to Name <Node namespace:pyan.main.main.listcomp>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name CallGraphVisitor in context <class '_ast.Load'>
Get CallGraphVisitor in <Scope: function main>, found in <Scope: module >, value <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.analyzer.CallGraphVisitor>
New edge added for Use from <Node function:pyan.main.main> to Name <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.main.main> to <Node method:pyan.analyzer.CallGraphVisitor.__init__> (call creates an instance)
New edge added for Use from <Node function:pyan.main.main> to <Node method:pyan.analyzer.CallGraphVisitor.__init__> (call creates an instance)
Name v in context <class '_ast.Store'>
Set v in <Scope: function main> to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['graph'] [<_ast.Call object at 0x7ffa5c5dd080>]
Call VisualGraph.from_visitor
Name v in context <class '_ast.Load'>
Get v in <Scope: function main>, found in <Scope: function main>, value <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.analyzer.CallGraphVisitor>
Name graph_options in context <class '_ast.Load'>
Get graph_options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args.annotated>
Use from <Node function:pyan.main.main> to Name <Node attribute:optparse.OptionParser.parse_args.annotated>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Attribute from_visitor of VisualGraph in context <class '_ast.Load'>
Resolve VisualGraph.from_visitor in context <class '_ast.Load'>
Get VisualGraph in <Scope: function main>, found in <Scope: module >, value <Node import:pyan.visgraph.VisualGraph>
Resolved to attr from_visitor of <Node import:pyan.visgraph.VisualGraph>
Use from <Node function:pyan.main.main> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor> (target obj <Node import:pyan.visgraph.VisualGraph> known but target attr from_visitor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor> (target obj <Node import:pyan.visgraph.VisualGraph> known but target attr from_visitor not resolved; maybe fwd ref or unanalyzed import)
Name graph in context <class '_ast.Store'>
Set graph in <Scope: function main> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Attribute dot of options in context <class '_ast.Load'>
Resolve options.dot in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr dot of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.dot> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr dot not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.dot> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr dot not resolved; maybe fwd ref or unanalyzed import)
Assign ['writer'] [<_ast.Call object at 0x7ffa5c5dd358>]
Call DotWriter
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function main>, found in <Scope: function main>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Attribute rankdir of options in context <class '_ast.Load'>
Resolve options.rankdir in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr rankdir of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.rankdir> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr rankdir not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.rankdir> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr rankdir not resolved; maybe fwd ref or unanalyzed import)
Attribute filename of options in context <class '_ast.Load'>
Resolve options.filename in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr filename of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name DotWriter in context <class '_ast.Load'>
Get DotWriter in <Scope: function main>, found in <Scope: module >, value <Node import:pyan.writers.DotWriter>
Use from <Node function:pyan.main.main> to Name <Node import:pyan.writers.DotWriter>
New edge added for Use from <Node function:pyan.main.main> to Name <Node import:pyan.writers.DotWriter>
Name writer in context <class '_ast.Store'>
Set writer in <Scope: function main> to <Node import:pyan.writers.DotWriter>
Call writer.run
Attribute run of writer in context <class '_ast.Load'>
Resolve writer.run in context <class '_ast.Load'>
Get writer in <Scope: function main>, found in <Scope: function main>, value <Node import:pyan.writers.DotWriter>
Resolved to attr run of <Node import:pyan.writers.DotWriter>
Use from <Node function:pyan.main.main> to <Node attribute:pyan.writers.DotWriter.run> (target obj <Node import:pyan.writers.DotWriter> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:pyan.writers.DotWriter.run> (target obj <Node import:pyan.writers.DotWriter> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Attribute tgf of options in context <class '_ast.Load'>
Resolve options.tgf in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr tgf of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.tgf> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr tgf not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.tgf> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr tgf not resolved; maybe fwd ref or unanalyzed import)
Assign ['writer'] [<_ast.Call object at 0x7ffa5c5dd860>]
Call TgfWriter
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function main>, found in <Scope: function main>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Attribute filename of options in context <class '_ast.Load'>
Resolve options.filename in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr filename of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name TgfWriter in context <class '_ast.Load'>
Get TgfWriter in <Scope: function main>, found in <Scope: module >, value <Node import:pyan.writers.TgfWriter>
Use from <Node function:pyan.main.main> to Name <Node import:pyan.writers.TgfWriter>
New edge added for Use from <Node function:pyan.main.main> to Name <Node import:pyan.writers.TgfWriter>
Name writer in context <class '_ast.Store'>
Set writer in <Scope: function main> to <Node import:pyan.writers.TgfWriter>
Call writer.run
Attribute run of writer in context <class '_ast.Load'>
Resolve writer.run in context <class '_ast.Load'>
Get writer in <Scope: function main>, found in <Scope: function main>, value <Node import:pyan.writers.TgfWriter>
Resolved to attr run of <Node import:pyan.writers.TgfWriter>
Use from <Node function:pyan.main.main> to <Node attribute:pyan.writers.TgfWriter.run> (target obj <Node import:pyan.writers.TgfWriter> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:pyan.writers.TgfWriter.run> (target obj <Node import:pyan.writers.TgfWriter> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Attribute yed of options in context <class '_ast.Load'>
Resolve options.yed in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr yed of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.yed> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr yed not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.yed> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr yed not resolved; maybe fwd ref or unanalyzed import)
Assign ['writer'] [<_ast.Call object at 0x7ffa5c5ddc18>]
Call YedWriter
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function main>, found in <Scope: function main>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor>
Attribute filename of options in context <class '_ast.Load'>
Resolve options.filename in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr filename of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name YedWriter in context <class '_ast.Load'>
Get YedWriter in <Scope: function main>, found in <Scope: module >, value <Node import:pyan.writers.YedWriter>
Use from <Node function:pyan.main.main> to Name <Node import:pyan.writers.YedWriter>
New edge added for Use from <Node function:pyan.main.main> to Name <Node import:pyan.writers.YedWriter>
Name writer in context <class '_ast.Store'>
Set writer in <Scope: function main> to <Node import:pyan.writers.YedWriter>
Call writer.run
Attribute run of writer in context <class '_ast.Load'>
Resolve writer.run in context <class '_ast.Load'>
Get writer in <Scope: function main>, found in <Scope: function main>, value <Node import:pyan.writers.YedWriter>
Resolved to attr run of <Node import:pyan.writers.YedWriter>
Use from <Node function:pyan.main.main> to <Node attribute:pyan.writers.YedWriter.run> (target obj <Node import:pyan.writers.YedWriter> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.main.main> to <Node attribute:pyan.writers.YedWriter.run> (target obj <Node import:pyan.writers.YedWriter> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:pyan.main> to Name <Node ???:*.__name__>
New edge added for Use from <Node module:pyan.main> to Name <Node ???:*.__name__>
Call main
Name main in context <class '_ast.Load'>
Get main in <Scope: module >, found in <Scope: module >, value <Node function:pyan.main.main>
Use from <Node module:pyan.main> to Name <Node function:pyan.main.main>
New edge added for Use from <Node module:pyan.main> to Name <Node function:pyan.main.main>
========== pass 1, file 'pyan/node.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>}
Module
ImportFrom: from enum import ['Enum']
Use from <Node module:pyan.node> to ImportFrom <Node module:enum>
New edge added for Use from <Node module:pyan.node> to ImportFrom <Node module:enum>
Set Enum in <Scope: module > to <Node import:enum.Enum>
From setting name Enum to <Node import:enum.Enum>
FunctionDef make_safe_label
Def from <Node module:pyan.node> to Function <Node function:pyan.node.make_safe_label>
Set make_safe_label in <Scope: module > to <Node function:pyan.node.make_safe_label>
Assign ['unsafe_words'] [<_ast.Str object at 0x7ffa5c5854a8>, <_ast.Str object at 0x7ffa5c5854e0>, <_ast.Str object at 0x7ffa5c585518>, <_ast.Str object at 0x7ffa5c585550>]
Name unsafe_words in context <class '_ast.Store'>
Set unsafe_words in <Scope: function make_safe_label>: value None is not a Node
Assign ['out'] ['label']
Name label in context <class '_ast.Load'>
Get label in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Use from <Node function:pyan.node.make_safe_label> to Name <Node ---:pyan.node.make_safe_label.^^^argument^^^>
New edge added for Use from <Node function:pyan.node.make_safe_label> to Name <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Name out in context <class '_ast.Store'>
Set out in <Scope: function make_safe_label> to <Node ---:pyan.node.make_safe_label.^^^argument^^^>
For-loop
Name unsafe_words in context <class '_ast.Load'>
Get unsafe_words in <Scope: function make_safe_label>: no Node value (or name not in scope)
Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
New edge added for Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
Name word in context <class '_ast.Store'>
Set word in <Scope: function make_safe_label> to <Node ???:*.unsafe_words>
Assign ['out'] [<_ast.Call object at 0x7ffa5c585748>]
Call out.replace
Name word in context <class '_ast.Load'>
Get word in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ???:*.unsafe_words>
Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
Name word in context <class '_ast.Load'>
Get word in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ???:*.unsafe_words>
Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
Attribute replace of out in context <class '_ast.Load'>
Resolve out.replace in context <class '_ast.Load'>
Get out in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Resolved to attr replace of <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Use from <Node function:pyan.node.make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace> (target obj <Node ---:pyan.node.make_safe_label.^^^argument^^^> known but target attr replace not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:pyan.node.make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace> (target obj <Node ---:pyan.node.make_safe_label.^^^argument^^^> known but target attr replace not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace>
Call <_ast.Call object at 0x7ffa5c585978>.replace
Attribute replace of <_ast.Call object at 0x7ffa5c585978> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c585978>.replace in context <class '_ast.Load'>
Unresolved function call as obj, returning attr replace of unknown
Use from <Node function:pyan.node.make_safe_label> to <Node ???:*.replace> (target obj <_ast.Call object at 0x7ffa5c585978> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.node.make_safe_label> to <Node ???:*.replace> (target obj <_ast.Call object at 0x7ffa5c585978> not resolved; maybe fwd ref, function argument, or unanalyzed import)
ClassDef Flavor
Def from <Node module:pyan.node> to Class <Node class:pyan.node.Flavor>
Set Flavor in <Scope: module > to <Node class:pyan.node.Flavor>
Name Enum in context <class '_ast.Load'>
Get Enum in <Scope: class Flavor>, found in <Scope: module >, value <Node import:enum.Enum>
Use from <Node class:pyan.node.Flavor> to Name <Node import:enum.Enum>
New edge added for Use from <Node class:pyan.node.Flavor> to Name <Node import:enum.Enum>
Assign ['UNSPECIFIED'] [<_ast.Str object at 0x7ffa5c585c50>]
Name UNSPECIFIED in context <class '_ast.Store'>
Set UNSPECIFIED in <Scope: class Flavor>: value None is not a Node
Assign ['UNKNOWN'] [<_ast.Str object at 0x7ffa5c585cf8>]
Name UNKNOWN in context <class '_ast.Store'>
Set UNKNOWN in <Scope: class Flavor>: value None is not a Node
Assign ['NAMESPACE'] [<_ast.Str object at 0x7ffa5c585da0>]
Name NAMESPACE in context <class '_ast.Store'>
Set NAMESPACE in <Scope: class Flavor>: value None is not a Node
Assign ['ATTRIBUTE'] [<_ast.Str object at 0x7ffa5c585e48>]
Name ATTRIBUTE in context <class '_ast.Store'>
Set ATTRIBUTE in <Scope: class Flavor>: value None is not a Node
Assign ['IMPORTEDITEM'] [<_ast.Str object at 0x7ffa5c585ef0>]
Name IMPORTEDITEM in context <class '_ast.Store'>
Set IMPORTEDITEM in <Scope: class Flavor>: value None is not a Node
Assign ['MODULE'] [<_ast.Str object at 0x7ffa5c585f98>]
Name MODULE in context <class '_ast.Store'>
Set MODULE in <Scope: class Flavor>: value None is not a Node
Assign ['CLASS'] [<_ast.Str object at 0x7ffa5c590080>]
Name CLASS in context <class '_ast.Store'>
Set CLASS in <Scope: class Flavor>: value None is not a Node
Assign ['FUNCTION'] [<_ast.Str object at 0x7ffa5c590128>]
Name FUNCTION in context <class '_ast.Store'>
Set FUNCTION in <Scope: class Flavor>: value None is not a Node
Assign ['METHOD'] [<_ast.Str object at 0x7ffa5c5901d0>]
Name METHOD in context <class '_ast.Store'>
Set METHOD in <Scope: class Flavor>: value None is not a Node
Assign ['STATICMETHOD'] [<_ast.Str object at 0x7ffa5c590278>]
Name STATICMETHOD in context <class '_ast.Store'>
Set STATICMETHOD in <Scope: class Flavor>: value None is not a Node
Assign ['CLASSMETHOD'] [<_ast.Str object at 0x7ffa5c590320>]
Name CLASSMETHOD in context <class '_ast.Store'>
Set CLASSMETHOD in <Scope: class Flavor>: value None is not a Node
Assign ['NAME'] [<_ast.Str object at 0x7ffa5c5903c8>]
Name NAME in context <class '_ast.Store'>
Set NAME in <Scope: class Flavor>: value None is not a Node
FunctionDef specificity
Name staticmethod in context <class '_ast.Load'>
Get staticmethod in <Scope: class Flavor>: no Node value (or name not in scope)
Use from <Node class:pyan.node.Flavor> to Name <Node ???:*.staticmethod>
New edge added for Use from <Node class:pyan.node.Flavor> to Name <Node ???:*.staticmethod>
Def from <Node class:pyan.node.Flavor> to Function <Node staticmethod:pyan.node.Flavor.specificity>
Set specificity in <Scope: class Flavor> to <Node staticmethod:pyan.node.Flavor.specificity>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function specificity>, found in <Scope: function specificity>, value <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Attribute UNSPECIFIED of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNSPECIFIED in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNSPECIFIED of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNSPECIFIED> (target obj <Node class:pyan.node.Flavor> known but target attr UNSPECIFIED not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNSPECIFIED> (target obj <Node class:pyan.node.Flavor> known but target attr UNSPECIFIED not resolved; maybe fwd ref or unanalyzed import)
Attribute UNKNOWN of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNKNOWN in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNKNOWN of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNKNOWN> (target obj <Node class:pyan.node.Flavor> known but target attr UNKNOWN not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNKNOWN> (target obj <Node class:pyan.node.Flavor> known but target attr UNKNOWN not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function specificity>, found in <Scope: function specificity>, value <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Attribute NAMESPACE of Flavor in context <class '_ast.Load'>
Resolve Flavor.NAMESPACE in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr NAMESPACE of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.NAMESPACE> (target obj <Node class:pyan.node.Flavor> known but target attr NAMESPACE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.NAMESPACE> (target obj <Node class:pyan.node.Flavor> known but target attr NAMESPACE not resolved; maybe fwd ref or unanalyzed import)
Attribute ATTRIBUTE of Flavor in context <class '_ast.Load'>
Resolve Flavor.ATTRIBUTE in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr ATTRIBUTE of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> (target obj <Node class:pyan.node.Flavor> known but target attr ATTRIBUTE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> (target obj <Node class:pyan.node.Flavor> known but target attr ATTRIBUTE not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function specificity>, found in <Scope: function specificity>, value <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Attribute IMPORTEDITEM of Flavor in context <class '_ast.Load'>
Resolve Flavor.IMPORTEDITEM in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr IMPORTEDITEM of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> (target obj <Node class:pyan.node.Flavor> known but target attr IMPORTEDITEM not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> (target obj <Node class:pyan.node.Flavor> known but target attr IMPORTEDITEM not resolved; maybe fwd ref or unanalyzed import)
FunctionDef __repr__
Def from <Node class:pyan.node.Flavor> to Function <Node method:pyan.node.Flavor.__repr__>
Set __repr__ in <Scope: class Flavor> to <Node method:pyan.node.Flavor.__repr__>
Method def: setting self name "self" to <Node class:pyan.node.Flavor>
Attribute value of self in context <class '_ast.Load'>
Resolve self.value in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Flavor>
Resolved to attr value of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.node.Flavor.value> (target obj <Node class:pyan.node.Flavor> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.node.Flavor.value> (target obj <Node class:pyan.node.Flavor> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
ClassDef Node
Def from <Node module:pyan.node> to Class <Node class:pyan.node.Node>
Set Node in <Scope: module > to <Node class:pyan.node.Node>
FunctionDef __init__
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.__init__>
Set __init__ in <Scope: class Node> to <Node method:pyan.node.Node.__init__>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Assign ['self.namespace'] ['namespace']
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Store'>
Resolve self.namespace in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
setattr namespace on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.name'] ['name']
Name name in context <class '_ast.Load'>
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Store'>
Resolve self.name in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
setattr name on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.ast_node'] ['ast_node']
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute ast_node of self in context <class '_ast.Store'>
Resolve self.ast_node in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
setattr ast_node on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.filename'] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute filename of self in context <class '_ast.Store'>
Resolve self.filename in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr filename of <Node class:pyan.node.Node>
setattr filename on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Store'>
Resolve self.flavor in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
setattr flavor on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.defined'] [<_ast.Compare object at 0x7ffa5c563438>]
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute defined of self in context <class '_ast.Store'>
Resolve self.defined in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr defined of <Node class:pyan.node.Node>
setattr defined on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_short_name
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_short_name>
Set get_short_name in <Scope: class Node> to <Node method:pyan.node.Node.get_short_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_short_name>, found in <Scope: function get_short_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_short_name>, found in <Scope: function get_short_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_short_name>, found in <Scope: function get_short_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_annotated_name
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_annotated_name>
Set get_annotated_name in <Scope: class Node> to <Node method:pyan.node.Node.get_annotated_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call self.get_level
Attribute get_level of self in context <class '_ast.Load'>
Resolve self.get_level in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr get_level of <Node class:pyan.node.Node>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node attribute:pyan.node.Node.get_level> (target obj <Node class:pyan.node.Node> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Node.get_annotated_name> to <Node attribute:pyan.node.Node.get_level> (target obj <Node class:pyan.node.Node> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
Attribute ast_node of self in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
getattr ast_node on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr filename of <Node class:pyan.node.Node>
getattr filename on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute lineno of self.ast_node in context <class '_ast.Load'>
Resolve self.ast_node.lineno in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
Resolved to attr lineno of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr lineno not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Node.get_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr lineno not resolved; maybe fwd ref or unanalyzed import)
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_long_annotated_name
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_long_annotated_name>
Set get_long_annotated_name in <Scope: class Node> to <Node method:pyan.node.Node.get_long_annotated_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call self.get_level
Attribute get_level of self in context <class '_ast.Load'>
Resolve self.get_level in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr get_level of <Node class:pyan.node.Node>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node attribute:pyan.node.Node.get_level> (target obj <Node class:pyan.node.Node> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node attribute:pyan.node.Node.get_level> (target obj <Node class:pyan.node.Node> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
Attribute ast_node of self in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
getattr ast_node on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr filename of <Node class:pyan.node.Node>
getattr filename on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute lineno of self.ast_node in context <class '_ast.Load'>
Resolve self.ast_node.lineno in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
Resolved to attr lineno of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr lineno not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr lineno not resolved; maybe fwd ref or unanalyzed import)
Call repr
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
getattr flavor on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolving repr() of self.flavor
Resolve self.flavor.__repr__ in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
Resolved to attr __repr__ of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolve repr() of self.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function get_long_annotated_name>: no Node value (or name not in scope)
Use from <Node method:pyan.node.Node.get_long_annotated_name> to Name <Node ???:*.repr>
New edge added for Use from <Node method:pyan.node.Node.get_long_annotated_name> to Name <Node ???:*.repr>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call repr
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
getattr flavor on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolving repr() of self.flavor
Resolve self.flavor.__repr__ in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
Resolved to attr __repr__ of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolve repr() of self.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function get_long_annotated_name>: no Node value (or name not in scope)
Use from <Node method:pyan.node.Node.get_long_annotated_name> to Name <Node ???:*.repr>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_name
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_name>
Set get_name in <Scope: class Node> to <Node method:pyan.node.Node.get_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_level
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_level>
Set get_level in <Scope: class Node> to <Node method:pyan.node.Node.get_level>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_level>, found in <Scope: function get_level>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_level> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_level> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call self.namespace.count
Attribute count of self.namespace in context <class '_ast.Load'>
Resolve self.namespace.count in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_level>, found in <Scope: function get_level>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
Resolved to attr count of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_level> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.count> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr count not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Node.get_level> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.count> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr count not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_toplevel_namespace
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_toplevel_namespace>
Set get_toplevel_namespace in <Scope: class Node> to <Node method:pyan.node.Node.get_toplevel_namespace>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['idx'] [<_ast.Call object at 0x7ffa5c56be80>]
Call self.namespace.find
Attribute find of self.namespace in context <class '_ast.Load'>
Resolve self.namespace.find in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
Resolved to attr find of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr find not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr find not resolved; maybe fwd ref or unanalyzed import)
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function get_toplevel_namespace> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to Name <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to Name <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_label
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_label>
Set get_label in <Scope: class Node> to <Node method:pyan.node.Node.get_label>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Call make_safe_label
Call self.get_name
Attribute get_name of self in context <class '_ast.Load'>
Resolve self.get_name in context <class '_ast.Load'>
Get self in <Scope: function get_label>, found in <Scope: function get_label>, value <Node class:pyan.node.Node>
Resolved to attr get_name of <Node class:pyan.node.Node>
getattr get_name on self returns <Node method:pyan.node.Node.get_name>
Use from <Node method:pyan.node.Node.get_label> to <Node method:pyan.node.Node.get_name>
New edge added for Use from <Node method:pyan.node.Node.get_label> to <Node method:pyan.node.Node.get_name>
Name make_safe_label in context <class '_ast.Load'>
Get make_safe_label in <Scope: function get_label>, found in <Scope: module >, value <Node function:pyan.node.make_safe_label>
Use from <Node method:pyan.node.Node.get_label> to Name <Node function:pyan.node.make_safe_label>
New edge added for Use from <Node method:pyan.node.Node.get_label> to Name <Node function:pyan.node.make_safe_label>
FunctionDef get_namespace_label
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.get_namespace_label>
Set get_namespace_label in <Scope: class Node> to <Node method:pyan.node.Node.get_namespace_label>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Call make_safe_label
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_namespace_label>, found in <Scope: function get_namespace_label>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_namespace_label> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.get_namespace_label> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Name make_safe_label in context <class '_ast.Load'>
Get make_safe_label in <Scope: function get_namespace_label>, found in <Scope: module >, value <Node function:pyan.node.make_safe_label>
Use from <Node method:pyan.node.Node.get_namespace_label> to Name <Node function:pyan.node.make_safe_label>
New edge added for Use from <Node method:pyan.node.Node.get_namespace_label> to Name <Node function:pyan.node.make_safe_label>
FunctionDef __repr__
Def from <Node class:pyan.node.Node> to Function <Node method:pyan.node.Node.__repr__>
Set __repr__ in <Scope: class Node> to <Node method:pyan.node.Node.__repr__>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Call repr
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
getattr flavor on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__repr__> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.node.Node.__repr__> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolving repr() of self.flavor
Resolve self.flavor.__repr__ in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
Resolved to attr __repr__ of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolve repr() of self.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function __repr__>: no Node value (or name not in scope)
Use from <Node method:pyan.node.Node.__repr__> to Name <Node ???:*.repr>
New edge added for Use from <Node method:pyan.node.Node.__repr__> to Name <Node ???:*.repr>
Call self.get_name
Attribute get_name of self in context <class '_ast.Load'>
Resolve self.get_name in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Node>
Resolved to attr get_name of <Node class:pyan.node.Node>
getattr get_name on self returns <Node method:pyan.node.Node.get_name>
Use from <Node method:pyan.node.Node.__repr__> to <Node method:pyan.node.Node.get_name>
New edge added for Use from <Node method:pyan.node.Node.__repr__> to <Node method:pyan.node.Node.get_name>
========== pass 1, file 'pyan/visgraph.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>}
Module
Import ['re']
Set re in <Scope: module > to <Node module:re>
Use from <Node module:pyan.visgraph> to Import <Node module:re>
New edge added for Use from <Node module:pyan.visgraph> to Import <Node module:re>
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.visgraph> to Import <Node module:logging>
New edge added for Use from <Node module:pyan.visgraph> to Import <Node module:logging>
Import ['colorsys']
Set colorsys in <Scope: module > to <Node module:colorsys>
Use from <Node module:pyan.visgraph> to Import <Node module:colorsys>
New edge added for Use from <Node module:pyan.visgraph> to Import <Node module:colorsys>
ClassDef Colorizer
Def from <Node module:pyan.visgraph> to Class <Node class:pyan.visgraph.Colorizer>
Set Colorizer in <Scope: module > to <Node class:pyan.visgraph.Colorizer>
FunctionDef __init__
Def from <Node class:pyan.visgraph.Colorizer> to Function <Node method:pyan.visgraph.Colorizer.__init__>
Set __init__ in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['self.logger'] [<_ast.BoolOp object at 0x7ffa5c579f98>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ???:*.__name__>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function __init__>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node method:pyan.visgraph.Colorizer.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Store'>
Resolve self.logger in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr logger of <Node class:pyan.visgraph.Colorizer>
setattr logger on self to <Node attribute:logging.getLogger>
Assign ['self.colored'] ['colored']
Name colored in context <class '_ast.Load'>
Get colored in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Attribute colored of self in context <class '_ast.Store'>
Resolve self.colored in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr colored of <Node class:pyan.visgraph.Colorizer>
setattr colored on self to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Assign ['self._hues'] [<_ast.ListComp object at 0x7ffa5c57a2b0>]
ListComp
Name j in context <class '_ast.Load'>
Get j in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ???:*.j>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ???:*.j>
Name num_colors in context <class '_ast.Load'>
Get num_colors in <Scope: function listcomp>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Call range
Name num_colors in context <class '_ast.Load'>
Get num_colors in <Scope: function listcomp>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ???:*.range>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ???:*.range>
Name j in context <class '_ast.Store'>
Set j in <Scope: function listcomp> to <Node ???:*.range>
Def from <Node method:pyan.visgraph.Colorizer.__init__> to listcomp <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Attribute _hues of self in context <class '_ast.Store'>
Resolve self._hues in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _hues of <Node class:pyan.visgraph.Colorizer>
setattr _hues on self to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Assign ['self._idx_of'] [<_ast.Dict object at 0x7ffa5c57a550>]
Attribute _idx_of of self in context <class '_ast.Store'>
Assign ['self._idx'] [<_ast.Num object at 0x7ffa5c57a630>]
Attribute _idx of self in context <class '_ast.Store'>
FunctionDef _next_idx
Def from <Node class:pyan.visgraph.Colorizer> to Function <Node method:pyan.visgraph.Colorizer._next_idx>
Set _next_idx in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer._next_idx>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['result'] ['self._idx']
Attribute _idx of self in context <class '_ast.Load'>
Resolve self._idx in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:pyan.visgraph.Colorizer._idx> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:pyan.visgraph.Colorizer._idx> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx not resolved; maybe fwd ref or unanalyzed import)
Name result in context <class '_ast.Store'>
Set result in <Scope: function _next_idx> to <Node attribute:pyan.visgraph.Colorizer._idx>
AugAssign ['self._idx'] <class '_ast.Add'> [<_ast.Num object at 0x7ffa5c57a898>]
Attribute _idx of self in context <class '_ast.Store'>
Attribute _idx of self in context <class '_ast.Load'>
Resolve self._idx in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:pyan.visgraph.Colorizer._idx> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx not resolved; maybe fwd ref or unanalyzed import)
Call len
Attribute _hues of self in context <class '_ast.Load'>
Resolve self._hues in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _hues of <Node class:pyan.visgraph.Colorizer>
getattr _hues on self returns <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
New edge added for Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function _next_idx>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.visgraph.Colorizer._next_idx> to Name <Node ???:*.len>
Call self.logger.warn
Attribute warn of self.logger in context <class '_ast.Load'>
Resolve self.logger.warn in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr logger of <Node class:pyan.visgraph.Colorizer>
Resolved to attr warn of <Node attribute:logging.getLogger>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:logging.getLogger.warn> (target obj <Node attribute:logging.getLogger> known but target attr warn not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:logging.getLogger.warn> (target obj <Node attribute:logging.getLogger> known but target attr warn not resolved; maybe fwd ref or unanalyzed import)
Assign ['self._idx'] [<_ast.Num object at 0x7ffa5c57ac88>]
Attribute _idx of self in context <class '_ast.Store'>
Name result in context <class '_ast.Load'>
Get result in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node attribute:pyan.visgraph.Colorizer._idx>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to Name <Node attribute:pyan.visgraph.Colorizer._idx>
FunctionDef _node_to_idx
Def from <Node class:pyan.visgraph.Colorizer> to Function <Node method:pyan.visgraph.Colorizer._node_to_idx>
Set _node_to_idx in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['ns'] ['node.filename']
Attribute filename of node in context <class '_ast.Load'>
Resolve node.filename in context <class '_ast.Load'>
Get node in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Resolved to attr filename of <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename> (target obj <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename> (target obj <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function _node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Call self.logger.info
Call node.get_short_name
Attribute get_short_name of node in context <class '_ast.Load'>
Resolve node.get_short_name in context <class '_ast.Load'>
Get node in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Resolved to attr get_short_name of <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.get_short_name> (target obj <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^> known but target attr get_short_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.get_short_name> (target obj <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^> known but target attr get_short_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr logger of <Node class:pyan.visgraph.Colorizer>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Attribute _idx_of of self in context <class '_ast.Load'>
Resolve self._idx_of in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx_of of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._idx_of> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx_of not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._idx_of> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx_of not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c584320>] [<_ast.Call object at 0x7ffa5c584438>]
Call self._next_idx
Attribute _next_idx of self in context <class '_ast.Load'>
Resolve self._next_idx in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _next_idx of <Node class:pyan.visgraph.Colorizer>
getattr _next_idx on self returns <Node method:pyan.visgraph.Colorizer._next_idx>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node method:pyan.visgraph.Colorizer._next_idx>
New edge added for Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node method:pyan.visgraph.Colorizer._next_idx>
Attribute _idx_of of self in context <class '_ast.Load'>
Resolve self._idx_of in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx_of of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._idx_of> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx_of not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Attribute _idx_of of self in context <class '_ast.Load'>
Resolve self._idx_of in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx_of of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._idx_of> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr _idx_of not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
FunctionDef get
Def from <Node class:pyan.visgraph.Colorizer> to Function <Node method:pyan.visgraph.Colorizer.get>
Set get in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer.get>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['idx'] [<_ast.Call object at 0x7ffa5c584780>]
Call self._node_to_idx
Name node in context <class '_ast.Load'>
Get node in <Scope: function get>, found in <Scope: function get>, value <Node ---:pyan.visgraph.Colorizer.get.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node ---:pyan.visgraph.Colorizer.get.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node ---:pyan.visgraph.Colorizer.get.^^^argument^^^>
Attribute _node_to_idx of self in context <class '_ast.Load'>
Resolve self._node_to_idx in context <class '_ast.Load'>
Get self in <Scope: function get>, found in <Scope: function get>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _node_to_idx of <Node class:pyan.visgraph.Colorizer>
getattr _node_to_idx on self returns <Node method:pyan.visgraph.Colorizer._node_to_idx>
Use from <Node method:pyan.visgraph.Colorizer.get> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.get> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function get> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get>, found in <Scope: function get>, value <Node method:pyan.visgraph.Colorizer._node_to_idx>
Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node method:pyan.visgraph.Colorizer._node_to_idx>
Attribute _hues of self in context <class '_ast.Load'>
Resolve self._hues in context <class '_ast.Load'>
Get self in <Scope: function get>, found in <Scope: function get>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _hues of <Node class:pyan.visgraph.Colorizer>
getattr _hues on self returns <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Use from <Node method:pyan.visgraph.Colorizer.get> to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.get> to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get>, found in <Scope: function get>, value <Node method:pyan.visgraph.Colorizer._node_to_idx>
Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node method:pyan.visgraph.Colorizer._node_to_idx>
FunctionDef make_colors
Def from <Node class:pyan.visgraph.Colorizer> to Function <Node method:pyan.visgraph.Colorizer.make_colors>
Set make_colors in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer.make_colors>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Attribute colored of self in context <class '_ast.Load'>
Resolve self.colored in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr colored of <Node class:pyan.visgraph.Colorizer>
getattr colored on self returns <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Assign ['idx', 'H'] [<_ast.Call object at 0x7ffa5c584c88>]
Call self.get
Name node in context <class '_ast.Load'>
Get node in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Attribute get of self in context <class '_ast.Load'>
Resolve self.get in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr get of <Node class:pyan.visgraph.Colorizer>
getattr get on self returns <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node method:pyan.visgraph.Colorizer.get>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name H in context <class '_ast.Store'>
Set H in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Assign ['L'] [<_ast.Call object at 0x7ffa5c584dd8>]
Call max
Call node.get_level
Attribute get_level of node in context <class '_ast.Load'>
Resolve node.get_level in context <class '_ast.Load'>
Get node in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Resolved to attr get_level of <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.make_colors.^^^argument^^^.get_level> (target obj <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.make_colors.^^^argument^^^.get_level> (target obj <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
Name max in context <class '_ast.Load'>
Get max in <Scope: function make_colors>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
Name L in context <class '_ast.Store'>
Set L in <Scope: function make_colors> to <Node ???:*.max>
Assign ['S'] [<_ast.Num object at 0x7ffa5c5890f0>]
Name S in context <class '_ast.Store'>
Set S in <Scope: function make_colors>: value None is not a Node
Assign ['A'] [<_ast.Num object at 0x7ffa5c589198>]
Name A in context <class '_ast.Store'>
Set A in <Scope: function make_colors>: value None is not a Node
Assign ['fill_RGBA'] [<_ast.Call object at 0x7ffa5c589240>]
Call self.htmlize_rgb
Call colorsys.hls_to_rgb
Name H in context <class '_ast.Load'>
Get H in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node method:pyan.visgraph.Colorizer.get>
Name L in context <class '_ast.Load'>
Get L in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ???:*.max>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
Name S in context <class '_ast.Load'>
Get S in <Scope: function make_colors>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.S>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.S>
Attribute hls_to_rgb of colorsys in context <class '_ast.Load'>
Resolve colorsys.hls_to_rgb in context <class '_ast.Load'>
Get colorsys in <Scope: function make_colors>, found in <Scope: module >, value <Node module:colorsys>
Resolved to attr hls_to_rgb of <Node module:colorsys>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:colorsys.hls_to_rgb> (target obj <Node module:colorsys> known but target attr hls_to_rgb not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:colorsys.hls_to_rgb> (target obj <Node module:colorsys> known but target attr hls_to_rgb not resolved; maybe fwd ref or unanalyzed import)
Name A in context <class '_ast.Load'>
Get A in <Scope: function make_colors>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.A>
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.A>
Attribute htmlize_rgb of self in context <class '_ast.Load'>
Resolve self.htmlize_rgb in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr htmlize_rgb of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr htmlize_rgb not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr htmlize_rgb not resolved; maybe fwd ref or unanalyzed import)
Name fill_RGBA in context <class '_ast.Store'>
Set fill_RGBA in <Scope: function make_colors> to <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb>
Assign ['text_RGB'] [<_ast.IfExp object at 0x7ffa5c589550>]
Name L in context <class '_ast.Load'>
Get L in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ???:*.max>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
Name text_RGB in context <class '_ast.Store'>
Set text_RGB in <Scope: function make_colors> to <Node ???:*.max>
Assign ['idx', '_'] [<_ast.Call object at 0x7ffa5c589780>]
Call self.get
Name node in context <class '_ast.Load'>
Get node in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Attribute get of self in context <class '_ast.Load'>
Resolve self.get in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr get of <Node class:pyan.visgraph.Colorizer>
getattr get on self returns <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Assign ['fill_RGBA'] [<_ast.Call object at 0x7ffa5c5898d0>]
Call self.htmlize_rgb
Attribute htmlize_rgb of self in context <class '_ast.Load'>
Resolve self.htmlize_rgb in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr htmlize_rgb of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb> (target obj <Node class:pyan.visgraph.Colorizer> known but target attr htmlize_rgb not resolved; maybe fwd ref or unanalyzed import)
Name fill_RGBA in context <class '_ast.Store'>
Set fill_RGBA in <Scope: function make_colors> to <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb>
Assign ['text_RGB'] [<_ast.Str object at 0x7ffa5c589ac8>]
Name text_RGB in context <class '_ast.Store'>
Set text_RGB in <Scope: function make_colors>: value None is not a Node
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node method:pyan.visgraph.Colorizer.get>
Name fill_RGBA in context <class '_ast.Load'>
Get fill_RGBA in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node attribute:pyan.visgraph.Colorizer.htmlize_rgb>
Name text_RGB in context <class '_ast.Load'>
Get text_RGB in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ???:*.max>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
FunctionDef htmlize_rgb
Name staticmethod in context <class '_ast.Load'>
Get staticmethod in <Scope: class Colorizer>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.Colorizer> to Name <Node ???:*.staticmethod>
New edge added for Use from <Node class:pyan.visgraph.Colorizer> to Name <Node ???:*.staticmethod>
Def from <Node class:pyan.visgraph.Colorizer> to Function <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Set htmlize_rgb in <Scope: class Colorizer> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Name A in context <class '_ast.Load'>
Get A in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
New edge added for Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Assign ['R', 'G', 'B', 'A'] [<_ast.ListComp object at 0x7ffa5c589fd0>]
ListComp
Call int
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.x>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.x>
Name int in context <class '_ast.Load'>
Get int in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.int>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.int>
Name R in context <class '_ast.Load'>
Get R in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name G in context <class '_ast.Load'>
Get G in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name B in context <class '_ast.Load'>
Get B in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name A in context <class '_ast.Load'>
Get A in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Def from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to listcomp <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Store'>
Set R in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Store'>
Set G in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Store'>
Set B in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name A in context <class '_ast.Store'>
Set A in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Load'>
Get R in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
New edge added for Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Load'>
Get G in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Load'>
Get B in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name A in context <class '_ast.Load'>
Get A in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Assign ['R', 'G', 'B'] [<_ast.ListComp object at 0x7ffa5c58e5c0>]
ListComp
Call int
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name int in context <class '_ast.Load'>
Get int in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.int>
Name R in context <class '_ast.Load'>
Get R in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
New edge added for Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Load'>
Get G in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Load'>
Get B in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Store'>
Set R in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Store'>
Set G in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Store'>
Set B in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Load'>
Get R in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Load'>
Get G in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Load'>
Get B in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
ClassDef VisualNode
Def from <Node module:pyan.visgraph> to Class <Node class:pyan.visgraph.VisualNode>
Set VisualNode in <Scope: module > to <Node class:pyan.visgraph.VisualNode>
Name object in context <class '_ast.Load'>
Get object in <Scope: class VisualNode>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualNode> to Name <Node ???:*.object>
New edge added for Use from <Node class:pyan.visgraph.VisualNode> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:pyan.visgraph.VisualNode> to Function <Node method:pyan.visgraph.VisualNode.__init__>
Set __init__ in <Scope: class VisualNode> to <Node method:pyan.visgraph.VisualNode.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualNode>
Assign ['self.id'] ['id']
Name id in context <class '_ast.Load'>
Get id in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute id of self in context <class '_ast.Store'>
Resolve self.id in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
setattr id on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.label'] ['label']
Name label in context <class '_ast.Load'>
Get label in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute label of self in context <class '_ast.Store'>
Resolve self.label in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr label of <Node class:pyan.visgraph.VisualNode>
setattr label on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Store'>
Resolve self.flavor in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualNode>
setattr flavor on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.fill_color'] ['fill_color']
Name fill_color in context <class '_ast.Load'>
Get fill_color in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute fill_color of self in context <class '_ast.Store'>
Resolve self.fill_color in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr fill_color of <Node class:pyan.visgraph.VisualNode>
setattr fill_color on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.text_color'] ['text_color']
Name text_color in context <class '_ast.Load'>
Get text_color in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute text_color of self in context <class '_ast.Store'>
Resolve self.text_color in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr text_color of <Node class:pyan.visgraph.VisualNode>
setattr text_color on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.group'] ['group']
Name group in context <class '_ast.Load'>
Get group in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute group of self in context <class '_ast.Store'>
Resolve self.group in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr group of <Node class:pyan.visgraph.VisualNode>
setattr group on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
FunctionDef __repr__
Def from <Node class:pyan.visgraph.VisualNode> to Function <Node method:pyan.visgraph.VisualNode.__repr__>
Set __repr__ in <Scope: class VisualNode> to <Node method:pyan.visgraph.VisualNode.__repr__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualNode>
Assign ['optionals'] [<_ast.ListComp object at 0x7ffa5c5934e0>]
ListComp
Call repr
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ???:*.s>
New edge added for Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ???:*.s>
Resolving repr() of s
Resolve s.__repr__ in context <class '_ast.Load'>
Get s in <Scope: function listcomp>: no Node value (or name not in scope)
Resolved to attr __repr__ of None
Resolve repr() of s: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ???:*.repr>
New edge added for Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ???:*.repr>
Attribute label of self in context <class '_ast.Load'>
Resolve self.label in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr label of <Node class:pyan.visgraph.VisualNode>
getattr label on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
New edge added for Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualNode>
getattr flavor on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute fill_color of self in context <class '_ast.Load'>
Resolve self.fill_color in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr fill_color of <Node class:pyan.visgraph.VisualNode>
getattr fill_color on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute text_color of self in context <class '_ast.Load'>
Resolve self.text_color in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr text_color of <Node class:pyan.visgraph.VisualNode>
getattr text_color on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute group of self in context <class '_ast.Load'>
Resolve self.group in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr group of <Node class:pyan.visgraph.VisualNode>
getattr group on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Def from <Node method:pyan.visgraph.VisualNode.__repr__> to listcomp <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Name optionals in context <class '_ast.Store'>
Set optionals in <Scope: function __repr__> to <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Name optionals in context <class '_ast.Load'>
Get optionals in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
New edge added for Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Call repr
Attribute id of self in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
getattr id on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolving repr() of self.id
Resolve self.id.__repr__ in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
Resolved to attr __repr__ of <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolve repr() of self.id: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function __repr__>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node ???:*.repr>
New edge added for Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node ???:*.repr>
Call <_ast.Str object at 0x7ffa5c593c18>.join
Name optionals in context <class '_ast.Load'>
Get optionals in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Attribute join of <_ast.Str object at 0x7ffa5c593c18> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x7ffa5c593c18>.join in context <class '_ast.Load'>
Resolved to attr join of <Node class:Str>
getattr join on <_ast.Str object at 0x7ffa5c593c18> returns <Node attribute:Str.join>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node attribute:Str.join>
New edge added for Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node attribute:Str.join>
Call repr
Attribute id of self in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
getattr id on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolving repr() of self.id
Resolve self.id.__repr__ in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
Resolved to attr __repr__ of <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolve repr() of self.id: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function __repr__>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node ???:*.repr>
ClassDef VisualEdge
Def from <Node module:pyan.visgraph> to Class <Node class:pyan.visgraph.VisualEdge>
Set VisualEdge in <Scope: module > to <Node class:pyan.visgraph.VisualEdge>
Name object in context <class '_ast.Load'>
Get object in <Scope: class VisualEdge>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualEdge> to Name <Node ???:*.object>
New edge added for Use from <Node class:pyan.visgraph.VisualEdge> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:pyan.visgraph.VisualEdge> to Function <Node method:pyan.visgraph.VisualEdge.__init__>
Set __init__ in <Scope: class VisualEdge> to <Node method:pyan.visgraph.VisualEdge.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualEdge>
Assign ['self.source'] ['source']
Name source in context <class '_ast.Load'>
Get source in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute source of self in context <class '_ast.Store'>
Resolve self.source in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr source of <Node class:pyan.visgraph.VisualEdge>
setattr source on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Assign ['self.target'] ['target']
Name target in context <class '_ast.Load'>
Get target in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute target of self in context <class '_ast.Store'>
Resolve self.target in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr target of <Node class:pyan.visgraph.VisualEdge>
setattr target on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Assign ['self.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Store'>
Resolve self.flavor in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualEdge>
setattr flavor on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Assign ['self.color'] ['color']
Name color in context <class '_ast.Load'>
Get color in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute color of self in context <class '_ast.Store'>
Resolve self.color in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr color of <Node class:pyan.visgraph.VisualEdge>
setattr color on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
FunctionDef __repr__
Def from <Node class:pyan.visgraph.VisualEdge> to Function <Node method:pyan.visgraph.VisualEdge.__repr__>
Set __repr__ in <Scope: class VisualEdge> to <Node method:pyan.visgraph.VisualEdge.__repr__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualEdge>
Attribute label of self.source in context <class '_ast.Load'>
Resolve self.source.label in context <class '_ast.Load'>
Resolve self.source in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr source of <Node class:pyan.visgraph.VisualEdge>
Resolved to attr label of <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> (target obj <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> (target obj <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualEdge>
getattr flavor on self returns <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute label of self.target in context <class '_ast.Load'>
Resolve self.target.label in context <class '_ast.Load'>
Resolve self.target in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr target of <Node class:pyan.visgraph.VisualEdge>
Resolved to attr label of <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> (target obj <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
ClassDef VisualGraph
Def from <Node module:pyan.visgraph> to Class <Node class:pyan.visgraph.VisualGraph>
Set VisualGraph in <Scope: module > to <Node class:pyan.visgraph.VisualGraph>
Name object in context <class '_ast.Load'>
Get object in <Scope: class VisualGraph>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualGraph> to Name <Node ???:*.object>
New edge added for Use from <Node class:pyan.visgraph.VisualGraph> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:pyan.visgraph.VisualGraph> to Function <Node method:pyan.visgraph.VisualGraph.__init__>
Set __init__ in <Scope: class VisualGraph> to <Node method:pyan.visgraph.VisualGraph.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualGraph>
Assign ['self.id'] ['id']
Name id in context <class '_ast.Load'>
Get id in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute id of self in context <class '_ast.Store'>
Resolve self.id in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr id of <Node class:pyan.visgraph.VisualGraph>
setattr id on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.label'] ['label']
Name label in context <class '_ast.Load'>
Get label in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute label of self in context <class '_ast.Store'>
Resolve self.label in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr label of <Node class:pyan.visgraph.VisualGraph>
setattr label on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.nodes'] [<_ast.BoolOp object at 0x7ffa5c598f98>]
Name nodes in context <class '_ast.Load'>
Get nodes in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute nodes of self in context <class '_ast.Store'>
Resolve self.nodes in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr nodes of <Node class:pyan.visgraph.VisualGraph>
setattr nodes on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.edges'] [<_ast.BoolOp object at 0x7ffa5c597128>]
Name edges in context <class '_ast.Load'>
Get edges in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute edges of self in context <class '_ast.Store'>
Resolve self.edges in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr edges of <Node class:pyan.visgraph.VisualGraph>
setattr edges on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.subgraphs'] [<_ast.BoolOp object at 0x7ffa5c597278>]
Name subgraphs in context <class '_ast.Load'>
Get subgraphs in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute subgraphs of self in context <class '_ast.Store'>
Resolve self.subgraphs in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr subgraphs of <Node class:pyan.visgraph.VisualGraph>
setattr subgraphs on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.grouped'] ['grouped']
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute grouped of self in context <class '_ast.Store'>
Resolve self.grouped in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr grouped of <Node class:pyan.visgraph.VisualGraph>
setattr grouped on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
FunctionDef from_visitor
Name classmethod in context <class '_ast.Load'>
Get classmethod in <Scope: class VisualGraph>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualGraph> to Name <Node ???:*.classmethod>
New edge added for Use from <Node class:pyan.visgraph.VisualGraph> to Name <Node ???:*.classmethod>
Def from <Node class:pyan.visgraph.VisualGraph> to Function <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Set from_visitor in <Scope: class VisualGraph> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Method def: setting self name "cls" to <Node class:pyan.visgraph.VisualGraph>
Assign ['colored'] [<_ast.Call object at 0x7ffa5c597630>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name colored in context <class '_ast.Store'>
Set colored in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['nested'] [<_ast.Call object at 0x7ffa5c5977b8>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name nested in context <class '_ast.Store'>
Set nested in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['grouped_alt'] [<_ast.Call object at 0x7ffa5c597940>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name grouped_alt in context <class '_ast.Store'>
Set grouped_alt in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['grouped'] [<_ast.BoolOp object at 0x7ffa5c597ac8>]
Name nested in context <class '_ast.Load'>
Get nested in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name grouped in context <class '_ast.Store'>
Set grouped in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['annotated'] [<_ast.Call object at 0x7ffa5c597cc0>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name annotated in context <class '_ast.Store'>
Set annotated in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['draw_defines'] [<_ast.Call object at 0x7ffa5c597e48>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name draw_defines in context <class '_ast.Store'>
Set draw_defines in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['draw_uses'] [<_ast.Call object at 0x7ffa5c597fd0>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name draw_uses in context <class '_ast.Store'>
Set draw_uses in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name annotated in context <class '_ast.Load'>
Get annotated in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['labeler'] [<_ast.Lambda object at 0x7ffa5c59c278>]
Lambda
Call n.get_annotated_name
Attribute get_annotated_name of n in context <class '_ast.Load'>
Resolve n.get_annotated_name in context <class '_ast.Load'>
Get n in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr get_annotated_name of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.get_annotated_name> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.get_annotated_name> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
Def from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to lambda <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Name labeler in context <class '_ast.Store'>
Set labeler in <Scope: function from_visitor> to <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Assign ['labeler'] [<_ast.Lambda object at 0x7ffa5c59c438>]
Lambda
Call n.get_long_annotated_name
Attribute get_long_annotated_name of n in context <class '_ast.Load'>
Resolve n.get_long_annotated_name in context <class '_ast.Load'>
Get n in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr get_long_annotated_name of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.get_long_annotated_name> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.get_long_annotated_name> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name labeler in context <class '_ast.Store'>
Set labeler in <Scope: function from_visitor> to <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Assign ['labeler'] [<_ast.Lambda object at 0x7ffa5c59c5f8>]
Lambda
Call n.get_short_name
Attribute get_short_name of n in context <class '_ast.Load'>
Resolve n.get_short_name in context <class '_ast.Load'>
Get n in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr get_short_name of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.get_short_name> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.get_short_name> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name labeler in context <class '_ast.Store'>
Set labeler in <Scope: function from_visitor> to <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Assign ['logger'] [<_ast.BoolOp object at 0x7ffa5c59c7b8>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.__name__>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function from_visitor>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Store'>
Set logger in <Scope: function from_visitor> to <Node attribute:logging.getLogger>
Assign ['visited_nodes'] []
Name visited_nodes in context <class '_ast.Store'>
Set visited_nodes in <Scope: function from_visitor>: value None is not a Node
For-loop
Attribute nodes of visitor in context <class '_ast.Load'>
Resolve visitor.nodes in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr nodes of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
For-loop
Attribute nodes of visitor in context <class '_ast.Load'>
Resolve visitor.nodes in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr nodes of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Name node in context <class '_ast.Store'>
Set node in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Attribute defined of node in context <class '_ast.Load'>
Resolve node.defined in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Call visited_nodes.append
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Attribute append of visited_nodes in context <class '_ast.Load'>
Resolve visited_nodes.append in context <class '_ast.Load'>
Get visited_nodes in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.append> (target obj visited_nodes not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.append> (target obj visited_nodes not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call visited_nodes.sort
Lambda
Attribute namespace of x in context <class '_ast.Load'>
Resolve x.namespace in context <class '_ast.Load'>
Get x in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr namespace of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.namespace> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.namespace> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute name of x in context <class '_ast.Load'>
Resolve x.name in context <class '_ast.Load'>
Get x in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr name of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.name> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.name> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute sort of visited_nodes in context <class '_ast.Load'>
Resolve visited_nodes.sort in context <class '_ast.Load'>
Get visited_nodes in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr sort of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.sort> (target obj visited_nodes not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.sort> (target obj visited_nodes not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef find_filenames
Def from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Function <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Set find_filenames in <Scope: function from_visitor> to <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Assign ['filenames'] [<_ast.Call object at 0x7ffa5c5a01d0>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function find_filenames>: no Node value (or name not in scope)
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.set>
New edge added for Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.set>
Name filenames in context <class '_ast.Store'>
Set filenames in <Scope: function find_filenames> to <Node ???:*.set>
For-loop
Name visited_nodes in context <class '_ast.Load'>
Get visited_nodes in <Scope: function find_filenames>: no Node value (or name not in scope)
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.visited_nodes>
New edge added for Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.visited_nodes>
Name node in context <class '_ast.Store'>
Set node in <Scope: function find_filenames> to <Node ???:*.visited_nodes>
Call filenames.add
Attribute filename of node in context <class '_ast.Load'>
Resolve node.filename in context <class '_ast.Load'>
Get node in <Scope: function find_filenames>, found in <Scope: function find_filenames>, value <Node ???:*.visited_nodes>
Resolved to attr filename of <Node ???:*.visited_nodes>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node ???:*.filename> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node ???:*.filename> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute add of filenames in context <class '_ast.Load'>
Resolve filenames.add in context <class '_ast.Load'>
Get filenames in <Scope: function find_filenames>, found in <Scope: function find_filenames>, value <Node ???:*.set>
Resolved to attr add of <Node ???:*.set>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node ???:*.add> (target obj filenames not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node ???:*.add> (target obj filenames not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function find_filenames>, found in <Scope: function find_filenames>, value <Node ???:*.set>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.set>
Assign ['colorizer'] [<_ast.Call object at 0x7ffa5c5a0518>]
Call Colorizer
Call len
Call find_filenames
Name find_filenames in context <class '_ast.Load'>
Get find_filenames in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Name colored in context <class '_ast.Load'>
Get colored in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:logging.getLogger>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:logging.getLogger>
Name Colorizer in context <class '_ast.Load'>
Get Colorizer in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.Colorizer>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.Colorizer>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.Colorizer>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.Colorizer.__init__> (call creates an instance)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.Colorizer.__init__> (call creates an instance)
Name colorizer in context <class '_ast.Store'>
Set colorizer in <Scope: function from_visitor> to <Node class:pyan.visgraph.Colorizer>
Assign ['nodes_dict'] [<_ast.Call object at 0x7ffa5c5a0860>]
Call dict
Name dict in context <class '_ast.Load'>
Get dict in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name nodes_dict in context <class '_ast.Store'>
Set nodes_dict in <Scope: function from_visitor> to <Node ???:*.dict>
Assign ['root_graph'] [<_ast.Call object at 0x7ffa5c5a0940>]
Call cls
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name cls in context <class '_ast.Load'>
Get cls in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualGraph.__init__> (call creates an instance)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualGraph.__init__> (call creates an instance)
Name root_graph in context <class '_ast.Store'>
Set root_graph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Assign ['subgraph'] ['root_graph']
Name root_graph in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Name subgraph in context <class '_ast.Store'>
Set subgraph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Assign ['namespace_stack'] []
Name namespace_stack in context <class '_ast.Store'>
Set namespace_stack in <Scope: function from_visitor>: value None is not a Node
Assign ['prev_namespace'] [<_ast.Str object at 0x7ffa5c5a0c88>]
Name prev_namespace in context <class '_ast.Store'>
Set prev_namespace in <Scope: function from_visitor>: value None is not a Node
For-loop
Name visited_nodes in context <class '_ast.Load'>
Get visited_nodes in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Name node in context <class '_ast.Store'>
Set node in <Scope: function from_visitor> to <Node ???:*.visited_nodes>
Call logger.info
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr name of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.name> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.name> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute info of logger in context <class '_ast.Load'>
Resolve logger.info in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:logging.getLogger>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['idx', 'fill_RGBA', 'text_RGB'] [<_ast.Call object at 0x7ffa5c523080>]
Call colorizer.make_colors
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Attribute make_colors of colorizer in context <class '_ast.Load'>
Resolve colorizer.make_colors in context <class '_ast.Load'>
Get colorizer in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr make_colors of <Node class:pyan.visgraph.Colorizer>
getattr make_colors on colorizer returns <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Name fill_RGBA in context <class '_ast.Store'>
Set fill_RGBA in <Scope: function from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Name text_RGB in context <class '_ast.Store'>
Set text_RGB in <Scope: function from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Assign ['visual_node'] [<_ast.Call object at 0x7ffa5c5231d0>]
Call VisualNode
Call node.get_label
Attribute get_label of node in context <class '_ast.Load'>
Resolve node.get_label in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr get_label of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.get_label> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.get_label> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call labeler
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Name labeler in context <class '_ast.Load'>
Get labeler in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Call repr
Attribute flavor of node in context <class '_ast.Load'>
Resolve node.flavor in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr flavor of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.flavor> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.flavor> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Resolving repr() of node.flavor
Resolve node.flavor.__repr__ in context <class '_ast.Load'>
Resolve node.flavor in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr flavor of <Node ???:*.visited_nodes>
Unresolved, returning attr __repr__ of unknown
Resolve repr() of node.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.repr>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.repr>
Name fill_RGBA in context <class '_ast.Load'>
Get fill_RGBA in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node method:pyan.visgraph.Colorizer.make_colors>
Name text_RGB in context <class '_ast.Load'>
Get text_RGB in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node method:pyan.visgraph.Colorizer.make_colors>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node method:pyan.visgraph.Colorizer.make_colors>
Name VisualNode in context <class '_ast.Load'>
Get VisualNode in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualNode.__init__> (call creates an instance)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualNode.__init__> (call creates an instance)
Name visual_node in context <class '_ast.Store'>
Set visual_node in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualNode>
Assign [<_ast.Subscript object at 0x7ffa5c5236a0>] ['visual_node']
Name visual_node in context <class '_ast.Load'>
Get visual_node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name prev_namespace in context <class '_ast.Load'>
Get prev_namespace in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.prev_namespace>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.prev_namespace>
Call logger.info
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name prev_namespace in context <class '_ast.Load'>
Get prev_namespace in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.prev_namespace>
Attribute info of logger in context <class '_ast.Load'>
Resolve logger.info in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:logging.getLogger>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['label'] [<_ast.Call object at 0x7ffa5c523be0>]
Call node.get_namespace_label
Attribute get_namespace_label of node in context <class '_ast.Load'>
Resolve node.get_namespace_label in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr get_namespace_label of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.get_namespace_label> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.get_namespace_label> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name label in context <class '_ast.Store'>
Set label in <Scope: function from_visitor> to <Node ???:*.get_namespace_label>
Assign ['subgraph'] [<_ast.Call object at 0x7ffa5c523cf8>]
Call cls
Name label in context <class '_ast.Load'>
Get label in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.get_namespace_label>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.get_namespace_label>
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name cls in context <class '_ast.Load'>
Get cls in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualGraph.__init__> (call creates an instance)
Name subgraph in context <class '_ast.Store'>
Set subgraph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Name nested in context <class '_ast.Load'>
Get nested in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Call len
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Assign ['m'] [<_ast.Call object at 0x7ffa5c523fd0>]
Call re.match
Attribute label of <_ast.Subscript object at 0x7ffa5c5280f0> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c5280f0>.label in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c5280f0> in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr label of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.label> (target obj <_ast.Subscript object at 0x7ffa5c5280f0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.label> (target obj <_ast.Subscript object at 0x7ffa5c5280f0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute match of re in context <class '_ast.Load'>
Resolve re.match in context <class '_ast.Load'>
Get re in <Scope: function from_visitor>, found in <Scope: module >, value <Node module:re>
Resolved to attr match of <Node module:re>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match> (target obj <Node module:re> known but target attr match not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match> (target obj <Node module:re> known but target attr match not resolved; maybe fwd ref or unanalyzed import)
Name m in context <class '_ast.Store'>
Set m in <Scope: function from_visitor> to <Node attribute:re.match>
Name m in context <class '_ast.Load'>
Get m in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:re.match>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:re.match>
Call m.end
Attribute end of m in context <class '_ast.Load'>
Resolve m.end in context <class '_ast.Load'>
Get m in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:re.match>
Resolved to attr end of <Node attribute:re.match>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match.end> (target obj <Node attribute:re.match> known but target attr end not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match.end> (target obj <Node attribute:re.match> known but target attr end not resolved; maybe fwd ref or unanalyzed import)
Call len
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call m.end
Attribute end of m in context <class '_ast.Load'>
Resolve m.end in context <class '_ast.Load'>
Get m in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:re.match>
Resolved to attr end of <Node attribute:re.match>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match.end> (target obj <Node attribute:re.match> known but target attr end not resolved; maybe fwd ref or unanalyzed import)
Call namespace_stack.pop
Attribute pop of namespace_stack in context <class '_ast.Load'>
Resolve namespace_stack.pop in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr pop of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.pop> (target obj namespace_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.pop> (target obj namespace_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call len
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Assign ['m'] [<_ast.Call object at 0x7ffa5c5289e8>]
Call re.match
Attribute label of <_ast.Subscript object at 0x7ffa5c528ac8> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c528ac8>.label in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c528ac8> in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr label of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.label> (target obj <_ast.Subscript object at 0x7ffa5c528ac8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute match of re in context <class '_ast.Load'>
Resolve re.match in context <class '_ast.Load'>
Get re in <Scope: function from_visitor>, found in <Scope: module >, value <Node module:re>
Resolved to attr match of <Node module:re>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match> (target obj <Node module:re> known but target attr match not resolved; maybe fwd ref or unanalyzed import)
Name m in context <class '_ast.Store'>
Set m in <Scope: function from_visitor> to <Node attribute:re.match>
Assign ['parentgraph'] [<_ast.IfExp object at 0x7ffa5c528cc0>]
Call len
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name root_graph in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Name parentgraph in context <class '_ast.Store'>
Set parentgraph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Call parentgraph.subgraphs.append
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Attribute append of parentgraph.subgraphs in context <class '_ast.Load'>
Resolve parentgraph.subgraphs.append in context <class '_ast.Load'>
Resolve parentgraph.subgraphs in context <class '_ast.Load'>
Get parentgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr subgraphs of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call namespace_stack.append
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Attribute append of namespace_stack in context <class '_ast.Load'>
Resolve namespace_stack.append in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.append> (target obj namespace_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call root_graph.subgraphs.append
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Attribute append of root_graph.subgraphs in context <class '_ast.Load'>
Resolve root_graph.subgraphs.append in context <class '_ast.Load'>
Resolve root_graph.subgraphs in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr subgraphs of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call subgraph.nodes.append
Name visual_node in context <class '_ast.Load'>
Get visual_node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
Attribute append of subgraph.nodes in context <class '_ast.Load'>
Resolve subgraph.nodes.append in context <class '_ast.Load'>
Resolve subgraph.nodes in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr nodes of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Name draw_defines in context <class '_ast.Load'>
Get draw_defines in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name grouped_alt in context <class '_ast.Load'>
Get grouped_alt in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['color'] [<_ast.IfExp object at 0x7ffa5c52a588>]
Name draw_defines in context <class '_ast.Load'>
Get draw_defines in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name color in context <class '_ast.Store'>
Set color in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
For-loop
Attribute defines_edges of visitor in context <class '_ast.Load'>
Resolve visitor.defines_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr defines_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Attribute defined of n in context <class '_ast.Load'>
Resolve n.defined in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute defines_edges of visitor in context <class '_ast.Load'>
Resolve visitor.defines_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr defines_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Attribute defined of n2 in context <class '_ast.Load'>
Resolve n2.defined in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Call root_graph.edges.append
Call VisualEdge
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Name color in context <class '_ast.Load'>
Get color in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name VisualEdge in context <class '_ast.Load'>
Get VisualEdge in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualEdge>
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualEdge.__init__> (call creates an instance)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualEdge.__init__> (call creates an instance)
Attribute append of root_graph.edges in context <class '_ast.Load'>
Resolve root_graph.edges.append in context <class '_ast.Load'>
Resolve root_graph.edges in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr edges of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Name draw_uses in context <class '_ast.Load'>
Get draw_uses in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['color'] [<_ast.Str object at 0x7ffa5c52aeb8>]
Name color in context <class '_ast.Store'>
Set color in <Scope: function from_visitor>: value None is not a Node
For-loop
Attribute uses_edges of visitor in context <class '_ast.Load'>
Resolve visitor.uses_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr uses_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Attribute defined of n in context <class '_ast.Load'>
Resolve n.defined in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute uses_edges of visitor in context <class '_ast.Load'>
Resolve visitor.uses_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr uses_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Attribute defined of n2 in context <class '_ast.Load'>
Resolve n2.defined in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Call root_graph.edges.append
Call VisualEdge
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Name color in context <class '_ast.Load'>
Get color in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name VisualEdge in context <class '_ast.Load'>
Get VisualEdge in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualEdge.__init__> (call creates an instance)
Attribute append of root_graph.edges in context <class '_ast.Load'>
Resolve root_graph.edges.append in context <class '_ast.Load'>
Resolve root_graph.edges in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr edges of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Name root_graph in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
========== pass 1, file 'pyan/writers.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
Import ['sys']
Set sys in <Scope: module > to <Node module:sys>
Use from <Node module:pyan.writers> to Import <Node module:sys>
New edge added for Use from <Node module:pyan.writers> to Import <Node module:sys>
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.writers> to Import <Node module:logging>
New edge added for Use from <Node module:pyan.writers> to Import <Node module:logging>
ClassDef Writer
Def from <Node module:pyan.writers> to Class <Node class:pyan.writers.Writer>
Set Writer in <Scope: module > to <Node class:pyan.writers.Writer>
Name object in context <class '_ast.Load'>
Get object in <Scope: class Writer>: no Node value (or name not in scope)
Use from <Node class:pyan.writers.Writer> to Name <Node ???:*.object>
New edge added for Use from <Node class:pyan.writers.Writer> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.__init__>
Set __init__ in <Scope: class Writer> to <Node method:pyan.writers.Writer.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Assign ['self.graph'] ['graph']
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute graph of self in context <class '_ast.Store'>
Resolve self.graph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr graph of <Node class:pyan.writers.Writer>
setattr graph on self to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Assign ['self.output'] ['output']
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute output of self in context <class '_ast.Store'>
Resolve self.output in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr output of <Node class:pyan.writers.Writer>
setattr output on self to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Assign ['self.logger'] [<_ast.BoolOp object at 0x7ffa5c541a90>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ???:*.__name__>
New edge added for Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function __init__>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node method:pyan.writers.Writer.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Store'>
Resolve self.logger in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr logger of <Node class:pyan.writers.Writer>
setattr logger on self to <Node attribute:logging.getLogger>
Assign ['self.indent_level'] [<_ast.Num object at 0x7ffa5c541c88>]
Attribute indent_level of self in context <class '_ast.Store'>
Assign ['self.tabstop'] [<_ast.BinOp object at 0x7ffa5c541d68>]
Name tabstop in context <class '_ast.Load'>
Get tabstop in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute tabstop of self in context <class '_ast.Store'>
Resolve self.tabstop in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr tabstop of <Node class:pyan.writers.Writer>
setattr tabstop on self to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
FunctionDef log
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.log>
Set log in <Scope: class Writer> to <Node method:pyan.writers.Writer.log>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.logger.info
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function log>, found in <Scope: function log>, value <Node ---:pyan.writers.Writer.log.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.log> to Name <Node ---:pyan.writers.Writer.log.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.log> to Name <Node ---:pyan.writers.Writer.log.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function log>, found in <Scope: function log>, value <Node class:pyan.writers.Writer>
Resolved to attr logger of <Node class:pyan.writers.Writer>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.writers.Writer.log> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.log> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef indent
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.indent>
Set indent in <Scope: class Writer> to <Node method:pyan.writers.Writer.indent>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
AugAssign ['self.indent_level'] <class '_ast.Add'> ['level']
Name level in context <class '_ast.Load'>
Get level in <Scope: function indent>, found in <Scope: function indent>, value <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.indent> to Name <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.indent> to Name <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
Attribute indent_level of self in context <class '_ast.Store'>
Resolve self.indent_level in context <class '_ast.Store'>
Get self in <Scope: function indent>, found in <Scope: function indent>, value <Node class:pyan.writers.Writer>
Resolved to attr indent_level of <Node class:pyan.writers.Writer>
setattr indent_level on self to <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
FunctionDef dedent
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.dedent>
Set dedent in <Scope: class Writer> to <Node method:pyan.writers.Writer.dedent>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
AugAssign ['self.indent_level'] <class '_ast.Sub'> ['level']
Name level in context <class '_ast.Load'>
Get level in <Scope: function dedent>, found in <Scope: function dedent>, value <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.dedent> to Name <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.dedent> to Name <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Attribute indent_level of self in context <class '_ast.Store'>
Resolve self.indent_level in context <class '_ast.Store'>
Get self in <Scope: function dedent>, found in <Scope: function dedent>, value <Node class:pyan.writers.Writer>
Resolved to attr indent_level of <Node class:pyan.writers.Writer>
setattr indent_level on self to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
FunctionDef write
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.write>
Set write in <Scope: class Writer> to <Node method:pyan.writers.Writer.write>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.outstream.write
Attribute tabstop of self in context <class '_ast.Load'>
Resolve self.tabstop in context <class '_ast.Load'>
Get self in <Scope: function write>, found in <Scope: function write>, value <Node class:pyan.writers.Writer>
Resolved to attr tabstop of <Node class:pyan.writers.Writer>
getattr tabstop on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute indent_level of self in context <class '_ast.Load'>
Resolve self.indent_level in context <class '_ast.Load'>
Get self in <Scope: function write>, found in <Scope: function write>, value <Node class:pyan.writers.Writer>
Resolved to attr indent_level of <Node class:pyan.writers.Writer>
getattr indent_level on self returns <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Name line in context <class '_ast.Load'>
Get line in <Scope: function write>, found in <Scope: function write>, value <Node ---:pyan.writers.Writer.write.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write> to Name <Node ---:pyan.writers.Writer.write.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.write> to Name <Node ---:pyan.writers.Writer.write.^^^argument^^^>
Attribute write of self.outstream in context <class '_ast.Load'>
Resolve self.outstream.write in context <class '_ast.Load'>
Resolve self.outstream in context <class '_ast.Load'>
Get self in <Scope: function write>, found in <Scope: function write>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
Unresolved, returning attr write of unknown
Use from <Node method:pyan.writers.Writer.write> to <Node ???:*.write> (target obj self.outstream not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write> to <Node ???:*.write> (target obj self.outstream not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef run
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.run>
Set run in <Scope: class Writer> to <Node method:pyan.writers.Writer.run>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.log
Call type
Name self in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Name type in context <class '_ast.Load'>
Get type in <Scope: function run>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.type>
New edge added for Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.type>
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr log of <Node class:pyan.writers.Writer>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.log>
Assign ['self.outstream'] [<_ast.Call object at 0x7ffa5c539c18>]
Call open
Attribute output of self in context <class '_ast.Load'>
Resolve self.output in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr output of <Node class:pyan.writers.Writer>
getattr output on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function run>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.open>
New edge added for Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.open>
Attribute outstream of self in context <class '_ast.Store'>
Resolve self.outstream in context <class '_ast.Store'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
setattr outstream on self to <Node ???:*.open>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function run>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.TypeError>
New edge added for Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.TypeError>
Assign ['self.outstream'] ['sys.stdout']
Attribute stdout of sys in context <class '_ast.Load'>
Resolve sys.stdout in context <class '_ast.Load'>
Get sys in <Scope: function run>, found in <Scope: module >, value <Node module:sys>
Resolved to attr stdout of <Node module:sys>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout> (target obj <Node module:sys> known but target attr stdout not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout> (target obj <Node module:sys> known but target attr stdout not resolved; maybe fwd ref or unanalyzed import)
Attribute outstream of self in context <class '_ast.Store'>
Resolve self.outstream in context <class '_ast.Store'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
setattr outstream on self to <Node attribute:sys.stdout>
Call self.start_graph
Attribute start_graph of self in context <class '_ast.Load'>
Resolve self.start_graph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr start_graph of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.start_graph> (target obj <Node class:pyan.writers.Writer> known but target attr start_graph not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.start_graph> (target obj <Node class:pyan.writers.Writer> known but target attr start_graph not resolved; maybe fwd ref or unanalyzed import)
Call self.write_subgraph
Attribute graph of self in context <class '_ast.Load'>
Resolve self.graph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr graph of <Node class:pyan.writers.Writer>
getattr graph on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute write_subgraph of self in context <class '_ast.Load'>
Resolve self.write_subgraph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr write_subgraph of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.write_subgraph> (target obj <Node class:pyan.writers.Writer> known but target attr write_subgraph not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.write_subgraph> (target obj <Node class:pyan.writers.Writer> known but target attr write_subgraph not resolved; maybe fwd ref or unanalyzed import)
Call self.write_edges
Attribute write_edges of self in context <class '_ast.Load'>
Resolve self.write_edges in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr write_edges of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.write_edges> (target obj <Node class:pyan.writers.Writer> known but target attr write_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.write_edges> (target obj <Node class:pyan.writers.Writer> known but target attr write_edges not resolved; maybe fwd ref or unanalyzed import)
Call self.finish_graph
Attribute finish_graph of self in context <class '_ast.Load'>
Resolve self.finish_graph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr finish_graph of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.finish_graph> (target obj <Node class:pyan.writers.Writer> known but target attr finish_graph not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node attribute:pyan.writers.Writer.finish_graph> (target obj <Node class:pyan.writers.Writer> known but target attr finish_graph not resolved; maybe fwd ref or unanalyzed import)
Attribute output of self in context <class '_ast.Load'>
Resolve self.output in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr output of <Node class:pyan.writers.Writer>
getattr output on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Call self.outstream.close
Attribute close of self.outstream in context <class '_ast.Load'>
Resolve self.outstream.close in context <class '_ast.Load'>
Resolve self.outstream in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
Resolved to attr close of <Node attribute:sys.stdout>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout.close> (target obj <Node attribute:sys.stdout> known but target attr close not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout.close> (target obj <Node attribute:sys.stdout> known but target attr close not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_subgraph
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.write_subgraph>
Set write_subgraph in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.start_subgraph
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Attribute start_subgraph of self in context <class '_ast.Load'>
Resolve self.start_subgraph in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr start_subgraph of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.start_subgraph> (target obj <Node class:pyan.writers.Writer> known but target attr start_subgraph not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.start_subgraph> (target obj <Node class:pyan.writers.Writer> known but target attr start_subgraph not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute nodes of graph in context <class '_ast.Load'>
Resolve graph.nodes in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Resolved to attr nodes of <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> (target obj <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> (target obj <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Store'>
Set node in <Scope: function write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Call self.write_node
Name node in context <class '_ast.Load'>
Get node in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Attribute write_node of self in context <class '_ast.Load'>
Resolve self.write_node in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr write_node of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_node> (target obj <Node class:pyan.writers.Writer> known but target attr write_node not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_node> (target obj <Node class:pyan.writers.Writer> known but target attr write_node not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute subgraphs of graph in context <class '_ast.Load'>
Resolve graph.subgraphs in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Resolved to attr subgraphs of <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs> (target obj <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> known but target attr subgraphs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs> (target obj <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> known but target attr subgraphs not resolved; maybe fwd ref or unanalyzed import)
Name subgraph in context <class '_ast.Store'>
Set subgraph in <Scope: function write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs>
Call self.write_subgraph
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs>
Attribute write_subgraph of self in context <class '_ast.Load'>
Resolve self.write_subgraph in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr write_subgraph of <Node class:pyan.writers.Writer>
getattr write_subgraph on self returns <Node method:pyan.writers.Writer.write_subgraph>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node method:pyan.writers.Writer.write_subgraph>
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node method:pyan.writers.Writer.write_subgraph>
Call self.finish_subgraph
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Attribute finish_subgraph of self in context <class '_ast.Load'>
Resolve self.finish_subgraph in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr finish_subgraph of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.finish_subgraph> (target obj <Node class:pyan.writers.Writer> known but target attr finish_subgraph not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.finish_subgraph> (target obj <Node class:pyan.writers.Writer> known but target attr finish_subgraph not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_edges
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.write_edges>
Set write_edges in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_edges>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.start_edges
Attribute start_edges of self in context <class '_ast.Load'>
Resolve self.start_edges in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr start_edges of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.start_edges> (target obj <Node class:pyan.writers.Writer> known but target attr start_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.start_edges> (target obj <Node class:pyan.writers.Writer> known but target attr start_edges not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute edges of self.graph in context <class '_ast.Load'>
Resolve self.graph.edges in context <class '_ast.Load'>
Resolve self.graph in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr graph of <Node class:pyan.writers.Writer>
Resolved to attr edges of <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges> (target obj <Node ---:pyan.writers.Writer.__init__.^^^argument^^^> known but target attr edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges> (target obj <Node ---:pyan.writers.Writer.__init__.^^^argument^^^> known but target attr edges not resolved; maybe fwd ref or unanalyzed import)
Name edge in context <class '_ast.Store'>
Set edge in <Scope: function write_edges> to <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges>
Call self.write_edge
Name edge in context <class '_ast.Load'>
Get edge in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges>
Use from <Node method:pyan.writers.Writer.write_edges> to Name <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges>
Attribute write_edge of self in context <class '_ast.Load'>
Resolve self.write_edge in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr write_edge of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.write_edge> (target obj <Node class:pyan.writers.Writer> known but target attr write_edge not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.write_edge> (target obj <Node class:pyan.writers.Writer> known but target attr write_edge not resolved; maybe fwd ref or unanalyzed import)
Call self.finish_edges
Attribute finish_edges of self in context <class '_ast.Load'>
Resolve self.finish_edges in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr finish_edges of <Node class:pyan.writers.Writer>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.finish_edges> (target obj <Node class:pyan.writers.Writer> known but target attr finish_edges not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.finish_edges> (target obj <Node class:pyan.writers.Writer> known but target attr finish_edges not resolved; maybe fwd ref or unanalyzed import)
FunctionDef start_graph
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.start_graph>
Set start_graph in <Scope: class Writer> to <Node method:pyan.writers.Writer.start_graph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef start_subgraph
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.start_subgraph>
Set start_subgraph in <Scope: class Writer> to <Node method:pyan.writers.Writer.start_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef write_node
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.write_node>
Set write_node in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef start_edges
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.start_edges>
Set start_edges in <Scope: class Writer> to <Node method:pyan.writers.Writer.start_edges>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef write_edge
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.write_edge>
Set write_edge in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef finish_edges
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.finish_edges>
Set finish_edges in <Scope: class Writer> to <Node method:pyan.writers.Writer.finish_edges>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef finish_subgraph
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.finish_subgraph>
Set finish_subgraph in <Scope: class Writer> to <Node method:pyan.writers.Writer.finish_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef finish_graph
Def from <Node class:pyan.writers.Writer> to Function <Node method:pyan.writers.Writer.finish_graph>
Set finish_graph in <Scope: class Writer> to <Node method:pyan.writers.Writer.finish_graph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
ClassDef TgfWriter
Def from <Node module:pyan.writers> to Class <Node class:pyan.writers.TgfWriter>
Set TgfWriter in <Scope: module > to <Node class:pyan.writers.TgfWriter>
Name Writer in context <class '_ast.Load'>
Get Writer in <Scope: class TgfWriter>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Use from <Node class:pyan.writers.TgfWriter> to Name <Node class:pyan.writers.Writer>
New edge added for Use from <Node class:pyan.writers.TgfWriter> to Name <Node class:pyan.writers.Writer>
FunctionDef __init__
Def from <Node class:pyan.writers.TgfWriter> to Function <Node method:pyan.writers.TgfWriter.__init__>
Set __init__ in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Call Writer.__init__
Name self in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.TgfWriter>
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Attribute __init__ of Writer in context <class '_ast.Load'>
Resolve Writer.__init__ in context <class '_ast.Load'>
Get Writer in <Scope: function __init__>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Resolved to attr __init__ of <Node class:pyan.writers.Writer>
getattr __init__ on Writer returns <Node method:pyan.writers.Writer.__init__>
Use from <Node method:pyan.writers.TgfWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
New edge added for Use from <Node method:pyan.writers.TgfWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
Assign ['self.i'] [<_ast.Num object at 0x7ffa5c547d68>]
Attribute i of self in context <class '_ast.Store'>
Assign ['self.id_map'] [<_ast.Dict object at 0x7ffa5c547e48>]
Attribute id_map of self in context <class '_ast.Store'>
FunctionDef write_node
Def from <Node class:pyan.writers.TgfWriter> to Function <Node method:pyan.writers.TgfWriter.write_node>
Set write_node in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Call self.write
Attribute i of self in context <class '_ast.Load'>
Resolve self.i in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr i of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.i> (target obj <Node class:pyan.writers.TgfWriter> known but target attr i not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.i> (target obj <Node class:pyan.writers.TgfWriter> known but target attr i not resolved; maybe fwd ref or unanalyzed import)
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr write of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write> (target obj <Node class:pyan.writers.TgfWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write> (target obj <Node class:pyan.writers.TgfWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c54b240>] ['self.i']
Attribute i of self in context <class '_ast.Load'>
Resolve self.i in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr i of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.i> (target obj <Node class:pyan.writers.TgfWriter> known but target attr i not resolved; maybe fwd ref or unanalyzed import)
Attribute id_map of self in context <class '_ast.Load'>
Resolve self.id_map in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr id_map of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.id_map> (target obj <Node class:pyan.writers.TgfWriter> known but target attr id_map not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.id_map> (target obj <Node class:pyan.writers.TgfWriter> known but target attr id_map not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_node> to Name <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to Name <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
AugAssign ['self.i'] <class '_ast.Add'> [<_ast.Num object at 0x7ffa5c54b470>]
Attribute i of self in context <class '_ast.Store'>
FunctionDef start_edges
Def from <Node class:pyan.writers.TgfWriter> to Function <Node method:pyan.writers.TgfWriter.start_edges>
Set start_edges in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.start_edges>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_edges>, found in <Scope: function start_edges>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr write of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.start_edges> to <Node attribute:pyan.writers.TgfWriter.write> (target obj <Node class:pyan.writers.TgfWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.start_edges> to <Node attribute:pyan.writers.TgfWriter.write> (target obj <Node class:pyan.writers.TgfWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_edge
Def from <Node class:pyan.writers.TgfWriter> to Function <Node method:pyan.writers.TgfWriter.write_edge>
Set write_edge in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Assign ['flavor'] [<_ast.IfExp object at 0x7ffa5c54b7b8>]
Attribute flavor of edge in context <class '_ast.Load'>
Resolve edge.flavor in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Call self.write
Attribute id_map of self in context <class '_ast.Load'>
Resolve self.id_map in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr id_map of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.id_map> (target obj <Node class:pyan.writers.TgfWriter> known but target attr id_map not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.id_map> (target obj <Node class:pyan.writers.TgfWriter> known but target attr id_map not resolved; maybe fwd ref or unanalyzed import)
Attribute source of edge in context <class '_ast.Load'>
Resolve edge.source in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Resolved to attr source of <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
Attribute id_map of self in context <class '_ast.Load'>
Resolve self.id_map in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr id_map of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.id_map> (target obj <Node class:pyan.writers.TgfWriter> known but target attr id_map not resolved; maybe fwd ref or unanalyzed import)
Attribute target of edge in context <class '_ast.Load'>
Resolve edge.target in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to Name <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr write of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write> (target obj <Node class:pyan.writers.TgfWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write> (target obj <Node class:pyan.writers.TgfWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
ClassDef DotWriter
Def from <Node module:pyan.writers> to Class <Node class:pyan.writers.DotWriter>
Set DotWriter in <Scope: module > to <Node class:pyan.writers.DotWriter>
Name Writer in context <class '_ast.Load'>
Get Writer in <Scope: class DotWriter>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Use from <Node class:pyan.writers.DotWriter> to Name <Node class:pyan.writers.Writer>
New edge added for Use from <Node class:pyan.writers.DotWriter> to Name <Node class:pyan.writers.Writer>
FunctionDef __init__
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.__init__>
Set __init__ in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call Writer.__init__
Name self in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.DotWriter>
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name tabstop in context <class '_ast.Load'>
Get tabstop in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Attribute __init__ of Writer in context <class '_ast.Load'>
Resolve Writer.__init__ in context <class '_ast.Load'>
Get Writer in <Scope: function __init__>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Resolved to attr __init__ of <Node class:pyan.writers.Writer>
getattr __init__ on Writer returns <Node method:pyan.writers.Writer.__init__>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
New edge added for Use from <Node method:pyan.writers.DotWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
Assign ['options'] [<_ast.BoolOp object at 0x7ffa5c54e438>]
Name options in context <class '_ast.Load'>
Get options in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name options in context <class '_ast.Store'>
Set options in <Scope: function __init__> to <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Attribute grouped of graph in context <class '_ast.Load'>
Resolve graph.grouped in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Resolved to attr grouped of <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
AugAssign ['options'] <class '_ast.Add'> [<_ast.Str object at 0x7ffa5c54e630>]
Name options in context <class '_ast.Store'>
Set options in <Scope: function __init__>: value None is not a Node
Assign ['self.options'] [<_ast.Call object at 0x7ffa5c54e710>]
Call <_ast.Str object at 0x7ffa5c54e780>.join
Name options in context <class '_ast.Load'>
Get options in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Attribute join of <_ast.Str object at 0x7ffa5c54e780> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x7ffa5c54e780>.join in context <class '_ast.Load'>
Resolved to attr join of <Node class:Str>
getattr join on <_ast.Str object at 0x7ffa5c54e780> returns <Node attribute:Str.join>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:Str.join>
New edge added for Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:Str.join>
Attribute options of self in context <class '_ast.Store'>
Resolve self.options in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.DotWriter>
Resolved to attr options of <Node class:pyan.writers.DotWriter>
setattr options on self to <Node attribute:Str.join>
Assign ['self.grouped'] ['graph.grouped']
Attribute grouped of graph in context <class '_ast.Load'>
Resolve graph.grouped in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Resolved to attr grouped of <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped of self in context <class '_ast.Store'>
Resolve self.grouped in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.DotWriter>
Resolved to attr grouped of <Node class:pyan.writers.DotWriter>
setattr grouped on self to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped>
FunctionDef start_graph
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.start_graph>
Set start_graph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.start_graph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute options of self in context <class '_ast.Load'>
Resolve self.options in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr options of <Node class:pyan.writers.DotWriter>
getattr options on self returns <Node attribute:Str.join>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:Str.join>
New edge added for Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:Str.join>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr indent of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.indent> (target obj <Node class:pyan.writers.DotWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.indent> (target obj <Node class:pyan.writers.DotWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
FunctionDef start_subgraph
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.start_subgraph>
Set start_subgraph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.start_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr log of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.log> (target obj <Node class:pyan.writers.DotWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.log> (target obj <Node class:pyan.writers.DotWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of graph in context <class '_ast.Load'>
Resolve graph.id in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr indent of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.indent> (target obj <Node class:pyan.writers.DotWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.indent> (target obj <Node class:pyan.writers.DotWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef finish_subgraph
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.finish_subgraph>
Set finish_subgraph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.finish_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr log of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.log> (target obj <Node class:pyan.writers.DotWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.log> (target obj <Node class:pyan.writers.DotWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr dedent of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.dedent> (target obj <Node class:pyan.writers.DotWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.dedent> (target obj <Node class:pyan.writers.DotWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_node
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.write_node>
Set write_node in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.log
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.DotWriter>
Resolved to attr log of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.log> (target obj <Node class:pyan.writers.DotWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.log> (target obj <Node class:pyan.writers.DotWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.id> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.id> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute fill_color of node in context <class '_ast.Load'>
Resolve node.fill_color in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr fill_color of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.fill_color> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr fill_color not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.fill_color> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr fill_color not resolved; maybe fwd ref or unanalyzed import)
Attribute text_color of node in context <class '_ast.Load'>
Resolve node.text_color in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr text_color of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.text_color> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr text_color not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.text_color> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr text_color not resolved; maybe fwd ref or unanalyzed import)
Attribute group of node in context <class '_ast.Load'>
Resolve node.group in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr group of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.group> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr group not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.group> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr group not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_edge
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.write_edge>
Set write_edge in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Assign ['source'] ['edge.source']
Attribute source of edge in context <class '_ast.Load'>
Resolve edge.source in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr source of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
Name source in context <class '_ast.Store'>
Set source in <Scope: function write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Assign ['target'] ['edge.target']
Attribute target of edge in context <class '_ast.Load'>
Resolve edge.target in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name target in context <class '_ast.Store'>
Set target in <Scope: function write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Assign ['color'] ['edge.color']
Attribute color of edge in context <class '_ast.Load'>
Resolve edge.color in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr color of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
Name color in context <class '_ast.Store'>
Set color in <Scope: function write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Attribute flavor of edge in context <class '_ast.Load'>
Resolve edge.flavor in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of source in context <class '_ast.Load'>
Resolve source.id in context <class '_ast.Load'>
Get source in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of target in context <class '_ast.Load'>
Resolve target.id in context <class '_ast.Load'>
Get target in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name color in context <class '_ast.Load'>
Get color in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Use from <Node method:pyan.writers.DotWriter.write_edge> to Name <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of source in context <class '_ast.Load'>
Resolve source.id in context <class '_ast.Load'>
Get source in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of target in context <class '_ast.Load'>
Resolve target.id in context <class '_ast.Load'>
Get target in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name color in context <class '_ast.Load'>
Get color in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Use from <Node method:pyan.writers.DotWriter.write_edge> to Name <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef finish_graph
Def from <Node class:pyan.writers.DotWriter> to Function <Node method:pyan.writers.DotWriter.finish_graph>
Set finish_graph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.finish_graph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
Use from <Node method:pyan.writers.DotWriter.finish_graph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_graph> to <Node attribute:pyan.writers.DotWriter.write> (target obj <Node class:pyan.writers.DotWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
ClassDef YedWriter
Def from <Node module:pyan.writers> to Class <Node class:pyan.writers.YedWriter>
Set YedWriter in <Scope: module > to <Node class:pyan.writers.YedWriter>
Name Writer in context <class '_ast.Load'>
Get Writer in <Scope: class YedWriter>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Use from <Node class:pyan.writers.YedWriter> to Name <Node class:pyan.writers.Writer>
New edge added for Use from <Node class:pyan.writers.YedWriter> to Name <Node class:pyan.writers.Writer>
FunctionDef __init__
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.__init__>
Set __init__ in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call Writer.__init__
Name self in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.YedWriter>
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
New edge added for Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Name tabstop in context <class '_ast.Load'>
Get tabstop in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Attribute __init__ of Writer in context <class '_ast.Load'>
Resolve Writer.__init__ in context <class '_ast.Load'>
Get Writer in <Scope: function __init__>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Resolved to attr __init__ of <Node class:pyan.writers.Writer>
getattr __init__ on Writer returns <Node method:pyan.writers.Writer.__init__>
Use from <Node method:pyan.writers.YedWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
New edge added for Use from <Node method:pyan.writers.YedWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
Assign ['self.grouped'] ['graph.grouped']
Attribute grouped of graph in context <class '_ast.Load'>
Resolve graph.grouped in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Resolved to attr grouped of <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to <Node attribute:pyan.writers.YedWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.__init__> to <Node attribute:pyan.writers.YedWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped of self in context <class '_ast.Store'>
Resolve self.grouped in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.YedWriter>
Resolved to attr grouped of <Node class:pyan.writers.YedWriter>
setattr grouped on self to <Node attribute:pyan.writers.YedWriter.__init__.^^^argument^^^.grouped>
Assign ['self.indent_level'] [<_ast.Num object at 0x7ffa5c55b358>]
Attribute indent_level of self in context <class '_ast.Store'>
Assign ['self.edge_id'] [<_ast.Num object at 0x7ffa5c55b438>]
Attribute edge_id of self in context <class '_ast.Store'>
FunctionDef start_graph
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.start_graph>
Set start_graph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.start_graph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
FunctionDef start_subgraph
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.start_subgraph>
Set start_subgraph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.start_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr log of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.log> (target obj <Node class:pyan.writers.YedWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.log> (target obj <Node class:pyan.writers.YedWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of graph in context <class '_ast.Load'>
Resolve graph.id in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of graph in context <class '_ast.Load'>
Resolve graph.id in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
FunctionDef finish_subgraph
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.finish_subgraph>
Set finish_subgraph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.finish_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr log of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.log> (target obj <Node class:pyan.writers.YedWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.log> (target obj <Node class:pyan.writers.YedWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_node
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.write_node>
Set write_node in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.log
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr log of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.log> (target obj <Node class:pyan.writers.YedWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.log> (target obj <Node class:pyan.writers.YedWriter> known but target attr log not resolved; maybe fwd ref or unanalyzed import)
Assign ['width'] [<_ast.BinOp object at 0x7ffa5c431278>]
Call len
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function write_node>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.YedWriter.write_node> to Name <Node ???:*.len>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to Name <Node ???:*.len>
Name width in context <class '_ast.Store'>
Set width in <Scope: function write_node> to <Node ???:*.len>
Call self.write
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Name width in context <class '_ast.Load'>
Get width in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ???:*.len>
Use from <Node method:pyan.writers.YedWriter.write_node> to Name <Node ???:*.len>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute fill_color of node in context <class '_ast.Load'>
Resolve node.fill_color in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr fill_color of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.fill_color> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr fill_color not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.fill_color> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr fill_color not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_edge
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.write_edge>
Set write_edge in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
AugAssign ['self.edge_id'] <class '_ast.Add'> [<_ast.Num object at 0x7ffa5c424a20>]
Attribute edge_id of self in context <class '_ast.Store'>
Assign ['source'] ['edge.source']
Attribute source of edge in context <class '_ast.Load'>
Resolve edge.source in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr source of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
Name source in context <class '_ast.Store'>
Set source in <Scope: function write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source>
Assign ['target'] ['edge.target']
Attribute target of edge in context <class '_ast.Load'>
Resolve edge.target in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name target in context <class '_ast.Store'>
Set target in <Scope: function write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target>
Call self.write
Attribute edge_id of self in context <class '_ast.Load'>
Resolve self.edge_id in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr edge_id of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.edge_id> (target obj <Node class:pyan.writers.YedWriter> known but target attr edge_id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.edge_id> (target obj <Node class:pyan.writers.YedWriter> known but target attr edge_id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of source in context <class '_ast.Load'>
Resolve source.id in context <class '_ast.Load'>
Get source in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source>
Resolved to attr id of <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of target in context <class '_ast.Load'>
Resolve target.id in context <class '_ast.Load'>
Get target in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target>
Resolved to attr id of <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.indent> (target obj <Node class:pyan.writers.YedWriter> known but target attr indent not resolved; maybe fwd ref or unanalyzed import)
Attribute flavor of edge in context <class '_ast.Load'>
Resolve edge.flavor in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute color of edge in context <class '_ast.Load'>
Resolve edge.color in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr color of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute color of edge in context <class '_ast.Load'>
Resolve edge.color in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr color of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef finish_graph
Def from <Node class:pyan.writers.YedWriter> to Function <Node method:pyan.writers.YedWriter.finish_graph>
Set finish_graph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.finish_graph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.dedent> (target obj <Node class:pyan.writers.YedWriter> known but target attr dedent not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.write> (target obj <Node class:pyan.writers.YedWriter> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Resolving base classes
Resolve ast.NodeVisitor in context <class '_ast.Load'>
Get ast in <Scope: module >, found in <Scope: module >, value <Node module:ast>
Resolved to attr NodeVisitor of <Node module:ast>
Get Exception in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Get Exception in <Scope: module >: no Node value (or name not in scope)
Get Enum in <Scope: module >, found in <Scope: module >, value <Node import:enum.Enum>
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
Get Writer in <Scope: module >, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Get Writer in <Scope: module >, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Get Writer in <Scope: module >, found in <Scope: module >, value <Node class:pyan.writers.Writer>
All base classes (non-recursive, local level only): {<Node class:pyan.analyzer.CallGraphVisitor>: [], <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>: [], <Node class:pyan.anutils.UnresolvedSuperCallError>: [], <Node class:pyan.anutils.Scope>: [], <Node class:pyan.anutils.ExecuteInInnerScope>: [], <Node class:pyan.node.Flavor>: [<Node import:enum.Enum>], <Node class:pyan.node.Node>: [], <Node class:pyan.visgraph.Colorizer>: [], <Node class:pyan.visgraph.VisualNode>: [], <Node class:pyan.visgraph.VisualEdge>: [], <Node class:pyan.visgraph.VisualGraph>: [], <Node class:pyan.writers.Writer>: [], <Node class:pyan.writers.TgfWriter>: [<Node class:pyan.writers.Writer>], <Node class:pyan.writers.DotWriter>: [<Node class:pyan.writers.Writer>], <Node class:pyan.writers.YedWriter>: [<Node class:pyan.writers.Writer>]}
Resolving method resolution order (MRO) for all analyzed classes
MRO: analyzing class <Node class:pyan.analyzer.CallGraphVisitor>
MRO: C3 linearizing <Node class:pyan.analyzer.CallGraphVisitor>
MRO: C3 linearized <Node class:pyan.analyzer.CallGraphVisitor>, result [<Node class:pyan.analyzer.CallGraphVisitor>]
MRO: analyzing class <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
MRO: C3 linearizing <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
MRO: C3 linearized <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>, result [<Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>]
MRO: analyzing class <Node class:pyan.anutils.UnresolvedSuperCallError>
MRO: C3 linearizing <Node class:pyan.anutils.UnresolvedSuperCallError>
MRO: C3 linearized <Node class:pyan.anutils.UnresolvedSuperCallError>, result [<Node class:pyan.anutils.UnresolvedSuperCallError>]
MRO: analyzing class <Node class:pyan.anutils.Scope>
MRO: C3 linearizing <Node class:pyan.anutils.Scope>
MRO: C3 linearized <Node class:pyan.anutils.Scope>, result [<Node class:pyan.anutils.Scope>]
MRO: analyzing class <Node class:pyan.anutils.ExecuteInInnerScope>
MRO: C3 linearizing <Node class:pyan.anutils.ExecuteInInnerScope>
MRO: C3 linearized <Node class:pyan.anutils.ExecuteInInnerScope>, result [<Node class:pyan.anutils.ExecuteInInnerScope>]
MRO: analyzing class <Node class:pyan.node.Flavor>
MRO: C3 linearizing <Node class:pyan.node.Flavor>
MRO: C3 linearizing <Node import:enum.Enum>
MRO: C3 linearized <Node import:enum.Enum>, result [<Node import:enum.Enum>]
MRO: parents of <Node class:pyan.node.Flavor>: [<Node import:enum.Enum>]
MRO: C3 merging [[<Node import:enum.Enum>], [<Node import:enum.Enum>]]
MRO: C3 merge: out: [], lists: [[<Node import:enum.Enum>], [<Node import:enum.Enum>]]
MRO: C3 merge: heads: [<Node import:enum.Enum>, <Node import:enum.Enum>], tails: [[], []]
MRO: C3 merge: chose head <Node import:enum.Enum>
MRO: C3 merge: out: [<Node import:enum.Enum>], lists: [[], []]
MRO: C3 linearized <Node class:pyan.node.Flavor>, result [<Node class:pyan.node.Flavor>, <Node import:enum.Enum>]
MRO: analyzing class <Node class:pyan.node.Node>
MRO: C3 linearizing <Node class:pyan.node.Node>
MRO: C3 linearized <Node class:pyan.node.Node>, result [<Node class:pyan.node.Node>]
MRO: analyzing class <Node class:pyan.visgraph.Colorizer>
MRO: C3 linearizing <Node class:pyan.visgraph.Colorizer>
MRO: C3 linearized <Node class:pyan.visgraph.Colorizer>, result [<Node class:pyan.visgraph.Colorizer>]
MRO: analyzing class <Node class:pyan.visgraph.VisualNode>
MRO: C3 linearizing <Node class:pyan.visgraph.VisualNode>
MRO: C3 linearized <Node class:pyan.visgraph.VisualNode>, result [<Node class:pyan.visgraph.VisualNode>]
MRO: analyzing class <Node class:pyan.visgraph.VisualEdge>
MRO: C3 linearizing <Node class:pyan.visgraph.VisualEdge>
MRO: C3 linearized <Node class:pyan.visgraph.VisualEdge>, result [<Node class:pyan.visgraph.VisualEdge>]
MRO: analyzing class <Node class:pyan.visgraph.VisualGraph>
MRO: C3 linearizing <Node class:pyan.visgraph.VisualGraph>
MRO: C3 linearized <Node class:pyan.visgraph.VisualGraph>, result [<Node class:pyan.visgraph.VisualGraph>]
MRO: analyzing class <Node class:pyan.writers.Writer>
MRO: C3 linearizing <Node class:pyan.writers.Writer>
MRO: C3 linearized <Node class:pyan.writers.Writer>, result [<Node class:pyan.writers.Writer>]
MRO: analyzing class <Node class:pyan.writers.TgfWriter>
MRO: C3 linearizing <Node class:pyan.writers.TgfWriter>
MRO: C3 linearizing <Node class:pyan.writers.Writer>
MRO: C3 linearized <Node class:pyan.writers.Writer>, result [<Node class:pyan.writers.Writer>]
MRO: parents of <Node class:pyan.writers.TgfWriter>: [<Node class:pyan.writers.Writer>]
MRO: C3 merging [[<Node class:pyan.writers.Writer>], [<Node class:pyan.writers.Writer>]]
MRO: C3 merge: out: [], lists: [[<Node class:pyan.writers.Writer>], [<Node class:pyan.writers.Writer>]]
MRO: C3 merge: heads: [<Node class:pyan.writers.Writer>, <Node class:pyan.writers.Writer>], tails: [[], []]
MRO: C3 merge: chose head <Node class:pyan.writers.Writer>
MRO: C3 merge: out: [<Node class:pyan.writers.Writer>], lists: [[], []]
MRO: C3 linearized <Node class:pyan.writers.TgfWriter>, result [<Node class:pyan.writers.TgfWriter>, <Node class:pyan.writers.Writer>]
MRO: analyzing class <Node class:pyan.writers.DotWriter>
MRO: C3 linearizing <Node class:pyan.writers.DotWriter>
MRO: C3 linearizing <Node class:pyan.writers.Writer>
MRO: C3 linearized <Node class:pyan.writers.Writer>, result [<Node class:pyan.writers.Writer>]
MRO: parents of <Node class:pyan.writers.DotWriter>: [<Node class:pyan.writers.Writer>]
MRO: C3 merging [[<Node class:pyan.writers.Writer>], [<Node class:pyan.writers.Writer>]]
MRO: C3 merge: out: [], lists: [[<Node class:pyan.writers.Writer>], [<Node class:pyan.writers.Writer>]]
MRO: C3 merge: heads: [<Node class:pyan.writers.Writer>, <Node class:pyan.writers.Writer>], tails: [[], []]
MRO: C3 merge: chose head <Node class:pyan.writers.Writer>
MRO: C3 merge: out: [<Node class:pyan.writers.Writer>], lists: [[], []]
MRO: C3 linearized <Node class:pyan.writers.DotWriter>, result [<Node class:pyan.writers.DotWriter>, <Node class:pyan.writers.Writer>]
MRO: analyzing class <Node class:pyan.writers.YedWriter>
MRO: C3 linearizing <Node class:pyan.writers.YedWriter>
MRO: C3 linearizing <Node class:pyan.writers.Writer>
MRO: C3 linearized <Node class:pyan.writers.Writer>, result [<Node class:pyan.writers.Writer>]
MRO: parents of <Node class:pyan.writers.YedWriter>: [<Node class:pyan.writers.Writer>]
MRO: C3 merging [[<Node class:pyan.writers.Writer>], [<Node class:pyan.writers.Writer>]]
MRO: C3 merge: out: [], lists: [[<Node class:pyan.writers.Writer>], [<Node class:pyan.writers.Writer>]]
MRO: C3 merge: heads: [<Node class:pyan.writers.Writer>, <Node class:pyan.writers.Writer>], tails: [[], []]
MRO: C3 merge: chose head <Node class:pyan.writers.Writer>
MRO: C3 merge: out: [<Node class:pyan.writers.Writer>], lists: [[], []]
MRO: C3 linearized <Node class:pyan.writers.YedWriter>, result [<Node class:pyan.writers.YedWriter>, <Node class:pyan.writers.Writer>]
Method resolution order (MRO) for all analyzed classes: {<Node class:pyan.analyzer.CallGraphVisitor>: [<Node class:pyan.analyzer.CallGraphVisitor>], <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>: [<Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>], <Node class:pyan.anutils.UnresolvedSuperCallError>: [<Node class:pyan.anutils.UnresolvedSuperCallError>], <Node class:pyan.anutils.Scope>: [<Node class:pyan.anutils.Scope>], <Node class:pyan.anutils.ExecuteInInnerScope>: [<Node class:pyan.anutils.ExecuteInInnerScope>], <Node class:pyan.node.Flavor>: [<Node class:pyan.node.Flavor>, <Node import:enum.Enum>], <Node class:pyan.node.Node>: [<Node class:pyan.node.Node>], <Node class:pyan.visgraph.Colorizer>: [<Node class:pyan.visgraph.Colorizer>], <Node class:pyan.visgraph.VisualNode>: [<Node class:pyan.visgraph.VisualNode>], <Node class:pyan.visgraph.VisualEdge>: [<Node class:pyan.visgraph.VisualEdge>], <Node class:pyan.visgraph.VisualGraph>: [<Node class:pyan.visgraph.VisualGraph>], <Node class:pyan.writers.Writer>: [<Node class:pyan.writers.Writer>], <Node class:pyan.writers.TgfWriter>: [<Node class:pyan.writers.TgfWriter>, <Node class:pyan.writers.Writer>], <Node class:pyan.writers.DotWriter>: [<Node class:pyan.writers.DotWriter>, <Node class:pyan.writers.Writer>], <Node class:pyan.writers.YedWriter>: [<Node class:pyan.writers.YedWriter>, <Node class:pyan.writers.Writer>]}
========== pass 2, file 'pyan/analyzer.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.analyzer> to Import <Node module:logging>
Import ['ast']
Set ast in <Scope: module > to <Node module:ast>
Use from <Node module:pyan.analyzer> to Import <Node module:ast>
Import ['symtable']
Set symtable in <Scope: module > to <Node module:symtable>
Use from <Node module:pyan.analyzer> to Import <Node module:symtable>
ImportFrom: from node import ['Node', 'Flavor']
Use from <Node module:pyan.analyzer> to ImportFrom <Node module:node>
Set Node in <Scope: module > to <Node class:pyan.node.Node>
From setting name Node to <Node class:pyan.node.Node>
Set Flavor in <Scope: module > to <Node class:pyan.node.Flavor>
From setting name Flavor to <Node class:pyan.node.Flavor>
ImportFrom: from anutils import ['tail', 'get_module_name', 'format_alias', 'get_ast_node_name', 'sanitize_exprs', 'resolve_method_resolution_order', 'Scope', 'ExecuteInInnerScope', 'UnresolvedSuperCallError']
Use from <Node module:pyan.analyzer> to ImportFrom <Node module:anutils>
Set tail in <Scope: module > to <Node function:pyan.anutils.tail>
From setting name tail to <Node function:pyan.anutils.tail>
Set get_module_name in <Scope: module > to <Node function:pyan.anutils.get_module_name>
From setting name get_module_name to <Node function:pyan.anutils.get_module_name>
Set format_alias in <Scope: module > to <Node function:pyan.anutils.format_alias>
From setting name format_alias to <Node function:pyan.anutils.format_alias>
Set get_ast_node_name in <Scope: module > to <Node function:pyan.anutils.get_ast_node_name>
From setting name get_ast_node_name to <Node function:pyan.anutils.get_ast_node_name>
Set sanitize_exprs in <Scope: module > to <Node function:pyan.anutils.sanitize_exprs>
From setting name sanitize_exprs to <Node function:pyan.anutils.sanitize_exprs>
Set resolve_method_resolution_order in <Scope: module > to <Node function:pyan.anutils.resolve_method_resolution_order>
From setting name resolve_method_resolution_order to <Node function:pyan.anutils.resolve_method_resolution_order>
Set Scope in <Scope: module > to <Node class:pyan.anutils.Scope>
From setting name Scope to <Node class:pyan.anutils.Scope>
Set ExecuteInInnerScope in <Scope: module > to <Node class:pyan.anutils.ExecuteInInnerScope>
From setting name ExecuteInInnerScope to <Node class:pyan.anutils.ExecuteInInnerScope>
Set UnresolvedSuperCallError in <Scope: module > to <Node class:pyan.anutils.UnresolvedSuperCallError>
From setting name UnresolvedSuperCallError to <Node class:pyan.anutils.UnresolvedSuperCallError>
ClassDef CallGraphVisitor
Set CallGraphVisitor in <Scope: module > to <Node class:pyan.analyzer.CallGraphVisitor>
Attribute NodeVisitor of ast in context <class '_ast.Load'>
Resolve ast.NodeVisitor in context <class '_ast.Load'>
Get ast in <Scope: class CallGraphVisitor>, found in <Scope: module >, value <Node module:ast>
Resolved to attr NodeVisitor of <Node module:ast>
Use from <Node class:pyan.analyzer.CallGraphVisitor> to <Node attribute:ast.NodeVisitor> (target obj <Node module:ast> known but target attr NodeVisitor not resolved; maybe fwd ref or unanalyzed import)
FunctionDef __init__
Set __init__ in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.__init__>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['self.logger'] [<_ast.BoolOp object at 0x7ffa5c452ba8>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function __init__>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Store'>
Resolve self.logger in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
setattr logger on self to <Node attribute:logging.getLogger>
Assign ['self.module_names'] [<_ast.Dict object at 0x7ffa5c452da0>]
Attribute module_names of self in context <class '_ast.Store'>
Assign ['self.module_to_filename'] [<_ast.Dict object at 0x7ffa5c452e80>]
Attribute module_to_filename of self in context <class '_ast.Store'>
For-loop
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function __init__> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Assign ['mod_name'] [<_ast.Call object at 0x7ffa5c452fd0>]
Call get_module_name
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function __init__>, found in <Scope: module >, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node function:pyan.anutils.get_module_name>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function __init__> to <Node function:pyan.anutils.get_module_name>
Assign ['short_name'] [<_ast.Subscript object at 0x7ffa5c442128>]
Call mod_name.rsplit
Attribute rsplit of mod_name in context <class '_ast.Load'>
Resolve mod_name.rsplit in context <class '_ast.Load'>
Get mod_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node function:pyan.anutils.get_module_name>
Resolved to attr rsplit of <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.anutils.get_module_name.rsplit> (target obj <Node function:pyan.anutils.get_module_name> known but target attr rsplit not resolved; maybe fwd ref or unanalyzed import)
Name short_name in context <class '_ast.Store'>
Set short_name in <Scope: function __init__> to <Node attribute:pyan.anutils.get_module_name.rsplit>
Assign [<_ast.Subscript object at 0x7ffa5c442358>] ['mod_name']
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node function:pyan.anutils.get_module_name>
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name short_name in context <class '_ast.Load'>
Get short_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:pyan.anutils.get_module_name.rsplit>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node attribute:pyan.anutils.get_module_name.rsplit>
Assign [<_ast.Subscript object at 0x7ffa5c4424e0>] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute module_to_filename of self in context <class '_ast.Load'>
Resolve self.module_to_filename in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_to_filename of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node ???:*.module_to_filename> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node ???:*.module_to_filename> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node function:pyan.anutils.get_module_name>
Assign ['self.filenames'] ['filenames']
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute filenames of self in context <class '_ast.Store'>
Resolve self.filenames in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
setattr filenames on self to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Assign ['self.defines_edges'] [<_ast.Dict object at 0x7ffa5c4427b8>]
Attribute defines_edges of self in context <class '_ast.Store'>
Assign ['self.uses_edges'] [<_ast.Dict object at 0x7ffa5c442898>]
Attribute uses_edges of self in context <class '_ast.Store'>
Assign ['self.nodes'] [<_ast.Dict object at 0x7ffa5c442978>]
Attribute nodes of self in context <class '_ast.Store'>
Assign ['self.scopes'] [<_ast.Dict object at 0x7ffa5c442a58>]
Attribute scopes of self in context <class '_ast.Store'>
Assign ['self.class_base_ast_nodes'] [<_ast.Dict object at 0x7ffa5c442b38>]
Attribute class_base_ast_nodes of self in context <class '_ast.Store'>
Assign ['self.class_base_nodes'] [<_ast.Dict object at 0x7ffa5c442c18>]
Attribute class_base_nodes of self in context <class '_ast.Store'>
Assign ['self.mro'] [<_ast.Dict object at 0x7ffa5c442cf8>]
Attribute mro of self in context <class '_ast.Store'>
Assign ['self.module_name'] [<_ast.NameConstant object at 0x7ffa5c442dd8>]
Attribute module_name of self in context <class '_ast.Store'>
Assign ['self.filename'] [<_ast.NameConstant object at 0x7ffa5c442eb8>]
Attribute filename of self in context <class '_ast.Store'>
Assign ['self.name_stack'] []
Attribute name_stack of self in context <class '_ast.Store'>
Assign ['self.scope_stack'] []
Attribute scope_stack of self in context <class '_ast.Store'>
Assign ['self.class_stack'] []
Attribute class_stack of self in context <class '_ast.Store'>
Assign ['self.context_stack'] []
Attribute context_stack of self in context <class '_ast.Store'>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c43c358>]
Attribute last_value of self in context <class '_ast.Store'>
Call self.process
Attribute process of self in context <class '_ast.Load'>
Resolve self.process in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr process of <Node class:pyan.analyzer.CallGraphVisitor>
getattr process on self returns <Node method:pyan.analyzer.CallGraphVisitor.process>
Use from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node method:pyan.analyzer.CallGraphVisitor.process>
FunctionDef process
Set process in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.process>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
For-loop
Call range
Name range in context <class '_ast.Load'>
Get range in <Scope: function process>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
Name pas in context <class '_ast.Store'>
Set pas in <Scope: function process> to <Node ???:*.range>
For-loop
Attribute filenames of self in context <class '_ast.Load'>
Resolve self.filenames in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filenames on self returns <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function process> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Call self.logger.info
Name pas in context <class '_ast.Load'>
Get pas in <Scope: function process>, found in <Scope: function process>, value <Node ???:*.range>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.process_one
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Attribute process_one of self in context <class '_ast.Load'>
Resolve self.process_one in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr process_one of <Node class:pyan.analyzer.CallGraphVisitor>
getattr process_one on self returns <Node method:pyan.analyzer.CallGraphVisitor.process_one>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node method:pyan.analyzer.CallGraphVisitor.process_one>
Name pas in context <class '_ast.Load'>
Get pas in <Scope: function process>, found in <Scope: function process>, value <Node ???:*.range>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to Name <Node ???:*.range>
Call self.resolve_base_classes
Attribute resolve_base_classes of self in context <class '_ast.Load'>
Resolve self.resolve_base_classes in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_base_classes of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_base_classes on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes>
Call self.postprocess
Attribute postprocess of self in context <class '_ast.Load'>
Resolve self.postprocess in context <class '_ast.Load'>
Get self in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr postprocess of <Node class:pyan.analyzer.CallGraphVisitor>
getattr postprocess on self returns <Node method:pyan.analyzer.CallGraphVisitor.postprocess>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node method:pyan.analyzer.CallGraphVisitor.postprocess>
FunctionDef process_one
Set process_one in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.process_one>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute filenames of self in context <class '_ast.Load'>
Resolve self.filenames in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filenames on self returns <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Call ValueError
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute filenames of self in context <class '_ast.Load'>
Resolve self.filenames in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filenames of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filenames on self returns <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function process_one>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.ValueError>
With (context manager)
Call open
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function process_one>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.open>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to With <Node ???:*.open>
Call open
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function process_one>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.open>
Name f in context <class '_ast.Store'>
Set f in <Scope: function process_one> to <Node ???:*.open>
Assign ['content'] [<_ast.Call object at 0x7ffa5c4523c8>]
Call f.read
Attribute read of f in context <class '_ast.Load'>
Resolve f.read in context <class '_ast.Load'>
Get f in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ???:*.open>
Resolved to attr read of <Node ???:*.open>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ???:*.read> (target obj f not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name content in context <class '_ast.Store'>
Set content in <Scope: function process_one> to <Node ???:*.read>
Assign ['self.filename'] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute filename of self in context <class '_ast.Store'>
Resolve self.filename in context <class '_ast.Store'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
setattr filename on self to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Assign ['self.module_name'] [<_ast.Call object at 0x7ffa5c4520b8>]
Call get_module_name
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function process_one>, found in <Scope: module >, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node function:pyan.anutils.get_module_name>
Attribute module_name of self in context <class '_ast.Store'>
Resolve self.module_name in context <class '_ast.Store'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
setattr module_name on self to <Node function:pyan.anutils.get_module_name>
Call self.analyze_scopes
Name content in context <class '_ast.Load'>
Get content in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ???:*.read>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.read>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute analyze_scopes of self in context <class '_ast.Load'>
Resolve self.analyze_scopes in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_scopes of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_scopes on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes>
Call self.visit
Call ast.parse
Name content in context <class '_ast.Load'>
Get content in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ???:*.read>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ???:*.read>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function process_one>, found in <Scope: function process_one>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute parse of ast in context <class '_ast.Load'>
Resolve ast.parse in context <class '_ast.Load'>
Get ast in <Scope: function process_one>, found in <Scope: module >, value <Node module:ast>
Resolved to attr parse of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:ast.parse> (target obj <Node module:ast> known but target attr parse not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function process_one>, found in <Scope: function process_one>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.module_name'] [<_ast.NameConstant object at 0x7ffa5c43cd30>]
Attribute module_name of self in context <class '_ast.Store'>
Assign ['self.filename'] [<_ast.NameConstant object at 0x7ffa5c43ce10>]
Attribute filename of self in context <class '_ast.Store'>
FunctionDef resolve_base_classes
Set resolve_base_classes in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call len
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.len>
For-loop
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Store'>
Set node in <Scope: function resolve_base_classes> to <Node ???:*.class_base_ast_nodes>
Assign [<_ast.Subscript object at 0x7ffa5c455390>] []
Attribute class_base_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.class_base_ast_nodes>
For-loop
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.class_base_ast_nodes>
Name ast_node in context <class '_ast.Store'>
Set ast_node in <Scope: function resolve_base_classes> to <Node ???:*.class_base_ast_nodes>
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Resolved to attr namespace of <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.class_base_ast_nodes>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
Assign ['baseclass_node'] [<_ast.Call object at 0x7ffa5c455a90>]
Call self.get_value
Attribute id of ast_node in context <class '_ast.Load'>
Resolve ast_node.id in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Resolved to attr id of <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.id> (target obj ast_node not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.id> (target obj ast_node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_value of self in context <class '_ast.Load'>
Resolve self.get_value in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function resolve_base_classes> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.class_base_ast_nodes>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
Assign ['_', 'baseclass_node'] [<_ast.Call object at 0x7ffa5c455dd8>]
Call self.get_attribute
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node ???:*.class_base_ast_nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.class_base_ast_nodes>
Attribute get_attribute of self in context <class '_ast.Load'>
Resolve self.get_attribute in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function resolve_base_classes> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function resolve_base_classes> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Assign ['baseclass_node'] [<_ast.NameConstant object at 0x7ffa5c455f28>]
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function resolve_base_classes>: value None is not a Node
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call isinstance
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node ???:*.isinstance>
Attribute namespace of baseclass_node in context <class '_ast.Load'>
Resolve baseclass_node.namespace in context <class '_ast.Load'>
Get baseclass_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> resolves <Node ???:*.namespace>; removing wildcard
Call <_ast.Subscript object at 0x7ffa5c445390>.append
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute append of <_ast.Subscript object at 0x7ffa5c445390> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c445390>.append in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c445390> in <Scope: function resolve_base_classes>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c445390> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.logger.debug
Attribute class_base_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.mro'] [<_ast.Call object at 0x7ffa5c4458d0>]
Call resolve_method_resolution_order
Attribute class_base_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_nodes in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node ???:*.class_base_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute logger of self in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
getattr logger on self returns <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger>
Name resolve_method_resolution_order in context <class '_ast.Load'>
Get resolve_method_resolution_order in <Scope: function resolve_base_classes>, found in <Scope: module >, value <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to Name <Node function:pyan.anutils.resolve_method_resolution_order>
Attribute mro of self in context <class '_ast.Store'>
Resolve self.mro in context <class '_ast.Store'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
setattr mro on self to <Node function:pyan.anutils.resolve_method_resolution_order>
Call self.logger.debug
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node function:pyan.anutils.resolve_method_resolution_order>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_base_classes>, found in <Scope: function resolve_base_classes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef postprocess
Set postprocess in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.postprocess>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.expand_unknowns
Attribute expand_unknowns of self in context <class '_ast.Load'>
Resolve self.expand_unknowns in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr expand_unknowns of <Node class:pyan.analyzer.CallGraphVisitor>
getattr expand_unknowns on self returns <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns>
Call self.contract_nonexistents
Attribute contract_nonexistents of self in context <class '_ast.Load'>
Resolve self.contract_nonexistents in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr contract_nonexistents of <Node class:pyan.analyzer.CallGraphVisitor>
getattr contract_nonexistents on self returns <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents>
Call self.cull_inherited
Attribute cull_inherited of self in context <class '_ast.Load'>
Resolve self.cull_inherited in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr cull_inherited of <Node class:pyan.analyzer.CallGraphVisitor>
getattr cull_inherited on self returns <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited>
Call self.collapse_inner
Attribute collapse_inner of self in context <class '_ast.Load'>
Resolve self.collapse_inner in context <class '_ast.Load'>
Get self in <Scope: function postprocess>, found in <Scope: function postprocess>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr collapse_inner of <Node class:pyan.analyzer.CallGraphVisitor>
getattr collapse_inner on self returns <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner>
Use from <Node method:pyan.analyzer.CallGraphVisitor.postprocess> to <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner>
FunctionDef visit_Module
Set visit_Module in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Module>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['module_node'] [<_ast.Call object at 0x7ffa5c456390>]
Call self.get_node
Attribute module_name of self in context <class '_ast.Load'>
Resolve self.module_name in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
getattr module_name on self returns <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node function:pyan.anutils.get_module_name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Module>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr MODULE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name module_node in context <class '_ast.Store'>
Set module_node in <Scope: function visit_Module> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.associate_node
Name module_node in context <class '_ast.Load'>
Get module_node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute associate_node of self in context <class '_ast.Load'>
Resolve self.associate_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr associate_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr associate_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Assign ['ns'] ['self.module_name']
Attribute module_name of self in context <class '_ast.Load'>
Resolve self.module_name in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
getattr module_name on self returns <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node function:pyan.anutils.get_module_name>
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_Module> to <Node function:pyan.anutils.get_module_name>
Call self.name_stack.append
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node function:pyan.anutils.get_module_name>
Attribute append of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.append in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node function:pyan.anutils.get_module_name>
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.append
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node function:pyan.anutils.get_module_name>
Attribute append of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.append in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.append> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.generic_visit
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^>
Attribute generic_visit of self in context <class '_ast.Load'>
Resolve self.generic_visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr generic_visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.generic_visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.generic_visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.pop
Attribute pop of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.pop in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.pop
Attribute pop of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.pop in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_Module>, found in <Scope: function visit_Module>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ???:*.pop> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c45b320>]
Attribute last_value of self in context <class '_ast.Store'>
FunctionDef visit_ClassDef
Set visit_ClassDef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c45b6a0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c45b7b8>]
Call from_node.get_name
Attribute get_name of from_node in context <class '_ast.Load'>
Resolve from_node.get_name in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> resolves <Node ???:*.get_name>; removing wildcard
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c45b8d0>]
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Attribute CLASS of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASS in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_ClassDef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr CLASS of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.CLASS> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.CLASS> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_defines_edge of self in context <class '_ast.Load'>
Resolve self.add_defines_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_defines_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_defines_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.associate_node
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute associate_node of self in context <class '_ast.Load'>
Resolve self.associate_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr associate_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr associate_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Call self.set_value
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr set_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Call self.class_stack.append
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute append of self.class_stack in context <class '_ast.Load'>
Resolve self.class_stack.append in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.class_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.append in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['inner_ns'] [<_ast.Call object at 0x7ffa5c45e550>]
Call <_ast.Call object at 0x7ffa5c45e5c0>.get_name
Attribute get_name of <_ast.Call object at 0x7ffa5c45e5c0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c45e5c0>.get_name in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_name of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c45e5c0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c45e5c0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Store'>
Set inner_ns in <Scope: function visit_ClassDef> to <Node ???:*.get_name>
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node ???:*.get_name>
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.append in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c45eac8>] []
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
For-loop
Attribute bases of node in context <class '_ast.Load'>
Resolve node.bases in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr bases of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr bases not resolved; maybe fwd ref or unanalyzed import)
Name b in context <class '_ast.Store'>
Set b in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Call <_ast.Subscript object at 0x7ffa5c45eda0>.append
Name b in context <class '_ast.Load'>
Get b in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Attribute append of <_ast.Subscript object at 0x7ffa5c45eda0> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c45eda0>.append in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c45eda0> in <Scope: function visit_ClassDef>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c45eda0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.visit
Name b in context <class '_ast.Load'>
Get b in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.pop
Attribute pop of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.pop in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.pop
Attribute pop of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.pop in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.class_stack.pop
Attribute pop of self.class_stack in context <class '_ast.Load'>
Resolve self.class_stack.pop in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_ClassDef>, found in <Scope: function visit_ClassDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ???:*.pop> (target obj self.class_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef visit_FunctionDef
Set visit_FunctionDef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['self_name', 'flavor'] [<_ast.Call object at 0x7ffa5c224a58>]
Call self.analyze_functiondef
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Attribute analyze_functiondef of self in context <class '_ast.Load'>
Resolve self.analyze_functiondef in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_functiondef of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_functiondef on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Name self_name in context <class '_ast.Store'>
Set self_name in <Scope: function visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c224ba8>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c224cc0>]
Call from_node.get_name
Attribute get_name of from_node in context <class '_ast.Load'>
Resolve from_node.get_name in context <class '_ast.Load'>
Get from_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> resolves <Node ???:*.get_name>; removing wildcard
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c224dd8>]
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_defines_edge of self in context <class '_ast.Load'>
Resolve self.add_defines_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_defines_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_defines_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.associate_node
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Attribute associate_node of self in context <class '_ast.Load'>
Resolve self.associate_node in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr associate_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr associate_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Call self.set_value
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr set_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Call self.name_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.append in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['inner_ns'] [<_ast.Call object at 0x7ffa5c22a8d0>]
Call <_ast.Call object at 0x7ffa5c22a940>.get_name
Attribute get_name of <_ast.Call object at 0x7ffa5c22a940> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c22a940>.get_name in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_name of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c22a940> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c22a940> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Store'>
Set inner_ns in <Scope: function visit_FunctionDef> to <Node ???:*.get_name>
Call self.scope_stack.append
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.get_name>
Attribute append of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.append in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.append
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.append in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.append> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c22ae80>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.get_name>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function visit_FunctionDef> to <Node ???:*.get_name>
Assign ['nonsense_node'] [<_ast.Call object at 0x7ffa5c22d048>]
Call self.get_node
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.get_name>
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name nonsense_node in context <class '_ast.Store'>
Set nonsense_node in <Scope: function visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['all_args'] ['node.args']
Attribute args of node in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name all_args in context <class '_ast.Store'>
Set all_args in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
For-loop
Attribute args of all_args in context <class '_ast.Load'>
Resolve all_args.args in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr args of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name a in context <class '_ast.Store'>
Set a in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args>
Assign [<_ast.Subscript object at 0x7ffa5c22d390>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute arg of a in context <class '_ast.Load'>
Resolve a.arg in context <class '_ast.Load'>
Get a in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args>
Resolved to attr arg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args.arg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> known but target attr arg not resolved; maybe fwd ref or unanalyzed import)
Attribute vararg of all_args in context <class '_ast.Load'>
Resolve all_args.vararg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr vararg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.vararg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr vararg not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c22d668>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute vararg of all_args in context <class '_ast.Load'>
Resolve all_args.vararg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr vararg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.vararg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr vararg not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute kwonlyargs of all_args in context <class '_ast.Load'>
Resolve all_args.kwonlyargs in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr kwonlyargs of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwonlyargs not resolved; maybe fwd ref or unanalyzed import)
Name a in context <class '_ast.Store'>
Set a in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs>
Assign [<_ast.Subscript object at 0x7ffa5c22d908>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute arg of a in context <class '_ast.Load'>
Resolve a.arg in context <class '_ast.Load'>
Get a in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs>
Resolved to attr arg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs.arg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> known but target attr arg not resolved; maybe fwd ref or unanalyzed import)
Attribute kwarg of all_args in context <class '_ast.Load'>
Resolve all_args.kwarg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr kwarg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwarg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwarg not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c22dbe0>] ['nonsense_node']
Name nonsense_node in context <class '_ast.Load'>
Get nonsense_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.get_name>
Resolved to attr defs of <Node ???:*.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute kwarg of all_args in context <class '_ast.Load'>
Resolve all_args.kwarg in context <class '_ast.Load'>
Get all_args in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Resolved to attr kwarg of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwarg> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> known but target attr kwarg not resolved; maybe fwd ref or unanalyzed import)
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Assign ['class_node'] [<_ast.Call object at 0x7ffa5c22deb8>]
Call self.get_current_class
Attribute get_current_class of self in context <class '_ast.Load'>
Resolve self.get_current_class in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_current_class of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_current_class on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name class_node in context <class '_ast.Store'>
Set class_node in <Scope: function visit_FunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Assign [<_ast.Subscript object at 0x7ffa5c22df98>] ['class_node']
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute defs of <_ast.Subscript object at 0x7ffa5c22f048> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c22f048>.defs in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c22f048> in <Scope: function visit_FunctionDef>: no Node value (or name not in scope)
Resolved to attr defs of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defs> (target obj <_ast.Subscript object at 0x7ffa5c22f048> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Call self.logger.info
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute defaults of node.args in context <class '_ast.Load'>
Resolve node.args.defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Unresolved, returning attr defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_FunctionDef> to <Node ???:*.defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute kw_defaults of node.args in context <class '_ast.Load'>
Resolve node.args.kw_defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Unresolved, returning attr kw_defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.kw_defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_FunctionDef> to <Node ???:*.kw_defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ???:*.kw_defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node ???:*.kw_defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.context_stack.pop
Attribute pop of self.context_stack in context <class '_ast.Load'>
Resolve self.context_stack.pop in context <class '_ast.Load'>
Resolve self.context_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr context_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.scope_stack.pop
Attribute pop of self.scope_stack in context <class '_ast.Load'>
Resolve self.scope_stack.pop in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.name_stack.pop
Attribute pop of self.name_stack in context <class '_ast.Load'>
Resolve self.name_stack.pop in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function visit_FunctionDef>, found in <Scope: function visit_FunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ???:*.pop> (target obj self.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef visit_AsyncFunctionDef
Set visit_AsyncFunctionDef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.visit_FunctionDef
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_AsyncFunctionDef>, found in <Scope: function visit_AsyncFunctionDef>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef.^^^argument^^^>
Attribute visit_FunctionDef of self in context <class '_ast.Load'>
Resolve self.visit_FunctionDef in context <class '_ast.Load'>
Get self in <Scope: function visit_AsyncFunctionDef>, found in <Scope: function visit_AsyncFunctionDef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit_FunctionDef of <Node class:pyan.analyzer.CallGraphVisitor>
getattr visit_FunctionDef on self returns <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef>
FunctionDef visit_Lambda
Set visit_Lambda in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_Lambda>, found in <Scope: module >, value <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to With <Node class:pyan.anutils.ExecuteInInnerScope>
For-loop
Attribute defaults of node.args in context <class '_ast.Load'>
Resolve node.args.defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Unresolved, returning attr defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_Lambda> to <Node ???:*.defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ???:*.defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node ???:*.defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute kw_defaults of node.args in context <class '_ast.Load'>
Resolve node.args.kw_defaults in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Unresolved, returning attr kw_defaults of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.kw_defaults> (target obj node.args not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name d in context <class '_ast.Store'>
Set d in <Scope: function visit_Lambda> to <Node ???:*.kw_defaults>
Call self.visit
Name d in context <class '_ast.Load'>
Get d in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ???:*.kw_defaults>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to Name <Node ???:*.kw_defaults>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.visit
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Lambda>, found in <Scope: function visit_Lambda>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef visit_Import
Set visit_Import in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Import>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
ListComp
Call format_alias
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Name format_alias in context <class '_ast.Load'>
Get format_alias in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.format_alias>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to Name <Node function:pyan.anutils.format_alias>
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function listcomp>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name import_item in context <class '_ast.Store'>
Set import_item in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Assign ['src_name'] ['import_item.name']
Attribute name of import_item in context <class '_ast.Load'>
Resolve import_item.name in context <class '_ast.Load'>
Get import_item in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name src_name in context <class '_ast.Store'>
Set src_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['tgt_name'] [<_ast.IfExp object at 0x7ffa5c236f98>]
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c239208>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c239320>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Attribute IMPORTEDITEM of Flavor in context <class '_ast.Load'>
Resolve Flavor.IMPORTEDITEM in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Import>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr IMPORTEDITEM of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.IMPORTEDITEM> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.IMPORTEDITEM> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['is_new_edge'] [<_ast.Call object at 0x7ffa5c239588>]
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Name is_new_edge in context <class '_ast.Store'>
Set is_new_edge in <Scope: function visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['mod_name'] [<_ast.Subscript object at 0x7ffa5c239828>]
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['mod_name'] ['src_name']
Name src_name in context <class '_ast.Load'>
Get src_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Assign ['tgt_module'] [<_ast.Call object at 0x7ffa5c239a58>]
Call self.get_node
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^>
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Import>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr MODULE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name tgt_module in context <class '_ast.Store'>
Set tgt_module in <Scope: function visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name tgt_module in context <class '_ast.Load'>
Get tgt_module in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['to_node.flavor'] ['Flavor.MODULE']
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Import>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr MODULE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute flavor of to_node in context <class '_ast.Store'>
Resolve to_node.flavor in context <class '_ast.Store'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Resolved to attr flavor of <Node method:pyan.analyzer.CallGraphVisitor.get_node>
setattr flavor on to_node to <Node ???:*.MODULE>
Call self.set_value
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Name tgt_module in context <class '_ast.Load'>
Get tgt_module in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr set_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name is_new_edge in context <class '_ast.Load'>
Get is_new_edge in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Import>, found in <Scope: function visit_Import>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_ImportFrom
Set visit_ImportFrom in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute module of node in context <class '_ast.Load'>
Resolve node.module in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr module of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr module not resolved; maybe fwd ref or unanalyzed import)
ListComp
Call format_alias
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Name format_alias in context <class '_ast.Load'>
Get format_alias in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.format_alias>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to Name <Node function:pyan.anutils.format_alias>
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function listcomp>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['tgt_name'] ['node.module']
Attribute module of node in context <class '_ast.Load'>
Resolve node.module in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr module of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr module not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c23dac8>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c23dbe0>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Attribute MODULE of Flavor in context <class '_ast.Load'>
Resolve Flavor.MODULE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_ImportFrom>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr MODULE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.MODULE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['mod_name'] [<_ast.Subscript object at 0x7ffa5c242550>]
Attribute module_names of self in context <class '_ast.Load'>
Resolve self.module_names in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_names of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.module_names> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Assign ['mod_name'] ['tgt_name']
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
For-loop
Attribute names of node in context <class '_ast.Load'>
Resolve node.names in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Resolved to attr names of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> known but target attr names not resolved; maybe fwd ref or unanalyzed import)
Name import_item in context <class '_ast.Store'>
Set import_item in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Assign ['name'] ['import_item.name']
Attribute name of import_item in context <class '_ast.Load'>
Resolve import_item.name in context <class '_ast.Load'>
Get import_item in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Resolved to attr name of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Assign ['new_name'] [<_ast.IfExp object at 0x7ffa5c242940>]
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute asname of import_item in context <class '_ast.Load'>
Resolve import_item.asname in context <class '_ast.Load'>
Get import_item in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Resolved to attr asname of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.asname> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name new_name in context <class '_ast.Store'>
Set new_name in <Scope: function visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Assign ['tgt_id'] [<_ast.Call object at 0x7ffa5c242b70>]
Call self.get_node
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module>
Name name in context <class '_ast.Load'>
Get name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^>
Attribute IMPORTEDITEM of Flavor in context <class '_ast.Load'>
Resolve Flavor.IMPORTEDITEM in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_ImportFrom>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr IMPORTEDITEM of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.IMPORTEDITEM> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ???:*.IMPORTEDITEM> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name tgt_id in context <class '_ast.Store'>
Set tgt_id in <Scope: function visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.set_value
Name new_name in context <class '_ast.Load'>
Get new_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name tgt_id in context <class '_ast.Load'>
Get tgt_id in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr set_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Call self.logger.info
Name new_name in context <class '_ast.Load'>
Get new_name in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Name tgt_id in context <class '_ast.Load'>
Get tgt_id in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ImportFrom>, found in <Scope: function visit_ImportFrom>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_Attribute
Set visit_Attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['objname'] [<_ast.Call object at 0x7ffa5c246278>]
Call get_ast_node_name
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Name objname in context <class '_ast.Store'>
Set objname in <Scope: function visit_Attribute> to <Node function:pyan.anutils.get_ast_node_name>
Call self.logger.debug
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Call type
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.type>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Store of ast in context <class '_ast.Load'>
Resolve ast.Store in context <class '_ast.Load'>
Get ast in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Store of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Assign ['new_value'] ['self.last_value']
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ???:*.zip>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ???:*.zip>
Name new_value in context <class '_ast.Store'>
Set new_value in <Scope: function visit_Attribute> to <Node ???:*.zip>
Call self.set_attribute
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.zip>
Attribute set_attribute of self in context <class '_ast.Load'>
Resolve self.set_attribute in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr set_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.set_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.set_attribute>
Call self.logger.info
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.zip>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node class:pyan.anutils.UnresolvedSuperCallError>
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Load of ast in context <class '_ast.Load'>
Resolve ast.Load in context <class '_ast.Load'>
Get ast in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Load of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node', 'attr_node'] [<_ast.Call object at 0x7ffa5c2490b8>]
Call self.get_attribute
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Attribute get_attribute of self in context <class '_ast.Load'>
Resolve self.get_attribute in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name attr_node in context <class '_ast.Store'>
Set attr_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node class:pyan.anutils.UnresolvedSuperCallError>
Call isinstance
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Call self.logger.info
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c249668>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Attribute namespace of attr_node in context <class '_ast.Load'>
Resolve attr_node.namespace in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_wild
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute remove_wild of self in context <class '_ast.Load'>
Resolve self.remove_wild in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_wild of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_wild on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Assign ['self.last_value'] ['attr_node']
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['tgt_name'] ['node.attr']
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c24d438>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c24d550>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c24d668>]
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Attribute ATTRIBUTE of Flavor in context <class '_ast.Load'>
Resolve Flavor.ATTRIBUTE in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr ATTRIBUTE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ???:*.ATTRIBUTE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ???:*.ATTRIBUTE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_wild
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute remove_wild of self in context <class '_ast.Load'>
Resolve self.remove_wild in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_wild of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_wild on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Assign ['self.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['tgt_name'] ['node.attr']
Attribute attr of node in context <class '_ast.Load'>
Resolve node.attr in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c252390>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c2524a8>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^>
Attribute UNKNOWN of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNKNOWN in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Attribute>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNKNOWN of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ???:*.UNKNOWN> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ???:*.UNKNOWN> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name objname in context <class '_ast.Load'>
Get objname in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Attribute>, found in <Scope: function visit_Attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef visit_Name
Set visit_Name in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Name>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Call type
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.type>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Store of ast in context <class '_ast.Load'>
Resolve ast.Store in context <class '_ast.Load'>
Get ast in <Scope: function visit_Name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Store of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
Call self.set_value
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute set_value of self in context <class '_ast.Load'>
Resolve self.set_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr set_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr set_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Call isinstance
Attribute ctx of node in context <class '_ast.Load'>
Resolve node.ctx in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Load of ast in context <class '_ast.Load'>
Resolve ast.Load in context <class '_ast.Load'>
Get ast in <Scope: function visit_Name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Load of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
Assign ['tgt_name'] ['node.id']
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name tgt_name in context <class '_ast.Store'>
Set tgt_name in <Scope: function visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c2567f0>]
Call self.get_value
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Attribute get_value of self in context <class '_ast.Load'>
Resolve self.get_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Assign ['current_class'] [<_ast.Call object at 0x7ffa5c256940>]
Call self.get_current_class
Attribute get_current_class of self in context <class '_ast.Load'>
Resolve self.get_current_class in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_current_class of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_current_class on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name current_class in context <class '_ast.Store'>
Set current_class in <Scope: function visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name current_class in context <class '_ast.Load'>
Get current_class in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Name current_class in context <class '_ast.Load'>
Get current_class in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Call isinstance
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Name>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Name>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ???:*.isinstance>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c256d68>]
Call self.get_node
Name tgt_name in context <class '_ast.Load'>
Get tgt_name in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^>
Attribute UNKNOWN of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNKNOWN in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Name>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNKNOWN of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node ???:*.UNKNOWN> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node ???:*.UNKNOWN> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c256fd0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Name>, found in <Scope: function visit_Name>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef visit_Assign
Set visit_Assign in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call len
Attribute targets of node in context <class '_ast.Load'>
Resolve node.targets in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr targets of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function visit_Assign>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node ???:*.len>
Call self.logger.debug
Call len
Attribute targets of node in context <class '_ast.Load'>
Resolve node.targets in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr targets of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function visit_Assign>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node ???:*.len>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['values'] [<_ast.Call object at 0x7ffa5c259c88>]
Call sanitize_exprs
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_Assign>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function visit_Assign> to <Node function:pyan.anutils.sanitize_exprs>
For-loop
Attribute targets of node in context <class '_ast.Load'>
Resolve node.targets in context <class '_ast.Load'>
Get node in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Resolved to attr targets of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^> known but target attr targets not resolved; maybe fwd ref or unanalyzed import)
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets>
Assign ['targets'] [<_ast.Call object at 0x7ffa5c259eb8>]
Call sanitize_exprs
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets>
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_Assign>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node function:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_Assign> to <Node function:pyan.anutils.sanitize_exprs>
Call self.logger.debug
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node function:pyan.anutils.get_ast_node_name>
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function listcomp>, found in <Scope: function visit_Assign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node function:pyan.anutils.sanitize_exprs>
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node function:pyan.anutils.get_ast_node_name>
Name values in context <class '_ast.Load'>
Get values in <Scope: function listcomp>, found in <Scope: function visit_Assign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node function:pyan.anutils.sanitize_exprs>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to Name <Node function:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_Assign>, found in <Scope: function visit_Assign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_binding on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
FunctionDef visit_AnnAssign
Set visit_AnnAssign in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.visit_Assign
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_AnnAssign>, found in <Scope: function visit_AnnAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_AnnAssign>, found in <Scope: function visit_AnnAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AnnAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AnnAssign.^^^argument^^^>
Attribute visit_Assign of self in context <class '_ast.Load'>
Resolve self.visit_Assign in context <class '_ast.Load'>
Get self in <Scope: function visit_AnnAssign>, found in <Scope: function visit_AnnAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit_Assign of <Node class:pyan.analyzer.CallGraphVisitor>
getattr visit_Assign on self returns <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>
FunctionDef visit_AugAssign
Set visit_AugAssign in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['targets'] [<_ast.Call object at 0x7ffa5c25f940>]
Call sanitize_exprs
Attribute target of node in context <class '_ast.Load'>
Resolve node.target in context <class '_ast.Load'>
Get node in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_AugAssign>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node function:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_AugAssign> to <Node function:pyan.anutils.sanitize_exprs>
Assign ['values'] [<_ast.Call object at 0x7ffa5c25fa90>]
Call sanitize_exprs
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_AugAssign>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function visit_AugAssign> to <Node function:pyan.anutils.sanitize_exprs>
Call self.logger.debug
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node function:pyan.anutils.get_ast_node_name>
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function listcomp>, found in <Scope: function visit_AugAssign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node function:pyan.anutils.sanitize_exprs>
Call type
Attribute op of node in context <class '_ast.Load'>
Resolve node.op in context <class '_ast.Load'>
Get node in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Resolved to attr op of <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.op> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^> known but target attr op not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function visit_AugAssign>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node ???:*.type>
ListComp
Call get_ast_node_name
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node function:pyan.anutils.get_ast_node_name>
Name values in context <class '_ast.Load'>
Get values in <Scope: function listcomp>, found in <Scope: function visit_AugAssign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node function:pyan.anutils.sanitize_exprs>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to Name <Node function:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_AugAssign>, found in <Scope: function visit_AugAssign>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_binding on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
FunctionDef visit_For
Set visit_For in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['targets'] [<_ast.Call object at 0x7ffa5c2dc550>]
Call sanitize_exprs
Attribute target of node in context <class '_ast.Load'>
Resolve node.target in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_For>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node function:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function visit_For> to <Node function:pyan.anutils.sanitize_exprs>
Assign ['values'] [<_ast.Call object at 0x7ffa5c2dc6a0>]
Call sanitize_exprs
Attribute iter of node in context <class '_ast.Load'>
Resolve node.iter in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr iter of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.iter> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr iter not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_For>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function visit_For> to <Node function:pyan.anutils.sanitize_exprs>
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node function:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_binding on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute orelse of node in context <class '_ast.Load'>
Resolve node.orelse in context <class '_ast.Load'>
Get node in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Resolved to attr orelse of <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^> known but target attr orelse not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_For>, found in <Scope: function visit_For>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef visit_AsyncFor
Set visit_AsyncFor in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.visit_For
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_AsyncFor>, found in <Scope: function visit_AsyncFor>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFor.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFor.^^^argument^^^>
Attribute visit_For of self in context <class '_ast.Load'>
Resolve self.visit_For in context <class '_ast.Load'>
Get self in <Scope: function visit_AsyncFor>, found in <Scope: function visit_AsyncFor>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit_For of <Node class:pyan.analyzer.CallGraphVisitor>
getattr visit_For on self returns <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_For>
FunctionDef visit_ListComp
Set visit_ListComp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_ListComp>, found in <Scope: module >, value <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to Name <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to With <Node class:pyan.anutils.ExecuteInInnerScope>
Call self.visit
Attribute elt of node in context <class '_ast.Load'>
Resolve node.elt in context <class '_ast.Load'>
Get node in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Resolved to attr elt of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_ListComp>, found in <Scope: function visit_ListComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_generators on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
FunctionDef visit_SetComp
Set visit_SetComp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_SetComp>, found in <Scope: module >, value <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to Name <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to With <Node class:pyan.anutils.ExecuteInInnerScope>
Call self.visit
Attribute elt of node in context <class '_ast.Load'>
Resolve node.elt in context <class '_ast.Load'>
Get node in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Resolved to attr elt of <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_SetComp>, found in <Scope: function visit_SetComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_generators on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
FunctionDef visit_DictComp
Set visit_DictComp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_DictComp>, found in <Scope: module >, value <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to Name <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to With <Node class:pyan.anutils.ExecuteInInnerScope>
Call self.visit
Attribute key of node in context <class '_ast.Load'>
Resolve node.key in context <class '_ast.Load'>
Get node in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Resolved to attr key of <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.key> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr key not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.visit
Attribute value of node in context <class '_ast.Load'>
Resolve node.value in context <class '_ast.Load'>
Get node in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_DictComp>, found in <Scope: function visit_DictComp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_generators on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
FunctionDef visit_GeneratorExp
Set visit_GeneratorExp in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call ExecuteInInnerScope
Name self in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Name ExecuteInInnerScope in context <class '_ast.Load'>
Get ExecuteInInnerScope in <Scope: function visit_GeneratorExp>, found in <Scope: module >, value <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to Name <Node class:pyan.anutils.ExecuteInInnerScope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__> (call creates an instance)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to With <Node class:pyan.anutils.ExecuteInInnerScope>
Call self.visit
Attribute elt of node in context <class '_ast.Load'>
Resolve node.elt in context <class '_ast.Load'>
Get node in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Resolved to attr elt of <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.elt> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^> known but target attr elt not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.analyze_generators
Attribute generators of node in context <class '_ast.Load'>
Resolve node.generators in context <class '_ast.Load'>
Get node in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Resolved to attr generators of <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.generators> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^> known but target attr generators not resolved; maybe fwd ref or unanalyzed import)
Attribute analyze_generators of self in context <class '_ast.Load'>
Resolve self.analyze_generators in context <class '_ast.Load'>
Get self in <Scope: function visit_GeneratorExp>, found in <Scope: function visit_GeneratorExp>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_generators of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_generators on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
FunctionDef visit_Call
Set visit_Call in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Call>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Call get_ast_node_name
Attribute func of node in context <class '_ast.Load'>
Resolve node.func in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr func of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function visit_Call>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute args of node in context <class '_ast.Load'>
Resolve node.args in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name arg in context <class '_ast.Store'>
Set arg in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args>
Call self.visit
Name arg in context <class '_ast.Load'>
Get arg in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute keywords of node in context <class '_ast.Load'>
Resolve node.keywords in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr keywords of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr keywords not resolved; maybe fwd ref or unanalyzed import)
Name kw in context <class '_ast.Store'>
Set kw in <Scope: function visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords>
Call self.visit
Attribute value of kw in context <class '_ast.Load'>
Resolve kw.value in context <class '_ast.Load'>
Get kw in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords>
Resolved to attr value of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords.value> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['result_node'] [<_ast.Call object at 0x7ffa5c2af160>]
Call self.resolve_builtins
Name node in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Attribute resolve_builtins of self in context <class '_ast.Load'>
Resolve self.resolve_builtins in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_builtins of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_builtins on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name result_node in context <class '_ast.Store'>
Set result_node in <Scope: function visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function visit_Call>, found in <Scope: module >, value <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node class:pyan.anutils.UnresolvedSuperCallError>
Assign ['result_node'] [<_ast.NameConstant object at 0x7ffa5c2af320>]
Name result_node in context <class '_ast.Store'>
Set result_node in <Scope: function visit_Call>: value None is not a Node
Call isinstance
Name result_node in context <class '_ast.Load'>
Get result_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function visit_Call>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_Call>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node ???:*.isinstance>
Assign ['self.last_value'] ['result_node']
Name result_node in context <class '_ast.Load'>
Get result_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c2af5c0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['to_node'] ['result_node']
Name result_node in context <class '_ast.Load'>
Get result_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.visit
Attribute func of node in context <class '_ast.Load'>
Resolve node.func in context <class '_ast.Load'>
Get node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Resolved to attr func of <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute class_base_ast_nodes of self in context <class '_ast.Load'>
Resolve self.class_base_ast_nodes in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_base_ast_nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.class_base_ast_nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c2affd0>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['class_node'] ['self.last_value']
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name class_node in context <class '_ast.Store'>
Set class_node in <Scope: function visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c2b2208>]
Call self.get_node
Call class_node.get_name
Attribute get_name of class_node in context <class '_ast.Load'>
Resolve class_node.get_name in context <class '_ast.Load'>
Get class_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function visit_Call>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr METHOD of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_Call>, found in <Scope: function visit_Call>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef visit_With
Set visit_With in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.visit_With>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call self.logger.debug
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef add_uses_enter_exit_of
Set add_uses_enter_exit_of in <Scope: function visit_With> to <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Call isinstance
Name graph_node in context <class '_ast.Load'>
Get graph_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function add_uses_enter_exit_of>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function add_uses_enter_exit_of>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ???:*.isinstance>
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c2b2e80>]
Call self.get_node_of_current_namespace
Attribute get_node_of_current_namespace of self in context <class '_ast.Load'>
Resolve self.get_node_of_current_namespace in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node_of_current_namespace of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node_of_current_namespace on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function add_uses_enter_exit_of> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Assign ['withed_obj_node'] ['graph_node']
Name graph_node in context <class '_ast.Load'>
Get graph_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Name withed_obj_node in context <class '_ast.Store'>
Set withed_obj_node in <Scope: function add_uses_enter_exit_of> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Call self.logger.debug
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name withed_obj_node in context <class '_ast.Load'>
Get withed_obj_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name methodname in context <class '_ast.Store'>
Set methodname in <Scope: function add_uses_enter_exit_of>: value None is not a Node
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c2b83c8>]
Call self.get_node
Call withed_obj_node.get_name
Attribute get_name of withed_obj_node in context <class '_ast.Load'>
Resolve withed_obj_node.get_name in context <class '_ast.Load'>
Get withed_obj_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Resolved to attr get_name of <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name methodname in context <class '_ast.Load'>
Get methodname in <Scope: function add_uses_enter_exit_of>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node ???:*.methodname>
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function add_uses_enter_exit_of>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr METHOD of <Node class:pyan.node.Flavor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function add_uses_enter_exit_of> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_enter_exit_of>, found in <Scope: function add_uses_enter_exit_of>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function add_uses_enter_exit_of>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute items of node in context <class '_ast.Load'>
Resolve node.items in context <class '_ast.Load'>
Get node in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Resolved to attr items of <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^> known but target attr items not resolved; maybe fwd ref or unanalyzed import)
Name withitem in context <class '_ast.Store'>
Set withitem in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Assign ['expr'] ['withitem.context_expr']
Attribute context_expr of withitem in context <class '_ast.Load'>
Resolve withitem.context_expr in context <class '_ast.Load'>
Get withitem in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Resolved to attr context_expr of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> known but target attr context_expr not resolved; maybe fwd ref or unanalyzed import)
Name expr in context <class '_ast.Store'>
Set expr in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Assign ['vars'] ['withitem.optional_vars']
Attribute optional_vars of withitem in context <class '_ast.Load'>
Resolve withitem.optional_vars in context <class '_ast.Load'>
Get withitem in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Resolved to attr optional_vars of <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> known but target attr optional_vars not resolved; maybe fwd ref or unanalyzed import)
Name vars in context <class '_ast.Store'>
Set vars in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2b8d30>]
Attribute last_value of self in context <class '_ast.Store'>
Call self.visit
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call add_uses_enter_exit_of
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name add_uses_enter_exit_of in context <class '_ast.Load'>
Get add_uses_enter_exit_of in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2bc080>]
Attribute last_value of self in context <class '_ast.Store'>
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Call isinstance
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function visit_With>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function visit_With>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node ???:*.isinstance>
Call self.analyze_binding
Call sanitize_exprs
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_With>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node function:pyan.anutils.sanitize_exprs>
Call sanitize_exprs
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr>
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function visit_With>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node function:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_binding on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Call self.visit
Name vars in context <class '_ast.Load'>
Get vars in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute body of node in context <class '_ast.Load'>
Resolve node.body in context <class '_ast.Load'>
Get node in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Resolved to attr body of <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^> known but target attr body not resolved; maybe fwd ref or unanalyzed import)
Name stmt in context <class '_ast.Store'>
Set stmt in <Scope: function visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body>
Call self.visit
Name stmt in context <class '_ast.Load'>
Get stmt in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function visit_With>, found in <Scope: function visit_With>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef analyze_functiondef
Set analyze_functiondef in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Attribute FunctionDef of ast in context <class '_ast.Load'>
Resolve ast.FunctionDef in context <class '_ast.Load'>
Get ast in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node module:ast>
Resolved to attr FunctionDef of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:ast.FunctionDef> (target obj <Node module:ast> known but target attr FunctionDef not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.TypeError>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2bcd68>]
Attribute last_value of self in context <class '_ast.Store'>
Assign ['deco_names'] []
Name deco_names in context <class '_ast.Store'>
Set deco_names in <Scope: function analyze_functiondef>: value None is not a Node
For-loop
Attribute decorator_list of ast_node in context <class '_ast.Load'>
Resolve ast_node.decorator_list in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Resolved to attr decorator_list of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> known but target attr decorator_list not resolved; maybe fwd ref or unanalyzed import)
Name deco in context <class '_ast.Store'>
Set deco in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list>
Call self.visit
Name deco in context <class '_ast.Load'>
Get deco in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['deco_node'] ['self.last_value']
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name deco_node in context <class '_ast.Store'>
Set deco_node in <Scope: function analyze_functiondef> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Call isinstance
Name deco_node in context <class '_ast.Load'>
Get deco_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.isinstance>
Call deco_names.append
Attribute name of deco_node in context <class '_ast.Load'>
Resolve deco_node.name in context <class '_ast.Load'>
Get deco_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Resolved to attr name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute append of deco_names in context <class '_ast.Load'>
Resolve deco_names.append in context <class '_ast.Load'>
Get deco_names in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.append> (target obj deco_names not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2c0470>]
Attribute last_value of self in context <class '_ast.Store'>
Assign ['in_class_ns'] [<_ast.Call object at 0x7ffa5c2c0518>]
Call <_ast.Subscript object at 0x7ffa5c2c0588>.startswith
Attribute startswith of <_ast.Subscript object at 0x7ffa5c2c0588> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c2c0588>.startswith in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c2c0588> in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Resolved to attr startswith of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.startswith> (target obj <_ast.Subscript object at 0x7ffa5c2c0588> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name in_class_ns in context <class '_ast.Store'>
Set in_class_ns in <Scope: function analyze_functiondef> to <Node ???:*.startswith>
Name in_class_ns in context <class '_ast.Load'>
Get in_class_ns in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.startswith>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.startswith>
Assign ['flavor'] ['Flavor.FUNCTION']
Attribute FUNCTION of Flavor in context <class '_ast.Load'>
Resolve Flavor.FUNCTION in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr FUNCTION of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.FUNCTION> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.FUNCTION> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node ???:*.FUNCTION>
Name deco_names in context <class '_ast.Load'>
Get deco_names in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.deco_names>
Assign ['flavor'] ['Flavor.STATICMETHOD']
Attribute STATICMETHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.STATICMETHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr STATICMETHOD of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.STATICMETHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.STATICMETHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node ???:*.STATICMETHOD>
Name deco_names in context <class '_ast.Load'>
Get deco_names in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.deco_names>
Assign ['flavor'] ['Flavor.CLASSMETHOD']
Attribute CLASSMETHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASSMETHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr CLASSMETHOD of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.CLASSMETHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.CLASSMETHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node ???:*.CLASSMETHOD>
Assign ['flavor'] ['Flavor.METHOD']
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr METHOD of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function analyze_functiondef> to <Node ???:*.METHOD>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.METHOD>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.METHOD>
Attribute METHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.METHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr METHOD of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.METHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute CLASSMETHOD of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASSMETHOD in context <class '_ast.Load'>
Get Flavor in <Scope: function analyze_functiondef>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr CLASSMETHOD of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.CLASSMETHOD> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['all_args'] ['ast_node.args']
Attribute args of ast_node in context <class '_ast.Load'>
Resolve ast_node.args in context <class '_ast.Load'>
Get ast_node in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name all_args in context <class '_ast.Store'>
Set all_args in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args>
Assign ['posargs'] ['all_args.args']
Attribute args of all_args in context <class '_ast.Load'>
Resolve all_args.args in context <class '_ast.Load'>
Get all_args in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args>
Resolved to attr args of <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name posargs in context <class '_ast.Store'>
Set posargs in <Scope: function analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args>
Call len
Name posargs in context <class '_ast.Load'>
Get posargs in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args>
Name len in context <class '_ast.Load'>
Get len in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.len>
Assign ['self_name'] ['<_ast.Subscript object at 0x7ffa5c2c5240>.arg']
Attribute arg of <_ast.Subscript object at 0x7ffa5c2c5240> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c2c5240>.arg in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c2c5240> in <Scope: function analyze_functiondef>: no Node value (or name not in scope)
Resolved to attr arg of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ???:*.arg> (target obj <_ast.Subscript object at 0x7ffa5c2c5240> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name self_name in context <class '_ast.Store'>
Set self_name in <Scope: function analyze_functiondef> to <Node ???:*.arg>
Name self_name in context <class '_ast.Load'>
Get self_name in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.arg>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.arg>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.METHOD>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.METHOD>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function analyze_functiondef>, found in <Scope: function analyze_functiondef>, value <Node ???:*.METHOD>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to Name <Node ???:*.METHOD>
FunctionDef analyze_binding
Set analyze_binding in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2c5710>]
Attribute last_value of self in context <class '_ast.Store'>
Call len
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.len>
Call len
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.len>
Assign ['captured_values'] []
Name captured_values in context <class '_ast.Store'>
Set captured_values in <Scope: function analyze_binding>: value None is not a Node
For-loop
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name value in context <class '_ast.Store'>
Set value in <Scope: function analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Call self.visit
Name value in context <class '_ast.Load'>
Get value in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call captured_values.append
Attribute last_value of self in context <class '_ast.Load'>
Resolve self.last_value in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr last_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Attribute append of captured_values in context <class '_ast.Load'>
Resolve captured_values.append in context <class '_ast.Load'>
Get captured_values in <Scope: function analyze_binding>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.append> (target obj captured_values not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2c5d68>]
Attribute last_value of self in context <class '_ast.Store'>
For-loop
Call zip
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name captured_values in context <class '_ast.Load'>
Get captured_values in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.captured_values>
Name zip in context <class '_ast.Load'>
Get zip in <Scope: function analyze_binding>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
Name tgt in context <class '_ast.Store'>
Set tgt in <Scope: function analyze_binding> to <Node ???:*.zip>
Name val in context <class '_ast.Store'>
Set val in <Scope: function analyze_binding> to <Node ???:*.zip>
Assign ['self.last_value'] ['val']
Name val in context <class '_ast.Load'>
Get val in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
Attribute last_value of self in context <class '_ast.Store'>
Resolve self.last_value in context <class '_ast.Store'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr last_value of <Node class:pyan.analyzer.CallGraphVisitor>
setattr last_value on self to <Node ???:*.zip>
Call self.visit
Name tgt in context <class '_ast.Load'>
Get tgt in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ???:*.zip>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ???:*.zip>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2c8240>]
Attribute last_value of self in context <class '_ast.Store'>
For-loop
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name value in context <class '_ast.Store'>
Set value in <Scope: function analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Call self.visit
Name value in context <class '_ast.Load'>
Get value in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Name tgt in context <class '_ast.Store'>
Set tgt in <Scope: function analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Call self.visit
Name tgt in context <class '_ast.Load'>
Get tgt in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_binding>, found in <Scope: function analyze_binding>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.last_value'] [<_ast.NameConstant object at 0x7ffa5c2c86a0>]
Attribute last_value of self in context <class '_ast.Store'>
FunctionDef analyze_generators
Set analyze_generators in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
For-loop
Name generators in context <class '_ast.Load'>
Get generators in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Name gen in context <class '_ast.Store'>
Set gen in <Scope: function analyze_generators> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Assign ['targets'] [<_ast.Call object at 0x7ffa5c2c8940>]
Call sanitize_exprs
Attribute target of gen in context <class '_ast.Load'>
Resolve gen.target in context <class '_ast.Load'>
Get gen in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.target> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function analyze_generators>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node function:pyan.anutils.sanitize_exprs>
Name targets in context <class '_ast.Store'>
Set targets in <Scope: function analyze_generators> to <Node function:pyan.anutils.sanitize_exprs>
Assign ['values'] [<_ast.Call object at 0x7ffa5c2c8a90>]
Call sanitize_exprs
Attribute iter of gen in context <class '_ast.Load'>
Resolve gen.iter in context <class '_ast.Load'>
Get gen in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Resolved to attr iter of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.iter> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr iter not resolved; maybe fwd ref or unanalyzed import)
Name sanitize_exprs in context <class '_ast.Load'>
Get sanitize_exprs in <Scope: function analyze_generators>, found in <Scope: module >, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Store'>
Set values in <Scope: function analyze_generators> to <Node function:pyan.anutils.sanitize_exprs>
Call self.analyze_binding
Name targets in context <class '_ast.Load'>
Get targets in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node function:pyan.anutils.sanitize_exprs>
Name values in context <class '_ast.Load'>
Get values in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node function:pyan.anutils.sanitize_exprs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node function:pyan.anutils.sanitize_exprs>
Attribute analyze_binding of self in context <class '_ast.Load'>
Resolve self.analyze_binding in context <class '_ast.Load'>
Get self in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr analyze_binding of <Node class:pyan.analyzer.CallGraphVisitor>
getattr analyze_binding on self returns <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding>
For-loop
Attribute ifs of gen in context <class '_ast.Load'>
Resolve gen.ifs in context <class '_ast.Load'>
Get gen in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Resolved to attr ifs of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> known but target attr ifs not resolved; maybe fwd ref or unanalyzed import)
Name expr in context <class '_ast.Store'>
Set expr in <Scope: function analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs>
Call self.visit
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs>
Attribute visit of self in context <class '_ast.Load'>
Resolve self.visit in context <class '_ast.Load'>
Get self in <Scope: function analyze_generators>, found in <Scope: function analyze_generators>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr visit of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node ???:*.visit> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef resolve_builtins
Set resolve_builtins in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Attribute Call of ast in context <class '_ast.Load'>
Resolve ast.Call in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Call of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Call> (target obj <Node module:ast> known but target attr Call not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.TypeError>
Assign ['func_ast_node'] ['ast_node.func']
Attribute func of ast_node in context <class '_ast.Load'>
Resolve ast_node.func in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Resolved to attr func of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr func not resolved; maybe fwd ref or unanalyzed import)
Name func_ast_node in context <class '_ast.Store'>
Set func_ast_node in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Call isinstance
Name func_ast_node in context <class '_ast.Load'>
Get func_ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
Assign ['funcname'] ['func_ast_node.id']
Attribute id of func_ast_node in context <class '_ast.Load'>
Resolve func_ast_node.id in context <class '_ast.Load'>
Get func_ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Resolved to attr id of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name funcname in context <class '_ast.Store'>
Set funcname in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Assign ['class_node'] [<_ast.Call object at 0x7ffa5c2cd7f0>]
Call self.get_current_class
Attribute get_current_class of self in context <class '_ast.Load'>
Resolve self.get_current_class in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_current_class of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_current_class on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name class_node in context <class '_ast.Store'>
Set class_node in <Scope: function resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.debug
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node function:pyan.anutils.resolve_method_resolution_order>
Call len
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node function:pyan.anutils.resolve_method_resolution_order>
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name len in context <class '_ast.Load'>
Get len in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.len>
Assign ['result'] [<_ast.Subscript object at 0x7ffa5c2cde10>]
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node function:pyan.anutils.resolve_method_resolution_order>
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name result in context <class '_ast.Store'>
Set result in <Scope: function resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.debug
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name result in context <class '_ast.Load'>
Get result in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name result in context <class '_ast.Load'>
Get result in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Assign ['msg'] [<_ast.BinOp object at 0x7ffa5c2d0320>]
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name msg in context <class '_ast.Store'>
Set msg in <Scope: function resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.info
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call UnresolvedSuperCallError
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node method:pyan.anutils.UnresolvedSuperCallError.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node method:pyan.anutils.UnresolvedSuperCallError.__init__> (call creates an instance)
Assign ['msg'] [<_ast.BinOp object at 0x7ffa5c2d0668>]
Name class_node in context <class '_ast.Load'>
Get class_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name msg in context <class '_ast.Store'>
Set msg in <Scope: function resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Call self.logger.info
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call UnresolvedSuperCallError
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Name UnresolvedSuperCallError in context <class '_ast.Load'>
Get UnresolvedSuperCallError in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node class:pyan.anutils.UnresolvedSuperCallError>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node method:pyan.anutils.UnresolvedSuperCallError.__init__> (call creates an instance)
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Call len
Attribute args of ast_node in context <class '_ast.Load'>
Resolve ast_node.args in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.len>
Assign ['obj_astnode'] [<_ast.Subscript object at 0x7ffa5c2d0c88>]
Attribute args of ast_node in context <class '_ast.Load'>
Resolve ast_node.args in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Resolved to attr args of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> known but target attr args not resolved; maybe fwd ref or unanalyzed import)
Name obj_astnode in context <class '_ast.Store'>
Set obj_astnode in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Call isinstance
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_builtins>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node ???:*.isinstance>
Call self.logger.debug
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Call get_ast_node_name
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['attrname'] [<_ast.BinOp object at 0x7ffa5c2d32e8>]
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Name attrname in context <class '_ast.Store'>
Set attrname in <Scope: function resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Assign ['tmp_astnode'] [<_ast.Call object at 0x7ffa5c2d3400>]
Call ast.Attribute
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Name attrname in context <class '_ast.Load'>
Get attrname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Attribute ctx of obj_astnode in context <class '_ast.Load'>
Resolve obj_astnode.ctx in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Resolved to attr ctx of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args.ctx> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name tmp_astnode in context <class '_ast.Store'>
Set tmp_astnode in <Scope: function resolve_builtins> to <Node attribute:ast.Attribute>
Assign ['obj_node', 'attr_node'] [<_ast.Call object at 0x7ffa5c2d3710>]
Call self.get_attribute
Name tmp_astnode in context <class '_ast.Load'>
Get tmp_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:ast.Attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:ast.Attribute>
Attribute get_attribute of self in context <class '_ast.Load'>
Resolve self.get_attribute in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Name attr_node in context <class '_ast.Store'>
Set attr_node in <Scope: function resolve_builtins> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Call self.logger.debug
Name funcname in context <class '_ast.Load'>
Get funcname in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Call get_ast_node_name
Name obj_astnode in context <class '_ast.Load'>
Get obj_astnode in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args>
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_builtins>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node function:pyan.anutils.get_ast_node_name>
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name attr_node in context <class '_ast.Load'>
Get attr_node in <Scope: function resolve_builtins>, found in <Scope: function resolve_builtins>, value <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
FunctionDef resolve_attribute
Set resolve_attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.TypeError>
Call self.logger.debug
Call get_ast_node_name
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call type
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node', 'attr_name'] [<_ast.Call object at 0x7ffa5c2db668>]
Call self.resolve_attribute
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute resolve_attribute of self in context <class '_ast.Load'>
Resolve self.resolve_attribute in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name attr_name in context <class '_ast.Store'>
Set attr_name in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] [<_ast.Call object at 0x7ffa5c2dba20>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c2dbc50>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute Num of ast in context <class '_ast.Load'>
Resolve ast.Num in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Num of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Num> (target obj <Node module:ast> known but target attr Num not resolved; maybe fwd ref or unanalyzed import)
Attribute Str of ast in context <class '_ast.Load'>
Resolve ast.Str in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Str of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Str> (target obj <Node module:ast> known but target attr Str not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Assign ['t'] [<_ast.Call object at 0x7ffa5c2e09b0>]
Call type
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.type>
Name t in context <class '_ast.Store'>
Set t in <Scope: function resolve_attribute> to <Node ???:*.type>
Assign ['tn'] ['t.__name__']
Attribute __name__ of t in context <class '_ast.Load'>
Resolve t.__name__ in context <class '_ast.Load'>
Get t in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ???:*.type>
Resolved to attr __name__ of <Node ???:*.type>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.__name__> (target obj t not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name tn in context <class '_ast.Store'>
Set tn in <Scope: function resolve_attribute> to <Node ???:*.__name__>
Assign ['obj_node'] [<_ast.Call object at 0x7ffa5c2e0be0>]
Call self.get_node
Name tn in context <class '_ast.Load'>
Get tn in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ???:*.__name__>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.__name__>
Attribute CLASS of Flavor in context <class '_ast.Load'>
Resolve Flavor.CLASS in context <class '_ast.Load'>
Get Flavor in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr CLASS of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.CLASS> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ???:*.CLASS> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Call isinstance
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute Call of ast in context <class '_ast.Load'>
Resolve ast.Call in context <class '_ast.Load'>
Get ast in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Call of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Call> (target obj <Node module:ast> known but target attr Call not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node'] [<_ast.Call object at 0x7ffa5c2e0fd0>]
Call self.resolve_builtins
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Attribute resolve_builtins of self in context <class '_ast.Load'>
Resolve self.resolve_builtins in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_builtins of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_builtins on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function resolve_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node ???:*.isinstance>
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Assign ['obj_node'] [<_ast.Call object at 0x7ffa5c2895f8>]
Call self.get_value
Call get_ast_node_name
Attribute value of ast_node in context <class '_ast.Load'>
Resolve ast_node.value in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function resolve_attribute>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute get_value of self in context <class '_ast.Load'>
Resolve self.get_value in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_value of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_value on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function resolve_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Call self.logger.debug
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Attribute attr of ast_node in context <class '_ast.Load'>
Resolve ast_node.attr in context <class '_ast.Load'>
Get ast_node in <Scope: function resolve_attribute>, found in <Scope: function resolve_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
FunctionDef analyze_scopes
Set analyze_scopes in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['scopes'] [<_ast.Dict object at 0x7ffa5c289cf8>]
Name scopes in context <class '_ast.Store'>
Set scopes in <Scope: function analyze_scopes>: value None is not a Node
FunctionDef process
Set process in <Scope: function analyze_scopes> to <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Assign ['sc'] [<_ast.Call object at 0x7ffa5c289e80>]
Call Scope
Name table in context <class '_ast.Load'>
Get table in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Name Scope in context <class '_ast.Load'>
Get Scope in <Scope: function process>, found in <Scope: module >, value <Node class:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node class:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node method:pyan.anutils.Scope.__init__> (call creates an instance)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node method:pyan.anutils.Scope.__init__> (call creates an instance)
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function process> to <Node class:pyan.anutils.Scope>
Assign ['ns'] [<_ast.IfExp object at 0x7ffa5c289f98>]
Call len
Attribute name of sc in context <class '_ast.Load'>
Resolve sc.name in context <class '_ast.Load'>
Get sc in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.anutils.Scope>
Resolved to attr name of <Node class:pyan.anutils.Scope>
getattr name on sc returns <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Name len in context <class '_ast.Load'>
Get len in <Scope: function process>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ???:*.len>
Name parent_ns in context <class '_ast.Load'>
Get parent_ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Attribute name of sc in context <class '_ast.Load'>
Resolve sc.name in context <class '_ast.Load'>
Get sc in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.anutils.Scope>
Resolved to attr name of <Node class:pyan.anutils.Scope>
getattr name on sc returns <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Name parent_ns in context <class '_ast.Load'>
Get parent_ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function process> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Assign [<_ast.Subscript object at 0x7ffa5c2942b0>] ['sc']
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function process>, found in <Scope: function process>, value <Node class:pyan.anutils.Scope>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node class:pyan.anutils.Scope>
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function process>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
For-loop
Call table.get_children
Attribute get_children of table in context <class '_ast.Load'>
Resolve table.get_children in context <class '_ast.Load'>
Get table in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Resolved to attr get_children of <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^> known but target attr get_children not resolved; maybe fwd ref or unanalyzed import)
Name t in context <class '_ast.Store'>
Set t in <Scope: function process> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children>
Call process
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^>
Name t in context <class '_ast.Load'>
Get t in <Scope: function process>, found in <Scope: function process>, value <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children>
Name process in context <class '_ast.Load'>
Get process in <Scope: function process>, found in <Scope: function analyze_scopes>, value <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to Name <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Call process
Attribute module_name of self in context <class '_ast.Load'>
Resolve self.module_name in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_name of <Node class:pyan.analyzer.CallGraphVisitor>
getattr module_name on self returns <Node function:pyan.anutils.get_module_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node function:pyan.anutils.get_module_name>
Call symtable.symtable
Name code in context <class '_ast.Load'>
Get code in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^>
Attribute symtable of symtable in context <class '_ast.Load'>
Resolve symtable.symtable in context <class '_ast.Load'>
Get symtable in <Scope: function analyze_scopes>, found in <Scope: module >, value <Node module:symtable>
Resolved to attr symtable of <Node module:symtable>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:symtable.symtable> (target obj <Node module:symtable> known but target attr symtable not resolved; maybe fwd ref or unanalyzed import)
Name process in context <class '_ast.Load'>
Get process in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process>
For-loop
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function analyze_scopes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function analyze_scopes> to <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c294a90>] [<_ast.Subscript object at 0x7ffa5c294ba8>]
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function analyze_scopes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c294cf8>]
Name scopes in context <class '_ast.Load'>
Get scopes in <Scope: function analyze_scopes>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function analyze_scopes> to <Node ???:*.scopes>
Assign ['oldsc'] [<_ast.Subscript object at 0x7ffa5c294e48>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.scopes>
Name oldsc in context <class '_ast.Store'>
Set oldsc in <Scope: function analyze_scopes> to <Node ???:*.scopes>
For-loop
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function analyze_scopes> to <Node ???:*.defs>
Name name in context <class '_ast.Load'>
Get name in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.defs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.defs>
Attribute defs of oldsc in context <class '_ast.Load'>
Resolve oldsc.defs in context <class '_ast.Load'>
Get oldsc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj oldsc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c2661d0>] [<_ast.Subscript object at 0x7ffa5c2662e8>]
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.defs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.defs>
Attribute defs of oldsc in context <class '_ast.Load'>
Resolve oldsc.defs in context <class '_ast.Load'>
Get oldsc in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.scopes>
Resolved to attr defs of <Node ???:*.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.defs> (target obj oldsc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node ???:*.defs>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to Name <Node ???:*.defs>
Call self.logger.debug
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function analyze_scopes>, found in <Scope: function analyze_scopes>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_current_class
Set get_current_class in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_current_class>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call len
Attribute class_stack of self in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function get_current_class>, found in <Scope: function get_current_class>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node ???:*.class_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node ???:*.class_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function get_current_class>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to Name <Node ???:*.len>
Attribute class_stack of self in context <class '_ast.Load'>
Resolve self.class_stack in context <class '_ast.Load'>
Get self in <Scope: function get_current_class>, found in <Scope: function get_current_class>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr class_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node ???:*.class_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef get_node_of_current_namespace
Set get_node_of_current_namespace in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call len
Attribute name_stack of self in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node ???:*.name_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node ???:*.name_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function get_node_of_current_namespace>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node ???:*.len>
Assign ['namespace'] [<_ast.Call object at 0x7ffa5c266c88>]
Call <_ast.Str object at 0x7ffa5c266cf8>.join
Attribute name_stack of self in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node ???:*.name_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute join of <_ast.Str object at 0x7ffa5c266cf8> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x7ffa5c266cf8>.join in context <class '_ast.Load'>
Resolved to attr join of <Node class:Str>
getattr join on <_ast.Str object at 0x7ffa5c266cf8> returns <Node attribute:Str.join>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:Str.join>
Name namespace in context <class '_ast.Store'>
Set namespace in <Scope: function get_node_of_current_namespace> to <Node attribute:Str.join>
Assign ['name'] [<_ast.Subscript object at 0x7ffa5c266f28>]
Attribute name_stack of self in context <class '_ast.Load'>
Resolve self.name_stack in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr name_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node ???:*.name_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function get_node_of_current_namespace> to <Node ???:*.name_stack>
Call self.get_node
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node attribute:Str.join>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node attribute:Str.join>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node ???:*.name_stack>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to Name <Node ???:*.name_stack>
Attribute NAMESPACE of Flavor in context <class '_ast.Load'>
Resolve Flavor.NAMESPACE in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node_of_current_namespace>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr NAMESPACE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node ???:*.NAMESPACE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node ???:*.NAMESPACE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function get_node_of_current_namespace>, found in <Scope: function get_node_of_current_namespace>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef get_value
Set get_value in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_value>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
FunctionDef find_scope
Set find_scope in <Scope: function get_value> to <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
For-loop
Call reversed
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function find_scope>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name reversed in context <class '_ast.Load'>
Get reversed in <Scope: function find_scope>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ???:*.reversed>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function find_scope> to <Node ???:*.reversed>
Name name in context <class '_ast.Load'>
Get name in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Resolved to attr defs of <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Resolved to attr defs of <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to Name <Node ???:*.reversed>
Assign ['sc'] [<_ast.Call object at 0x7ffa5c2699e8>]
Call find_scope
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Name find_scope in context <class '_ast.Load'>
Get find_scope in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function get_value> to <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Assign ['value'] [<_ast.Subscript object at 0x7ffa5c269be0>]
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Resolved to attr defs of <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> (target obj <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Name value in context <class '_ast.Store'>
Set value in <Scope: function get_value> to <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Call isinstance
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function get_value>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_value>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ???:*.isinstance>
Call self.logger.info
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function get_value>, found in <Scope: function get_value>, value <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_value>, found in <Scope: function get_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^>
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function get_value>, found in <Scope: function get_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef set_value
Set set_value in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.set_value>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
FunctionDef find_scope
Set find_scope in <Scope: function set_value> to <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
For-loop
Call reversed
Attribute scope_stack of self in context <class '_ast.Load'>
Resolve self.scope_stack in context <class '_ast.Load'>
Get self in <Scope: function find_scope>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scope_stack of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node ???:*.scope_stack> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name reversed in context <class '_ast.Load'>
Get reversed in <Scope: function find_scope>: no Node value (or name not in scope)
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ???:*.reversed>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function find_scope> to <Node ???:*.reversed>
Name name in context <class '_ast.Load'>
Get name in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.find_scope.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.find_scope.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Resolved to attr defs of <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node ???:*.defs> (target obj sc not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function find_scope>, found in <Scope: function find_scope>, value <Node ???:*.reversed>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to Name <Node ???:*.reversed>
Assign ['sc'] [<_ast.Call object at 0x7ffa5c26bef0>]
Call find_scope
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name find_scope in context <class '_ast.Load'>
Get find_scope in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function set_value> to <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Call isinstance
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function set_value>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_value>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ???:*.isinstance>
Assign [<_ast.Subscript object at 0x7ffa5c271208>] ['value']
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Resolved to attr defs of <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> (target obj <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Call self.logger.info
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function set_value>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Name sc in context <class '_ast.Load'>
Get sc in <Scope: function set_value>, found in <Scope: function set_value>, value <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope>
Name value in context <class '_ast.Load'>
Get value in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function set_value>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call self.logger.debug
Name name in context <class '_ast.Load'>
Get name in <Scope: function set_value>, found in <Scope: function set_value>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^>
Attribute debug of self.logger in context <class '_ast.Load'>
Resolve self.logger.debug in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function set_value>, found in <Scope: function set_value>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr debug of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.debug> (target obj <Node attribute:logging.getLogger> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_attribute
Set get_attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function get_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.TypeError>
Call isinstance
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Load of ast in context <class '_ast.Load'>
Resolve ast.Load in context <class '_ast.Load'>
Get ast in <Scope: function get_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Load of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Load> (target obj <Node module:ast> known but target attr Load not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
Call ValueError
Call type
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.type>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.ValueError>
Assign ['obj_node', 'attr_name'] [<_ast.Call object at 0x7ffa5c275358>]
Call self.resolve_attribute
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^>
Attribute resolve_attribute of self in context <class '_ast.Load'>
Resolve self.resolve_attribute in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name attr_name in context <class '_ast.Store'>
Set attr_name in <Scope: function get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function get_attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] [<_ast.Call object at 0x7ffa5c2756d8>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute ATTRIBUTE of Flavor in context <class '_ast.Load'>
Resolve Flavor.ATTRIBUTE in context <class '_ast.Load'>
Get Flavor in <Scope: function get_attribute>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr ATTRIBUTE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node ???:*.ATTRIBUTE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node ???:*.ATTRIBUTE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef lookup
Set lookup in <Scope: function get_attribute> to <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c275da0>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function lookup> to <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Resolved to attr defs of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function lookup>, found in <Scope: function lookup>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Resolved to attr defs of <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function lookup>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Assign ['value_node'] [<_ast.Call object at 0x7ffa5c27c1d0>]
Call lookup
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name lookup in context <class '_ast.Load'>
Get lookup in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Store'>
Set value_node in <Scope: function get_attribute> to <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node function:pyan.anutils.resolve_method_resolution_order>
For-loop
Call tail
Attribute mro of self in context <class '_ast.Load'>
Resolve self.mro in context <class '_ast.Load'>
Get self in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr mro of <Node class:pyan.analyzer.CallGraphVisitor>
getattr mro on self returns <Node function:pyan.anutils.resolve_method_resolution_order>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node function:pyan.anutils.resolve_method_resolution_order>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name tail in context <class '_ast.Load'>
Get tail in <Scope: function get_attribute>, found in <Scope: module >, value <Node function:pyan.anutils.tail>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.anutils.tail>
Name base_node in context <class '_ast.Store'>
Set base_node in <Scope: function get_attribute> to <Node function:pyan.anutils.tail>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c27c7b8>]
Call base_node.get_name
Attribute get_name of base_node in context <class '_ast.Load'>
Resolve base_node.get_name in context <class '_ast.Load'>
Get base_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.anutils.tail>
Resolved to attr get_name of <Node function:pyan.anutils.tail>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.anutils.tail.get_name> (target obj <Node function:pyan.anutils.tail> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_attribute> to <Node attribute:pyan.anutils.tail.get_name>
Assign ['value_node'] [<_ast.Call object at 0x7ffa5c27c8d0>]
Call lookup
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node attribute:pyan.anutils.tail.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node attribute:pyan.anutils.tail.get_name>
Name lookup in context <class '_ast.Load'>
Get lookup in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Store'>
Set value_node in <Scope: function get_attribute> to <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name base_node in context <class '_ast.Load'>
Get base_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.anutils.tail>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.anutils.tail>
Name value_node in context <class '_ast.Load'>
Get value_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup>
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function get_attribute>, found in <Scope: function get_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
FunctionDef set_attribute
Set set_attribute in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.set_attribute>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Call isinstance
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function set_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.TypeError>
Call isinstance
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Attribute Store of ast in context <class '_ast.Load'>
Resolve ast.Store in context <class '_ast.Load'>
Get ast in <Scope: function set_attribute>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Store of <Node module:ast>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Store> (target obj <Node module:ast> known but target attr Store not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Call ValueError
Call type
Attribute ctx of ast_node in context <class '_ast.Load'>
Resolve ast_node.ctx in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Resolved to attr ctx of <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^.ctx> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^> known but target attr ctx not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.type>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.ValueError>
Call isinstance
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function set_attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Assign ['obj_node', 'attr_name'] [<_ast.Call object at 0x7ffa5c27e8d0>]
Call self.resolve_attribute
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Attribute resolve_attribute of self in context <class '_ast.Load'>
Resolve self.resolve_attribute in context <class '_ast.Load'>
Get self in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr resolve_attribute of <Node class:pyan.analyzer.CallGraphVisitor>
getattr resolve_attribute on self returns <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name obj_node in context <class '_ast.Store'>
Set obj_node in <Scope: function set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name attr_name in context <class '_ast.Store'>
Set attr_name in <Scope: function set_attribute> to <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Call isinstance
Name obj_node in context <class '_ast.Load'>
Get obj_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function set_attribute>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node class:pyan.node.Node>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function set_attribute>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ???:*.isinstance>
Attribute namespace of obj_node in context <class '_ast.Load'>
Resolve obj_node.namespace in context <class '_ast.Load'>
Get obj_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr namespace of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns'] [<_ast.Call object at 0x7ffa5c27ec50>]
Call obj_node.get_name
Attribute get_name of obj_node in context <class '_ast.Load'>
Resolve obj_node.get_name in context <class '_ast.Load'>
Get obj_node in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Resolved to attr get_name of <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> (target obj <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['sc'] [<_ast.Subscript object at 0x7ffa5c27ee80>]
Attribute scopes of self in context <class '_ast.Load'>
Resolve self.scopes in context <class '_ast.Load'>
Get self in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr scopes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node ???:*.scopes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Name sc in context <class '_ast.Store'>
Set sc in <Scope: function set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Assign [<_ast.Subscript object at 0x7ffa5c27efd0>] ['new_value']
Name new_value in context <class '_ast.Load'>
Get new_value in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^>
Attribute defs of sc in context <class '_ast.Load'>
Resolve sc.defs in context <class '_ast.Load'>
Get sc in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Resolved to attr defs of <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> (target obj <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> known but target attr defs not resolved; maybe fwd ref or unanalyzed import)
Name attr_name in context <class '_ast.Load'>
Get attr_name in <Scope: function set_attribute>, found in <Scope: function set_attribute>, value <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
Use from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to Name <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute>
FunctionDef get_node
Set get_node in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Attribute UNSPECIFIED of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNSPECIFIED in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNSPECIFIED of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.UNSPECIFIED> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.UNSPECIFIED> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name n in context <class '_ast.Store'>
Set n in <Scope: function get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute namespace of n in context <class '_ast.Load'>
Resolve n.namespace in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Call Flavor.specificity
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute specificity of Flavor in context <class '_ast.Load'>
Resolve Flavor.specificity in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr specificity of <Node class:pyan.node.Flavor>
getattr specificity on Flavor returns <Node staticmethod:pyan.node.Flavor.specificity>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node staticmethod:pyan.node.Flavor.specificity>
Call Flavor.specificity
Attribute flavor of n in context <class '_ast.Load'>
Resolve n.flavor in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.flavor> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Attribute specificity of Flavor in context <class '_ast.Load'>
Resolve Flavor.specificity in context <class '_ast.Load'>
Get Flavor in <Scope: function get_node>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr specificity of <Node class:pyan.node.Flavor>
getattr specificity on Flavor returns <Node staticmethod:pyan.node.Flavor.specificity>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node staticmethod:pyan.node.Flavor.specificity>
Assign ['n.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute flavor of n in context <class '_ast.Store'>
Resolve n.flavor in context <class '_ast.Store'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute module_to_filename of self in context <class '_ast.Load'>
Resolve self.module_to_filename in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_to_filename of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.module_to_filename> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.module_to_filename> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['filename'] [<_ast.Subscript object at 0x7ffa5c282dd8>]
Attribute module_to_filename of self in context <class '_ast.Load'>
Resolve self.module_to_filename in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr module_to_filename of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.module_to_filename> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Assign ['filename'] ['self.filename']
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr filename of <Node class:pyan.analyzer.CallGraphVisitor>
getattr filename on self returns <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name filename in context <class '_ast.Store'>
Set filename in <Scope: function get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Assign ['n'] [<_ast.Call object at 0x7ffa5c286080>]
Call Node
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name Node in context <class '_ast.Load'>
Get Node in <Scope: function get_node>, found in <Scope: module >, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node method:pyan.node.Node.__init__> (call creates an instance)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node method:pyan.node.Node.__init__> (call creates an instance)
Name n in context <class '_ast.Store'>
Set n in <Scope: function get_node> to <Node class:pyan.node.Node>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call <_ast.Subscript object at 0x7ffa5c2863c8>.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node class:pyan.node.Node>
Attribute append of <_ast.Subscript object at 0x7ffa5c2863c8> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c2863c8>.append in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c2863c8> in <Scope: function get_node>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.append> (target obj <_ast.Subscript object at 0x7ffa5c2863c8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c286550>] ['n']
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node class:pyan.node.Node>
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_node>, found in <Scope: function get_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^>
Name n in context <class '_ast.Load'>
Get n in <Scope: function get_node>, found in <Scope: function get_node>, value <Node class:pyan.node.Node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to Name <Node class:pyan.node.Node>
FunctionDef get_parent_node
Set get_parent_node in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Attribute namespace of graph_node in context <class '_ast.Load'>
Resolve graph_node.namespace in context <class '_ast.Load'>
Get graph_node in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Assign ['ns', 'name'] [<_ast.Call object at 0x7ffa5c286a90>]
Call graph_node.namespace.rsplit
Attribute rsplit of graph_node.namespace in context <class '_ast.Load'>
Resolve graph_node.namespace.rsplit in context <class '_ast.Load'>
Resolve graph_node.namespace in context <class '_ast.Load'>
Get graph_node in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Unresolved, returning attr rsplit of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node ???:*.rsplit> (target obj graph_node.namespace not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_parent_node> to <Node ???:*.rsplit>
Name name in context <class '_ast.Store'>
Set name in <Scope: function get_parent_node> to <Node ???:*.rsplit>
Assign ['ns', 'name'] [<_ast.Str object at 0x7ffa5c286cf8>, 'graph_node.namespace']
Attribute namespace of graph_node in context <class '_ast.Load'>
Resolve graph_node.namespace in context <class '_ast.Load'>
Get graph_node in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function get_parent_node>: value None is not a Node
Name name in context <class '_ast.Store'>
Set name in <Scope: function get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Call self.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node ???:*.rsplit>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to Name <Node ???:*.rsplit>
Name name in context <class '_ast.Load'>
Get name in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to Name <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function get_parent_node>, found in <Scope: function get_parent_node>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
FunctionDef associate_node
Set associate_node in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.associate_node>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['graph_node.ast_node'] ['ast_node']
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Attribute ast_node of graph_node in context <class '_ast.Store'>
Resolve graph_node.ast_node in context <class '_ast.Store'>
Get graph_node in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Resolved to attr ast_node of <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Assign ['graph_node.filename'] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to Name <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Attribute filename of graph_node in context <class '_ast.Store'>
Resolve graph_node.filename in context <class '_ast.Store'>
Get graph_node in <Scope: function associate_node>, found in <Scope: function associate_node>, value <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
Resolved to attr filename of <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^>
FunctionDef add_defines_edge
Set add_defines_edge in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c28c710>] [<_ast.Call object at 0x7ffa5c28c828>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function add_defines_edge>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ???:*.set>
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Call <_ast.Subscript object at 0x7ffa5c28cb70>.add
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_defines_edge>, found in <Scope: function add_defines_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^>
Attribute add of <_ast.Subscript object at 0x7ffa5c28cb70> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c28cb70>.add in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c28cb70> in <Scope: function add_defines_edge>: no Node value (or name not in scope)
Resolved to attr add of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ???:*.add> (target obj <_ast.Subscript object at 0x7ffa5c28cb70> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['from_node.defined'] [<_ast.NameConstant object at 0x7ffa5c28cd68>]
Attribute defined of from_node in context <class '_ast.Store'>
Assign ['to_node.defined'] [<_ast.NameConstant object at 0x7ffa5c28ce48>]
Attribute defined of to_node in context <class '_ast.Store'>
FunctionDef add_uses_edge
Set add_uses_edge in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c299208>] [<_ast.Call object at 0x7ffa5c299320>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function add_uses_edge>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ???:*.set>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Call <_ast.Subscript object at 0x7ffa5c299668>.add
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute add of <_ast.Subscript object at 0x7ffa5c299668> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c299668>.add in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c299668> in <Scope: function add_uses_edge>: no Node value (or name not in scope)
Resolved to attr add of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ???:*.add> (target obj <_ast.Subscript object at 0x7ffa5c299668> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of to_node in context <class '_ast.Load'>
Resolve to_node.namespace in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_wild
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Attribute name of to_node in context <class '_ast.Load'>
Resolve to_node.name in context <class '_ast.Load'>
Get to_node in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute remove_wild of self in context <class '_ast.Load'>
Resolve self.remove_wild in context <class '_ast.Load'>
Get self in <Scope: function add_uses_edge>, found in <Scope: function add_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_wild of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_wild on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
FunctionDef remove_uses_edge
Set remove_uses_edge in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['u'] [<_ast.Subscript object at 0x7ffa5c299e10>]
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Name u in context <class '_ast.Store'>
Set u in <Scope: function remove_uses_edge> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Name u in context <class '_ast.Load'>
Get u in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Call u.remove
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Attribute remove of u in context <class '_ast.Load'>
Resolve u.remove in context <class '_ast.Load'>
Get u in <Scope: function remove_uses_edge>, found in <Scope: function remove_uses_edge>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Resolved to attr remove of <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^.remove> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^> known but target attr remove not resolved; maybe fwd ref or unanalyzed import)
FunctionDef remove_wild
Set remove_wild in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call <_ast.Call object at 0x7ffa5c29c588>.find
Attribute find of <_ast.Call object at 0x7ffa5c29c588> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c29c588>.find in context <class '_ast.Load'>
Unresolved function call as obj, returning attr find of unknown
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node ???:*.find> (target obj <_ast.Call object at 0x7ffa5c29c588> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Assign ['matching_wilds'] [<_ast.ListComp object at 0x7ffa5c29c898>]
ListComp
Name n in context <class '_ast.Load'>
Get n in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function listcomp>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name n in context <class '_ast.Store'>
Set n in <Scope: function listcomp> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Attribute namespace of n in context <class '_ast.Load'>
Resolve n.namespace in context <class '_ast.Load'>
Get n in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Resolved to attr namespace of <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> known but target attr namespace not resolved; maybe fwd ref or unanalyzed import)
Attribute name of n in context <class '_ast.Load'>
Resolve n.name in context <class '_ast.Load'>
Get n in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> (target obj <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function listcomp>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name matching_wilds in context <class '_ast.Store'>
Set matching_wilds in <Scope: function remove_wild> to <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Call len
Name matching_wilds in context <class '_ast.Load'>
Get matching_wilds in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function remove_wild>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ???:*.len>
Call len
Name matching_wilds in context <class '_ast.Load'>
Get matching_wilds in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function remove_wild>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ???:*.len>
Assign ['wild_node'] [<_ast.Subscript object at 0x7ffa5c29cf28>]
Name matching_wilds in context <class '_ast.Load'>
Get matching_wilds in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Name wild_node in context <class '_ast.Store'>
Set wild_node in <Scope: function remove_wild> to <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name wild_node in context <class '_ast.Load'>
Get wild_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.remove_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^>
Name wild_node in context <class '_ast.Load'>
Get wild_node in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to Name <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp>
Attribute remove_uses_edge of self in context <class '_ast.Load'>
Resolve self.remove_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function remove_wild>, found in <Scope: function remove_wild>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
FunctionDef contract_nonexistents
Set contract_nonexistents in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['new_uses_edges'] []
Name new_uses_edges in context <class '_ast.Store'>
Set new_uses_edges in <Scope: function contract_nonexistents>: value None is not a Node
Assign ['removed_uses_edges'] []
Name removed_uses_edges in context <class '_ast.Store'>
Set removed_uses_edges in <Scope: function contract_nonexistents>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function contract_nonexistents> to <Node ???:*.uses_edges>
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function contract_nonexistents> to <Node ???:*.uses_edges>
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Resolved to attr namespace of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute defined of n2 in context <class '_ast.Load'>
Resolve n2.defined in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Resolved to attr defined of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.defined> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.defined> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['n3'] [<_ast.Call object at 0x7ffa5c2a1b38>]
Call self.get_node
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Resolved to attr name of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.name> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.name> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute ast_node of n2 in context <class '_ast.Load'>
Resolve n2.ast_node in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Resolved to attr ast_node of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.ast_node> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.ast_node> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of self in context <class '_ast.Load'>
Resolve self.get_node in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Assign ['n3.defined'] [<_ast.NameConstant object at 0x7ffa5c2a1da0>]
Attribute defined of n3 in context <class '_ast.Store'>
Call new_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.uses_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute append of new_uses_edges in context <class '_ast.Load'>
Resolve new_uses_edges.append in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.append> (target obj new_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call removed_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.uses_edges>
Attribute append of removed_uses_edges in context <class '_ast.Load'>
Resolve removed_uses_edges.append in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node ???:*.append> (target obj removed_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.logger.info
Name n in context <class '_ast.Load'>
Get n in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.uses_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_node>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name new_uses_edges in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function contract_nonexistents> to <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function contract_nonexistents> to <Node ???:*.new_uses_edges>
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.new_uses_edges>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
For-loop
Name removed_uses_edges in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function contract_nonexistents>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function contract_nonexistents> to <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function contract_nonexistents> to <Node ???:*.removed_uses_edges>
Call self.remove_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to Name <Node ???:*.removed_uses_edges>
Attribute remove_uses_edge of self in context <class '_ast.Load'>
Resolve self.remove_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function contract_nonexistents>, found in <Scope: function contract_nonexistents>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
FunctionDef expand_unknowns
Set expand_unknowns in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['new_defines_edges'] []
Name new_defines_edges in context <class '_ast.Store'>
Set new_defines_edges in <Scope: function expand_unknowns>: value None is not a Node
For-loop
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function expand_unknowns> to <Node ???:*.defines_edges>
For-loop
Attribute defines_edges of self in context <class '_ast.Load'>
Resolve self.defines_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr defines_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.defines_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.defines_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function expand_unknowns> to <Node ???:*.defines_edges>
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.defines_edges>
Resolved to attr namespace of <Node ???:*.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.defines_edges>
Resolved to attr name of <Node ???:*.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.name> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.name> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function expand_unknowns> to <Node ???:*.name>
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.name>
Resolved to attr namespace of <Node ???:*.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.namespace> (target obj n3 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call new_defines_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.defines_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.name>
Attribute append of new_defines_edges in context <class '_ast.Load'>
Resolve new_defines_edges.append in context <class '_ast.Load'>
Get new_defines_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.append> (target obj new_defines_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name new_defines_edges in context <class '_ast.Load'>
Get new_defines_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function expand_unknowns> to <Node ???:*.new_defines_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function expand_unknowns> to <Node ???:*.new_defines_edges>
Call self.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Attribute add_defines_edge of self in context <class '_ast.Load'>
Resolve self.add_defines_edge in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_defines_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_defines_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_defines_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_defines_edges>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['new_uses_edges'] []
Name new_uses_edges in context <class '_ast.Store'>
Set new_uses_edges in <Scope: function expand_unknowns>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function expand_unknowns> to <Node ???:*.uses_edges>
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function expand_unknowns> to <Node ???:*.uses_edges>
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.uses_edges>
Resolved to attr namespace of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.uses_edges>
Resolved to attr name of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.name> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function expand_unknowns> to <Node ???:*.name>
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.name>
Resolved to attr namespace of <Node ???:*.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.namespace> (target obj n3 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call new_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.uses_edges>
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.name>
Attribute append of new_uses_edges in context <class '_ast.Load'>
Resolve new_uses_edges.append in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.append> (target obj new_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name new_uses_edges in context <class '_ast.Load'>
Get new_uses_edges in <Scope: function expand_unknowns>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function expand_unknowns> to <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function expand_unknowns> to <Node ???:*.new_uses_edges>
Call self.add_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Call self.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.new_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.new_uses_edges>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function expand_unknowns> to <Node ???:*.nodes>
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to Name <Node ???:*.nodes>
Name n in context <class '_ast.Store'>
Set n in <Scope: function expand_unknowns> to <Node ???:*.nodes>
Attribute namespace of n in context <class '_ast.Load'>
Resolve n.namespace in context <class '_ast.Load'>
Get n in <Scope: function expand_unknowns>, found in <Scope: function expand_unknowns>, value <Node ???:*.nodes>
Resolved to attr namespace of <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node ???:*.namespace> (target obj n not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['n.defined'] [<_ast.NameConstant object at 0x7ffa5c3ed860>]
Attribute defined of n in context <class '_ast.Store'>
FunctionDef cull_inherited
Set cull_inherited in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['removed_uses_edges'] []
Name removed_uses_edges in context <class '_ast.Store'>
Set removed_uses_edges in <Scope: function cull_inherited>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function cull_inherited> to <Node ???:*.uses_edges>
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function cull_inherited> to <Node ???:*.uses_edges>
Assign ['inherited'] [<_ast.NameConstant object at 0x7ffa5c3edd30>]
Name inherited in context <class '_ast.Store'>
Set inherited in <Scope: function cull_inherited>: value None is not a Node
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Name n3 in context <class '_ast.Store'>
Set n3 in <Scope: function cull_inherited> to <Node ???:*.uses_edges>
Attribute name of n3 in context <class '_ast.Load'>
Resolve n3.name in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Resolved to attr name of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.name> (target obj n3 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.name> (target obj n3 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute name of n2 in context <class '_ast.Load'>
Resolve n2.name in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Resolved to attr name of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.name> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Resolved to attr namespace of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Resolved to attr namespace of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.namespace> (target obj n3 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of n3 in context <class '_ast.Load'>
Resolve n3.namespace in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Resolved to attr namespace of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.namespace> (target obj n3 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of n2 in context <class '_ast.Load'>
Resolve n2.namespace in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Resolved to attr namespace of <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.namespace> (target obj n2 not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['pn2'] [<_ast.Call object at 0x7ffa5c3f0400>]
Call self.get_parent_node
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Attribute get_parent_node of self in context <class '_ast.Load'>
Resolve self.get_parent_node in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_parent_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_parent_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn2 in context <class '_ast.Store'>
Set pn2 in <Scope: function cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Assign ['pn3'] [<_ast.Call object at 0x7ffa5c3f0550>]
Call self.get_parent_node
Name n3 in context <class '_ast.Load'>
Get n3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Attribute get_parent_node of self in context <class '_ast.Load'>
Resolve self.get_parent_node in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_parent_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_parent_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn3 in context <class '_ast.Store'>
Set pn3 in <Scope: function cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn2 in context <class '_ast.Load'>
Get pn2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name pn3 in context <class '_ast.Load'>
Get pn3 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name pn2 in context <class '_ast.Load'>
Get pn2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Assign ['inherited'] [<_ast.NameConstant object at 0x7ffa5c3f0978>]
Name inherited in context <class '_ast.Store'>
Set inherited in <Scope: function cull_inherited>: value None is not a Node
Name inherited in context <class '_ast.Load'>
Get inherited in <Scope: function cull_inherited>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.inherited>
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call removed_uses_edges.append
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Attribute append of removed_uses_edges in context <class '_ast.Load'>
Resolve removed_uses_edges.append in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function cull_inherited>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node ???:*.append> (target obj removed_uses_edges not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call self.logger.info
Name n in context <class '_ast.Load'>
Get n in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.uses_edges>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
For-loop
Name removed_uses_edges in context <class '_ast.Load'>
Get removed_uses_edges in <Scope: function cull_inherited>: no Node value (or name not in scope)
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function cull_inherited> to <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function cull_inherited> to <Node ???:*.removed_uses_edges>
Call self.remove_uses_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node ???:*.removed_uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to Name <Node ???:*.removed_uses_edges>
Attribute remove_uses_edge of self in context <class '_ast.Load'>
Resolve self.remove_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function cull_inherited>, found in <Scope: function cull_inherited>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr remove_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr remove_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge>
FunctionDef collapse_inner
Set collapse_inner in <Scope: class CallGraphVisitor> to <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner>
Method def: setting self name "self" to <Node class:pyan.analyzer.CallGraphVisitor>
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function collapse_inner> to <Node ???:*.nodes>
Name name in context <class '_ast.Load'>
Get name in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
For-loop
Attribute nodes of self in context <class '_ast.Load'>
Resolve self.nodes in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr nodes of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node ???:*.nodes> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Name n in context <class '_ast.Store'>
Set n in <Scope: function collapse_inner> to <Node ???:*.nodes>
Assign ['pn'] [<_ast.Call object at 0x7ffa5c3f5780>]
Call self.get_parent_node
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Attribute get_parent_node of self in context <class '_ast.Load'>
Resolve self.get_parent_node in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr get_parent_node of <Node class:pyan.analyzer.CallGraphVisitor>
getattr get_parent_node on self returns <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name pn in context <class '_ast.Store'>
Set pn in <Scope: function collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Attribute uses_edges of self in context <class '_ast.Load'>
Resolve self.uses_edges in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr uses_edges of <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node ???:*.uses_edges> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function collapse_inner> to <Node ???:*.nodes>
Call self.logger.info
Name n in context <class '_ast.Load'>
Get n in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Name pn in context <class '_ast.Load'>
Get pn in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr logger of <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Call self.add_uses_edge
Name pn in context <class '_ast.Load'>
Get pn in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node ???:*.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to Name <Node ???:*.nodes>
Attribute add_uses_edge of self in context <class '_ast.Load'>
Resolve self.add_uses_edge in context <class '_ast.Load'>
Get self in <Scope: function collapse_inner>, found in <Scope: function collapse_inner>, value <Node class:pyan.analyzer.CallGraphVisitor>
Resolved to attr add_uses_edge of <Node class:pyan.analyzer.CallGraphVisitor>
getattr add_uses_edge on self returns <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Use from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge>
Assign ['n.defined'] [<_ast.NameConstant object at 0x7ffa5c3f5f60>]
Attribute defined of n in context <class '_ast.Store'>
========== pass 2, file 'pyan/anutils.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
Import ['os.path']
Set: name os.path not in scope
Use from <Node module:pyan.anutils> to Import <Node module:os.path>
Import ['ast']
Set ast in <Scope: module > to <Node module:ast>
Use from <Node module:pyan.anutils> to Import <Node module:ast>
ImportFrom: from node import ['Flavor']
Use from <Node module:pyan.anutils> to ImportFrom <Node module:node>
Set Flavor in <Scope: module > to <Node class:pyan.node.Flavor>
From setting name Flavor to <Node class:pyan.node.Flavor>
FunctionDef head
Set head in <Scope: module > to <Node function:pyan.anutils.head>
Call len
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function head>, found in <Scope: function head>, value <Node ---:pyan.anutils.head.^^^argument^^^>
Use from <Node function:pyan.anutils.head> to Name <Node ---:pyan.anutils.head.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function head>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.head> to Name <Node ???:*.len>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function head>, found in <Scope: function head>, value <Node ---:pyan.anutils.head.^^^argument^^^>
Use from <Node function:pyan.anutils.head> to Name <Node ---:pyan.anutils.head.^^^argument^^^>
FunctionDef tail
Set tail in <Scope: module > to <Node function:pyan.anutils.tail>
Call len
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function tail>, found in <Scope: function tail>, value <Node ---:pyan.anutils.tail.^^^argument^^^>
Use from <Node function:pyan.anutils.tail> to Name <Node ---:pyan.anutils.tail.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function tail>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.tail> to Name <Node ???:*.len>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function tail>, found in <Scope: function tail>, value <Node ---:pyan.anutils.tail.^^^argument^^^>
Use from <Node function:pyan.anutils.tail> to Name <Node ---:pyan.anutils.tail.^^^argument^^^>
FunctionDef get_module_name
Set get_module_name in <Scope: module > to <Node function:pyan.anutils.get_module_name>
Call os.path.basename
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute basename of os.path in context <class '_ast.Load'>
Resolve os.path.basename in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr basename of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.basename> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call get_module_name
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function get_module_name>, found in <Scope: module >, value <Node function:pyan.anutils.get_module_name>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node function:pyan.anutils.get_module_name>
Assign ['init_path'] [<_ast.Call object at 0x7ffa5c5e3978>]
Call os.path.join
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute join of os.path in context <class '_ast.Load'>
Resolve os.path.join in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr join of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name init_path in context <class '_ast.Store'>
Set init_path in <Scope: function get_module_name> to <Node ???:*.join>
Assign ['mod_name'] [<_ast.Call object at 0x7ffa5c5e3c18>]
Call <_ast.Call object at 0x7ffa5c5e3b70>.replace
Attribute replace of <_ast.Call object at 0x7ffa5c5e3b70> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c5e3b70>.replace in context <class '_ast.Load'>
Unresolved function call as obj, returning attr replace of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.replace> (target obj <_ast.Call object at 0x7ffa5c5e3b70> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Store'>
Set mod_name in <Scope: function get_module_name> to <Node ???:*.replace>
Call os.path.exists
Name init_path in context <class '_ast.Load'>
Get init_path in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.join>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.join>
Attribute exists of os.path in context <class '_ast.Load'>
Resolve os.path.exists in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr exists of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.replace>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.replace>
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.replace>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.replace>
Call get_module_name
Call os.path.dirname
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ---:pyan.anutils.get_module_name.^^^argument^^^>
Attribute dirname of os.path in context <class '_ast.Load'>
Resolve os.path.dirname in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function get_module_name>: no Node value (or name not in scope)
Resolved to attr path of None
Unresolved, returning attr dirname of unknown
Use from <Node function:pyan.anutils.get_module_name> to <Node ???:*.dirname> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name get_module_name in context <class '_ast.Load'>
Get get_module_name in <Scope: function get_module_name>, found in <Scope: module >, value <Node function:pyan.anutils.get_module_name>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node function:pyan.anutils.get_module_name>
Name mod_name in context <class '_ast.Load'>
Get mod_name in <Scope: function get_module_name>, found in <Scope: function get_module_name>, value <Node ???:*.replace>
Use from <Node function:pyan.anutils.get_module_name> to Name <Node ???:*.replace>
FunctionDef format_alias
Set format_alias in <Scope: module > to <Node function:pyan.anutils.format_alias>
Call isinstance
Name x in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to Name <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Attribute alias of ast in context <class '_ast.Load'>
Resolve ast.alias in context <class '_ast.Load'>
Get ast in <Scope: function format_alias>, found in <Scope: module >, value <Node module:ast>
Resolved to attr alias of <Node module:ast>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:ast.alias> (target obj <Node module:ast> known but target attr alias not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function format_alias>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.isinstance>
Call TypeError
Call type
Name x in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to Name <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Name type in context <class '_ast.Load'>
Get type in <Scope: function format_alias>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.type>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function format_alias>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.format_alias> to Name <Node ???:*.TypeError>
Attribute asname of x in context <class '_ast.Load'>
Resolve x.asname in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr asname of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.asname> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute name of x in context <class '_ast.Load'>
Resolve x.name in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
Attribute asname of x in context <class '_ast.Load'>
Resolve x.asname in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr asname of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.asname> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr asname not resolved; maybe fwd ref or unanalyzed import)
Attribute name of x in context <class '_ast.Load'>
Resolve x.name in context <class '_ast.Load'>
Get x in <Scope: function format_alias>, found in <Scope: function format_alias>, value <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Resolved to attr name of <Node ---:pyan.anutils.format_alias.^^^argument^^^>
Use from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> (target obj <Node ---:pyan.anutils.format_alias.^^^argument^^^> known but target attr name not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_ast_node_name
Set get_ast_node_name in <Scope: module > to <Node function:pyan.anutils.get_ast_node_name>
Call isinstance
Name x in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Attribute Attribute of ast in context <class '_ast.Load'>
Resolve ast.Attribute in context <class '_ast.Load'>
Get ast in <Scope: function get_ast_node_name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Attribute of <Node module:ast>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Attribute> (target obj <Node module:ast> known but target attr Attribute not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_ast_node_name>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ???:*.isinstance>
Call get_ast_node_name
Attribute value of x in context <class '_ast.Load'>
Resolve x.value in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Resolved to attr value of <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.value> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name get_ast_node_name in context <class '_ast.Load'>
Get get_ast_node_name in <Scope: function get_ast_node_name>, found in <Scope: module >, value <Node function:pyan.anutils.get_ast_node_name>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node function:pyan.anutils.get_ast_node_name>
Attribute attr of x in context <class '_ast.Load'>
Resolve x.attr in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Resolved to attr attr of <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.attr> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr attr not resolved; maybe fwd ref or unanalyzed import)
Call isinstance
Name x in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Attribute Name of ast in context <class '_ast.Load'>
Resolve ast.Name in context <class '_ast.Load'>
Get ast in <Scope: function get_ast_node_name>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Name of <Node module:ast>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Name> (target obj <Node module:ast> known but target attr Name not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_ast_node_name>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ???:*.isinstance>
Attribute id of x in context <class '_ast.Load'>
Resolve x.id in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.id> (target obj <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Load'>
Get x in <Scope: function get_ast_node_name>, found in <Scope: function get_ast_node_name>, value <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
Use from <Node function:pyan.anutils.get_ast_node_name> to Name <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^>
FunctionDef sanitize_exprs
Set sanitize_exprs in <Scope: module > to <Node function:pyan.anutils.sanitize_exprs>
FunctionDef process
Set process in <Scope: function sanitize_exprs> to <Node function:pyan.anutils.sanitize_exprs.process>
Call isinstance
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Attribute Tuple of ast in context <class '_ast.Load'>
Resolve ast.Tuple in context <class '_ast.Load'>
Get ast in <Scope: function process>, found in <Scope: module >, value <Node module:ast>
Resolved to attr Tuple of <Node module:ast>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.Tuple> (target obj <Node module:ast> known but target attr Tuple not resolved; maybe fwd ref or unanalyzed import)
Attribute List of ast in context <class '_ast.Load'>
Resolve ast.List in context <class '_ast.Load'>
Get ast in <Scope: function process>, found in <Scope: module >, value <Node module:ast>
Resolved to attr List of <Node module:ast>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.List> (target obj <Node module:ast> known but target attr List not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function process>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ???:*.isinstance>
Attribute elts of expr in context <class '_ast.Load'>
Resolve expr.elts in context <class '_ast.Load'>
Get expr in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Resolved to attr elts of <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:pyan.anutils.sanitize_exprs.process.^^^argument^^^.elts> (target obj <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^> known but target attr elts not resolved; maybe fwd ref or unanalyzed import)
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function process>, found in <Scope: function process>, value <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs.process> to Name <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^>
Call isinstance
Name exprs in context <class '_ast.Load'>
Get exprs in <Scope: function sanitize_exprs>, found in <Scope: function sanitize_exprs>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name tuple in context <class '_ast.Load'>
Get tuple in <Scope: function sanitize_exprs>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.tuple>
Name list in context <class '_ast.Load'>
Get list in <Scope: function sanitize_exprs>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.list>
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function sanitize_exprs>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ???:*.isinstance>
ListComp
Call process
Name expr in context <class '_ast.Load'>
Get expr in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name process in context <class '_ast.Load'>
Get process in <Scope: function listcomp>, found in <Scope: function sanitize_exprs>, value <Node function:pyan.anutils.sanitize_exprs.process>
Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node function:pyan.anutils.sanitize_exprs.process>
Name exprs in context <class '_ast.Load'>
Get exprs in <Scope: function listcomp>, found in <Scope: function sanitize_exprs>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name expr in context <class '_ast.Store'>
Set expr in <Scope: function listcomp> to <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Call process
Name exprs in context <class '_ast.Load'>
Get exprs in <Scope: function sanitize_exprs>, found in <Scope: function sanitize_exprs>, value <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^>
Name process in context <class '_ast.Load'>
Get process in <Scope: function sanitize_exprs>, found in <Scope: function sanitize_exprs>, value <Node function:pyan.anutils.sanitize_exprs.process>
Use from <Node function:pyan.anutils.sanitize_exprs> to Name <Node function:pyan.anutils.sanitize_exprs.process>
FunctionDef resolve_method_resolution_order
Set resolve_method_resolution_order in <Scope: module > to <Node function:pyan.anutils.resolve_method_resolution_order>
ClassDef LinearizationImpossible
Set LinearizationImpossible in <Scope: function resolve_method_resolution_order> to <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Name Exception in context <class '_ast.Load'>
Get Exception in <Scope: class LinearizationImpossible>: no Node value (or name not in scope)
Use from <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible> to Name <Node ???:*.Exception>
ImportFrom: from functools import ['reduce']
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to ImportFrom <Node module:functools>
Set reduce in <Scope: function resolve_method_resolution_order> to <Node import:functools.reduce>
From setting name reduce to <Node import:functools.reduce>
ImportFrom: from operator import ['add']
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to ImportFrom <Node module:operator>
Set add in <Scope: function resolve_method_resolution_order> to <Node import:operator.add>
From setting name add to <Node import:operator.add>
FunctionDef C3_find_good_head
Set C3_find_good_head in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Assign ['flat_tails'] [<_ast.Call object at 0x7ffa5c495e80>]
Call reduce
Name add in context <class '_ast.Load'>
Get add in <Scope: function C3_find_good_head>, found in <Scope: function resolve_method_resolution_order>, value <Node import:operator.add>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:operator.add>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name reduce in context <class '_ast.Load'>
Get reduce in <Scope: function C3_find_good_head>, found in <Scope: function resolve_method_resolution_order>, value <Node import:functools.reduce>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:functools.reduce>
Name flat_tails in context <class '_ast.Store'>
Set flat_tails in <Scope: function C3_find_good_head> to <Node import:functools.reduce>
For-loop
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name hd in context <class '_ast.Store'>
Set hd in <Scope: function C3_find_good_head> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name flat_tails in context <class '_ast.Load'>
Get flat_tails in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node import:functools.reduce>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node import:functools.reduce>
Call LinearizationImpossible
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Name LinearizationImpossible in context <class '_ast.Load'>
Get LinearizationImpossible in <Scope: function C3_find_good_head>, found in <Scope: function resolve_method_resolution_order>, value <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node method:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible.__init__> (call creates an instance)
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_find_good_head>, found in <Scope: function C3_find_good_head>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^>
FunctionDef remove_all
Set remove_all in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
ListComp
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function remove_all>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Name elt in context <class '_ast.Load'>
Get elt in <Scope: function listcomp>, found in <Scope: function remove_all>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^>
FunctionDef remove_all_in
Set remove_all_in in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
ListComp
Call remove_all
Name elt in context <class '_ast.Load'>
Get elt in <Scope: function listcomp>, found in <Scope: function remove_all_in>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Name remove_all in context <class '_ast.Load'>
Get remove_all in <Scope: function listcomp>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function listcomp>, found in <Scope: function remove_all_in>, value <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
Name lst in context <class '_ast.Store'>
Set lst in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^>
FunctionDef C3_merge
Set C3_merge in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Assign ['out'] []
Name out in context <class '_ast.Store'>
Set out in <Scope: function C3_merge>: value None is not a Node
Call logger.debug
Name out in context <class '_ast.Load'>
Get out in <Scope: function C3_merge>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.out>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['heads'] [<_ast.ListComp object at 0x7ffa5c5e7cf8>]
ListComp
Call head
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name head in context <class '_ast.Load'>
Get head in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.head>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.head>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function listcomp>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name lst in context <class '_ast.Store'>
Set lst in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Call head
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name head in context <class '_ast.Load'>
Get head in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.head>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.head>
Name heads in context <class '_ast.Store'>
Set heads in <Scope: function C3_merge> to <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Call len
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function C3_merge>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.len>
Assign ['tails'] [<_ast.ListComp object at 0x7ffa5c4922e8>]
ListComp
Call tail
Name lst in context <class '_ast.Load'>
Get lst in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name tail in context <class '_ast.Load'>
Get tail in <Scope: function listcomp>, found in <Scope: module >, value <Node function:pyan.anutils.tail>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node function:pyan.anutils.tail>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function listcomp>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name lst in context <class '_ast.Store'>
Set lst in <Scope: function listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name tails in context <class '_ast.Store'>
Set tails in <Scope: function C3_merge> to <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Call logger.debug
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['hd'] [<_ast.Call object at 0x7ffa5c492b38>]
Call C3_find_good_head
Name heads in context <class '_ast.Load'>
Get heads in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name tails in context <class '_ast.Load'>
Get tails in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp>
Name C3_find_good_head in context <class '_ast.Load'>
Get C3_find_good_head in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Name hd in context <class '_ast.Store'>
Set hd in <Scope: function C3_merge> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Call logger.debug
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call out.append
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Attribute append of out in context <class '_ast.Load'>
Resolve out.append in context <class '_ast.Load'>
Get out in <Scope: function C3_merge>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node ???:*.append> (target obj out not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['lists'] [<_ast.Call object at 0x7ffa5c492f60>]
Call remove_all_in
Name hd in context <class '_ast.Load'>
Get hd in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head>
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_merge>, found in <Scope: function C3_merge>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^>
Name remove_all_in in context <class '_ast.Load'>
Get remove_all_in in <Scope: function C3_merge>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Name lists in context <class '_ast.Store'>
Set lists in <Scope: function C3_merge> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>
Name out in context <class '_ast.Load'>
Get out in <Scope: function C3_merge>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to Name <Node ???:*.out>
Assign ['mro'] [<_ast.Dict object at 0x7ffa5c492668>]
Name mro in context <class '_ast.Store'>
Set mro in <Scope: function resolve_method_resolution_order>: value None is not a Node
Assign ['memo'] [<_ast.Dict object at 0x7ffa5c492588>]
Name memo in context <class '_ast.Store'>
Set memo in <Scope: function resolve_method_resolution_order>: value None is not a Node
FunctionDef C3_linearize
Set C3_linearize in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call seen.add
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute add of seen in context <class '_ast.Load'>
Resolve seen.add in context <class '_ast.Load'>
Get seen in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ???:*.set>
Resolved to attr add of <Node ???:*.set>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.add> (target obj seen not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Call len
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.len>
Assign [<_ast.Subscript object at 0x7ffa5c48d5c0>] ['node']
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Assign ['lists'] []
Name lists in context <class '_ast.Store'>
Set lists in <Scope: function C3_linearize>: value None is not a Node
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function C3_linearize> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name seen in context <class '_ast.Load'>
Get seen in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ???:*.set>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.set>
New edge added for Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.set>
Call lists.append
Call C3_linearize
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name C3_linearize in context <class '_ast.Load'>
Get C3_linearize in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Attribute append of lists in context <class '_ast.Load'>
Resolve lists.append in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.append> (target obj lists not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Call lists.append
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute append of lists in context <class '_ast.Load'>
Resolve lists.append in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ???:*.append> (target obj lists not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call logger.debug
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.lists>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c48acc0>] [<_ast.BinOp object at 0x7ffa5c48abe0>]
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Call C3_merge
Name lists in context <class '_ast.Load'>
Get lists in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.lists>
Name C3_merge in context <class '_ast.Load'>
Get C3_merge in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function C3_linearize>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function C3_linearize>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function C3_linearize>, found in <Scope: function C3_linearize>, value <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^>
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Store'>
Set node in <Scope: function resolve_method_resolution_order> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['seen'] [<_ast.Call object at 0x7ffa5c48a470>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.set>
Name seen in context <class '_ast.Store'>
Set seen in <Scope: function resolve_method_resolution_order> to <Node ???:*.set>
Assign [<_ast.Subscript object at 0x7ffa5c48a4a8>] [<_ast.Call object at 0x7ffa5c48a710>]
Call C3_linearize
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name C3_linearize in context <class '_ast.Load'>
Get C3_linearize in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize>
Name mro in context <class '_ast.Load'>
Get mro in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name LinearizationImpossible in context <class '_ast.Load'>
Get LinearizationImpossible in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node class:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible>
Call logger.error
Name e in context <class '_ast.Load'>
Get e in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.e>
Attribute error of logger in context <class '_ast.Load'>
Resolve logger.error in context <class '_ast.Load'>
Get logger in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr error of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.error> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr error not resolved; maybe fwd ref or unanalyzed import)
Assign ['memo'] [<_ast.Dict object at 0x7ffa5c487e80>]
Name memo in context <class '_ast.Store'>
Set memo in <Scope: function resolve_method_resolution_order>: value None is not a Node
FunctionDef lookup_bases_recursive
Set lookup_bases_recursive in <Scope: function resolve_method_resolution_order> to <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Call seen.add
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Attribute add of seen in context <class '_ast.Load'>
Resolve seen.add in context <class '_ast.Load'>
Get seen in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ???:*.set>
Resolved to attr add of <Node ???:*.set>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node ???:*.add> (target obj seen not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function lookup_bases_recursive>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
Assign ['out'] ['node']
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name out in context <class '_ast.Store'>
Set out in <Scope: function lookup_bases_recursive> to <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name baseclass_node in context <class '_ast.Store'>
Set baseclass_node in <Scope: function lookup_bases_recursive> to <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name seen in context <class '_ast.Load'>
Get seen in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node ???:*.set>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.set>
Call out.append
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Attribute append of out in context <class '_ast.Load'>
Resolve out.append in context <class '_ast.Load'>
Get out in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Resolved to attr append of <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call out.extend
Call lookup_bases_recursive
Name baseclass_node in context <class '_ast.Load'>
Get baseclass_node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name lookup_bases_recursive in context <class '_ast.Load'>
Get lookup_bases_recursive in <Scope: function lookup_bases_recursive>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Attribute extend of out in context <class '_ast.Load'>
Resolve out.extend in context <class '_ast.Load'>
Get out in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Resolved to attr extend of <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.extend> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> known but target attr extend not resolved; maybe fwd ref or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c487cc0>] ['out']
Name out in context <class '_ast.Load'>
Get out in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function lookup_bases_recursive>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Name memo in context <class '_ast.Load'>
Get memo in <Scope: function lookup_bases_recursive>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ???:*.memo>
Name node in context <class '_ast.Load'>
Get node in <Scope: function lookup_bases_recursive>, found in <Scope: function lookup_bases_recursive>, value <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^>
Assign ['mro'] [<_ast.Dict object at 0x7ffa5c4870b8>]
Name mro in context <class '_ast.Store'>
Set mro in <Scope: function resolve_method_resolution_order>: value None is not a Node
For-loop
Name class_base_nodes in context <class '_ast.Load'>
Get class_base_nodes in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name node in context <class '_ast.Store'>
Set node in <Scope: function resolve_method_resolution_order> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Call logger.debug
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Attribute debug of logger in context <class '_ast.Load'>
Resolve logger.debug in context <class '_ast.Load'>
Get logger in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Resolved to attr debug of <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> (target obj <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> known but target attr debug not resolved; maybe fwd ref or unanalyzed import)
Assign ['seen'] [<_ast.Call object at 0x7ffa5c47de48>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.set>
Name seen in context <class '_ast.Store'>
Set seen in <Scope: function resolve_method_resolution_order> to <Node ???:*.set>
Assign [<_ast.Subscript object at 0x7ffa5c47d668>] [<_ast.Call object at 0x7ffa5c47db00>]
Call lookup_bases_recursive
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name lookup_bases_recursive in context <class '_ast.Load'>
Get lookup_bases_recursive in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive>
Name mro in context <class '_ast.Load'>
Get mro in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
Name node in context <class '_ast.Load'>
Get node in <Scope: function resolve_method_resolution_order>, found in <Scope: function resolve_method_resolution_order>, value <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^>
Name mro in context <class '_ast.Load'>
Get mro in <Scope: function resolve_method_resolution_order>: no Node value (or name not in scope)
Use from <Node function:pyan.anutils.resolve_method_resolution_order> to Name <Node ???:*.mro>
ClassDef UnresolvedSuperCallError
Set UnresolvedSuperCallError in <Scope: module > to <Node class:pyan.anutils.UnresolvedSuperCallError>
Name Exception in context <class '_ast.Load'>
Get Exception in <Scope: class UnresolvedSuperCallError>: no Node value (or name not in scope)
Use from <Node class:pyan.anutils.UnresolvedSuperCallError> to Name <Node ???:*.Exception>
ClassDef Scope
Set Scope in <Scope: module > to <Node class:pyan.anutils.Scope>
FunctionDef __init__
Set __init__ in <Scope: class Scope> to <Node method:pyan.anutils.Scope.__init__>
Method def: setting self name "self" to <Node class:pyan.anutils.Scope>
Assign ['name'] [<_ast.Call object at 0x7ffa5c47dc50>]
Call table.get_name
Attribute get_name of table in context <class '_ast.Load'>
Resolve table.get_name in context <class '_ast.Load'>
Get table in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Resolved to attr get_name of <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function __init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Name name in context <class '_ast.Load'>
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node method:pyan.anutils.Scope.__init__> to Name <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Assign ['name'] [<_ast.Str object at 0x7ffa5c47d3c8>]
Name name in context <class '_ast.Store'>
Set name in <Scope: function __init__>: value None is not a Node
Assign ['self.name'] ['name']
Name name in context <class '_ast.Load'>
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node method:pyan.anutils.Scope.__init__> to Name <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Attribute name of self in context <class '_ast.Store'>
Resolve self.name in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.Scope>
Resolved to attr name of <Node class:pyan.anutils.Scope>
setattr name on self to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Assign ['self.type'] [<_ast.Call object at 0x7ffa5c47d208>]
Call table.get_type
Attribute get_type of table in context <class '_ast.Load'>
Resolve table.get_type in context <class '_ast.Load'>
Get table in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Resolved to attr get_type of <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_type not resolved; maybe fwd ref or unanalyzed import)
Attribute type of self in context <class '_ast.Store'>
Resolve self.type in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.Scope>
Resolved to attr type of <Node class:pyan.anutils.Scope>
setattr type on self to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
Assign ['self.defs'] [<_ast.DictComp object at 0x7ffa5c47d4e0>]
DictComp
Name iden in context <class '_ast.Load'>
Get iden in <Scope: function dictcomp>, found in <Scope: function dictcomp>, value <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers>
Use from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to Name <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers>
Call table.get_identifiers
Attribute get_identifiers of table in context <class '_ast.Load'>
Resolve table.get_identifiers in context <class '_ast.Load'>
Get table in <Scope: function dictcomp>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Resolved to attr get_identifiers of <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^>
Use from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers> (target obj <Node ---:pyan.anutils.Scope.__init__.^^^argument^^^> known but target attr get_identifiers not resolved; maybe fwd ref or unanalyzed import)
Name iden in context <class '_ast.Store'>
Set iden in <Scope: function dictcomp> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers>
Attribute defs of self in context <class '_ast.Store'>
Resolve self.defs in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.Scope>
Resolved to attr defs of <Node class:pyan.anutils.Scope>
setattr defs on self to <Node namespace:pyan.anutils.Scope.__init__.dictcomp>
FunctionDef __repr__
Set __repr__ in <Scope: class Scope> to <Node method:pyan.anutils.Scope.__repr__>
Method def: setting self name "self" to <Node class:pyan.anutils.Scope>
Attribute type of self in context <class '_ast.Load'>
Resolve self.type in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.anutils.Scope>
Resolved to attr type of <Node class:pyan.anutils.Scope>
getattr type on self returns <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
Use from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.anutils.Scope>
Resolved to attr name of <Node class:pyan.anutils.Scope>
getattr name on self returns <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Use from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
ClassDef ExecuteInInnerScope
Set ExecuteInInnerScope in <Scope: module > to <Node class:pyan.anutils.ExecuteInInnerScope>
FunctionDef __init__
Set __init__ in <Scope: class ExecuteInInnerScope> to <Node method:pyan.anutils.ExecuteInInnerScope.__init__>
Method def: setting self name "self" to <Node class:pyan.anutils.ExecuteInInnerScope>
Assign ['self.analyzer'] ['analyzer']
Name analyzer in context <class '_ast.Load'>
Get analyzer in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__init__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute analyzer of self in context <class '_ast.Store'>
Resolve self.analyzer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr analyzer of <Node class:pyan.anutils.ExecuteInInnerScope>
setattr analyzer on self to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Assign ['self.scopename'] ['scopename']
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__init__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute scopename of self in context <class '_ast.Store'>
Resolve self.scopename in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr scopename of <Node class:pyan.anutils.ExecuteInInnerScope>
setattr scopename on self to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
FunctionDef __enter__
Set __enter__ in <Scope: class ExecuteInInnerScope> to <Node method:pyan.anutils.ExecuteInInnerScope.__enter__>
Method def: setting self name "self" to <Node class:pyan.anutils.ExecuteInInnerScope>
Assign ['analyzer'] ['self.analyzer']
Attribute analyzer of self in context <class '_ast.Load'>
Resolve self.analyzer in context <class '_ast.Load'>
Get self in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr analyzer of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr analyzer on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name analyzer in context <class '_ast.Store'>
Set analyzer in <Scope: function __enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Assign ['scopename'] ['self.scopename']
Attribute scopename of self in context <class '_ast.Load'>
Resolve self.scopename in context <class '_ast.Load'>
Get self in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr scopename of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr scopename on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name scopename in context <class '_ast.Store'>
Set scopename in <Scope: function __enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Call analyzer.name_stack.append
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute append of analyzer.name_stack in context <class '_ast.Load'>
Resolve analyzer.name_stack.append in context <class '_ast.Load'>
Resolve analyzer.name_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr name_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['inner_ns'] [<_ast.Call object at 0x7ffa5c479e80>]
Call <_ast.Call object at 0x7ffa5c479fd0>.get_name
Attribute get_name of <_ast.Call object at 0x7ffa5c479fd0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c479fd0>.get_name in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_name of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.get_name> (target obj <_ast.Call object at 0x7ffa5c479fd0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name inner_ns in context <class '_ast.Store'>
Set inner_ns in <Scope: function __enter__> to <Node ???:*.get_name>
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ???:*.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.get_name>
Attribute scopes of analyzer in context <class '_ast.Load'>
Resolve analyzer.scopes in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scopes of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Call analyzer.name_stack.pop
Attribute pop of analyzer.name_stack in context <class '_ast.Load'>
Resolve analyzer.name_stack.pop in context <class '_ast.Load'>
Resolve analyzer.name_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr name_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.pop> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call ValueError
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ???:*.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.get_name>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function __enter__>: no Node value (or name not in scope)
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.ValueError>
Call analyzer.scope_stack.append
Attribute scopes of analyzer in context <class '_ast.Load'>
Resolve analyzer.scopes in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scopes of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr scopes not resolved; maybe fwd ref or unanalyzed import)
Name inner_ns in context <class '_ast.Load'>
Get inner_ns in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ???:*.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ???:*.get_name>
Attribute append of analyzer.scope_stack in context <class '_ast.Load'>
Resolve analyzer.scope_stack.append in context <class '_ast.Load'>
Resolve analyzer.scope_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scope_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call analyzer.context_stack.append
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute append of analyzer.context_stack in context <class '_ast.Load'>
Resolve analyzer.context_stack.append in context <class '_ast.Load'>
Resolve analyzer.context_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr context_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr append of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ???:*.append> (target obj analyzer.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name self in context <class '_ast.Load'>
Get self in <Scope: function __enter__>, found in <Scope: function __enter__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
FunctionDef __exit__
Set __exit__ in <Scope: class ExecuteInInnerScope> to <Node method:pyan.anutils.ExecuteInInnerScope.__exit__>
Method def: setting self name "self" to <Node class:pyan.anutils.ExecuteInInnerScope>
Assign ['analyzer'] ['self.analyzer']
Attribute analyzer of self in context <class '_ast.Load'>
Resolve self.analyzer in context <class '_ast.Load'>
Get self in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr analyzer of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr analyzer on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name analyzer in context <class '_ast.Store'>
Set analyzer in <Scope: function __exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Assign ['scopename'] ['self.scopename']
Attribute scopename of self in context <class '_ast.Load'>
Resolve self.scopename in context <class '_ast.Load'>
Get self in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node class:pyan.anutils.ExecuteInInnerScope>
Resolved to attr scopename of <Node class:pyan.anutils.ExecuteInInnerScope>
getattr scopename on self returns <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name scopename in context <class '_ast.Store'>
Set scopename in <Scope: function __exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Call analyzer.context_stack.pop
Attribute pop of analyzer.context_stack in context <class '_ast.Load'>
Resolve analyzer.context_stack.pop in context <class '_ast.Load'>
Resolve analyzer.context_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr context_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.context_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call analyzer.scope_stack.pop
Attribute pop of analyzer.scope_stack in context <class '_ast.Load'>
Resolve analyzer.scope_stack.pop in context <class '_ast.Load'>
Resolve analyzer.scope_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr scope_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.scope_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call analyzer.name_stack.pop
Attribute pop of analyzer.name_stack in context <class '_ast.Load'>
Resolve analyzer.name_stack.pop in context <class '_ast.Load'>
Resolve analyzer.name_stack in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr name_stack of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr pop of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.pop> (target obj analyzer.name_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['from_node'] [<_ast.Call object at 0x7ffa5c472828>]
Call analyzer.get_node_of_current_namespace
Attribute get_node_of_current_namespace of analyzer in context <class '_ast.Load'>
Resolve analyzer.get_node_of_current_namespace in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr get_node_of_current_namespace of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr get_node_of_current_namespace not resolved; maybe fwd ref or unanalyzed import)
Name from_node in context <class '_ast.Store'>
Set from_node in <Scope: function __exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Assign ['ns'] [<_ast.Call object at 0x7ffa5c4729b0>]
Call from_node.get_name
Attribute get_name of from_node in context <class '_ast.Load'>
Resolve from_node.get_name in context <class '_ast.Load'>
Get from_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Resolved to attr get_name of <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> (target obj <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> known but target attr get_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function __exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Assign ['to_node'] [<_ast.Call object at 0x7ffa5c46b048>]
Call analyzer.get_node
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Attribute NAMESPACE of Flavor in context <class '_ast.Load'>
Resolve Flavor.NAMESPACE in context <class '_ast.Load'>
Get Flavor in <Scope: function __exit__>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr NAMESPACE of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.NAMESPACE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.NAMESPACE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_node of analyzer in context <class '_ast.Load'>
Resolve analyzer.get_node in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr get_node of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr get_node not resolved; maybe fwd ref or unanalyzed import)
Name to_node in context <class '_ast.Store'>
Set to_node in <Scope: function __exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Call analyzer.add_defines_edge
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Attribute add_defines_edge of analyzer in context <class '_ast.Load'>
Resolve analyzer.add_defines_edge in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr add_defines_edge of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.add_defines_edge> (target obj <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> known but target attr add_defines_edge not resolved; maybe fwd ref or unanalyzed import)
Call analyzer.logger.info
Name from_node in context <class '_ast.Load'>
Get from_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace>
Name scopename in context <class '_ast.Load'>
Get scopename in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Attribute info of analyzer.logger in context <class '_ast.Load'>
Resolve analyzer.logger.info in context <class '_ast.Load'>
Resolve analyzer.logger in context <class '_ast.Load'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr logger of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Unresolved, returning attr info of unknown
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ???:*.info> (target obj analyzer.logger not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['analyzer.last_value'] ['to_node']
Name to_node in context <class '_ast.Load'>
Get to_node in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to Name <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node>
Attribute last_value of analyzer in context <class '_ast.Store'>
Resolve analyzer.last_value in context <class '_ast.Store'>
Get analyzer in <Scope: function __exit__>, found in <Scope: function __exit__>, value <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
Resolved to attr last_value of <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^>
========== pass 2, file 'pyan/__init__.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
ImportFrom: from main import ['main']
Use from <Node module:pyan> to ImportFrom <Node module:main>
Set main in <Scope: module > to <Node function:pyan.main.main>
From setting name main to <Node function:pyan.main.main>
Assign ['__version__'] [<_ast.Str object at 0x7ffa5c5bc320>]
Name __version__ in context <class '_ast.Store'>
Set __version__ in <Scope: module >: value None is not a Node
========== pass 2, file 'pyan/main.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.main> to Import <Node module:logging>
ImportFrom: from glob import ['glob']
Use from <Node module:pyan.main> to ImportFrom <Node module:glob>
Set glob in <Scope: module > to <Node import:glob.glob>
From setting name glob to <Node import:glob.glob>
ImportFrom: from optparse import ['OptionParser']
Use from <Node module:pyan.main> to ImportFrom <Node module:optparse>
Set OptionParser in <Scope: module > to <Node import:optparse.OptionParser>
From setting name OptionParser to <Node import:optparse.OptionParser>
ImportFrom: from analyzer import ['CallGraphVisitor']
Use from <Node module:pyan.main> to ImportFrom <Node module:analyzer>
Set CallGraphVisitor in <Scope: module > to <Node class:pyan.analyzer.CallGraphVisitor>
From setting name CallGraphVisitor to <Node class:pyan.analyzer.CallGraphVisitor>
ImportFrom: from visgraph import ['VisualGraph']
Use from <Node module:pyan.main> to ImportFrom <Node module:visgraph>
Set VisualGraph in <Scope: module > to <Node class:pyan.visgraph.VisualGraph>
From setting name VisualGraph to <Node class:pyan.visgraph.VisualGraph>
ImportFrom: from writers import ['TgfWriter', 'DotWriter', 'YedWriter']
Use from <Node module:pyan.main> to ImportFrom <Node module:writers>
Set TgfWriter in <Scope: module > to <Node class:pyan.writers.TgfWriter>
From setting name TgfWriter to <Node class:pyan.writers.TgfWriter>
Set DotWriter in <Scope: module > to <Node class:pyan.writers.DotWriter>
From setting name DotWriter to <Node class:pyan.writers.DotWriter>
Set YedWriter in <Scope: module > to <Node class:pyan.writers.YedWriter>
From setting name YedWriter to <Node class:pyan.writers.YedWriter>
FunctionDef main
Set main in <Scope: module > to <Node function:pyan.main.main>
Assign ['usage'] [<_ast.Str object at 0x7ffa5c5bc128>]
Name usage in context <class '_ast.Store'>
Set usage in <Scope: function main>: value None is not a Node
Assign ['desc'] [<_ast.Str object at 0x7ffa5c5b93c8>]
Name desc in context <class '_ast.Store'>
Set desc in <Scope: function main>: value None is not a Node
Assign ['parser'] [<_ast.Call object at 0x7ffa5c5b9400>]
Call OptionParser
Name usage in context <class '_ast.Load'>
Get usage in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.usage>
Name desc in context <class '_ast.Load'>
Get desc in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.desc>
Name OptionParser in context <class '_ast.Load'>
Get OptionParser in <Scope: function main>, found in <Scope: module >, value <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to Name <Node import:optparse.OptionParser>
Name parser in context <class '_ast.Store'>
Set parser in <Scope: function main> to <Node import:optparse.OptionParser>
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_option
Attribute add_option of parser in context <class '_ast.Load'>
Resolve parser.add_option in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr add_option of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> (target obj <Node import:optparse.OptionParser> known but target attr add_option not resolved; maybe fwd ref or unanalyzed import)
Assign ['options', 'args'] [<_ast.Call object at 0x7ffa5c5b04a8>]
Call parser.parse_args
Attribute parse_args of parser in context <class '_ast.Load'>
Resolve parser.parse_args in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr parse_args of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args> (target obj <Node import:optparse.OptionParser> known but target attr parse_args not resolved; maybe fwd ref or unanalyzed import)
Name options in context <class '_ast.Store'>
Set options in <Scope: function main> to <Node attribute:optparse.OptionParser.parse_args>
Name args in context <class '_ast.Store'>
Set args in <Scope: function main> to <Node attribute:optparse.OptionParser.parse_args>
Assign ['filenames'] [<_ast.ListComp object at 0x7ffa5c5b0a58>]
ListComp
Name fn2 in context <class '_ast.Load'>
Get fn2 in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node import:glob.glob>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node import:glob.glob>
Name args in context <class '_ast.Load'>
Get args in <Scope: function listcomp>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node attribute:optparse.OptionParser.parse_args>
Name fn in context <class '_ast.Store'>
Set fn in <Scope: function listcomp> to <Node attribute:optparse.OptionParser.parse_args>
Call glob
Name fn in context <class '_ast.Load'>
Get fn in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:optparse.OptionParser.parse_args>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node attribute:optparse.OptionParser.parse_args>
Name glob in context <class '_ast.Load'>
Get glob in <Scope: function listcomp>, found in <Scope: module >, value <Node import:glob.glob>
Use from <Node namespace:pyan.main.main.listcomp> to Name <Node import:glob.glob>
Name fn2 in context <class '_ast.Store'>
Set fn2 in <Scope: function listcomp> to <Node import:glob.glob>
Name filenames in context <class '_ast.Store'>
Set filenames in <Scope: function main> to <Node namespace:pyan.main.main.listcomp>
Call len
Name args in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to Name <Node attribute:optparse.OptionParser.parse_args>
Name len in context <class '_ast.Load'>
Get len in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.len>
Call parser.error
Attribute error of parser in context <class '_ast.Load'>
Resolve parser.error in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node import:optparse.OptionParser>
Resolved to attr error of <Node import:optparse.OptionParser>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.error> (target obj <Node import:optparse.OptionParser> known but target attr error not resolved; maybe fwd ref or unanalyzed import)
Attribute nested_groups of options in context <class '_ast.Load'>
Resolve options.nested_groups in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr nested_groups of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.nested_groups> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr nested_groups not resolved; maybe fwd ref or unanalyzed import)
Assign ['options.grouped'] [<_ast.NameConstant object at 0x7ffa5c5b0f28>]
Attribute grouped of options in context <class '_ast.Store'>
Assign ['graph_options'] [<_ast.Dict object at 0x7ffa5c5b0cf8>]
Attribute draw_defines of options in context <class '_ast.Load'>
Resolve options.draw_defines in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr draw_defines of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_defines> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr draw_defines not resolved; maybe fwd ref or unanalyzed import)
Attribute draw_uses of options in context <class '_ast.Load'>
Resolve options.draw_uses in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr draw_uses of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_uses> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr draw_uses not resolved; maybe fwd ref or unanalyzed import)
Attribute colored of options in context <class '_ast.Load'>
Resolve options.colored in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr colored of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.colored> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr colored not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped_alt of options in context <class '_ast.Load'>
Resolve options.grouped_alt in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr grouped_alt of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped_alt> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr grouped_alt not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped of options in context <class '_ast.Load'>
Resolve options.grouped in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr grouped of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
Attribute nested_groups of options in context <class '_ast.Load'>
Resolve options.nested_groups in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr nested_groups of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.nested_groups> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr nested_groups not resolved; maybe fwd ref or unanalyzed import)
Attribute annotated of options in context <class '_ast.Load'>
Resolve options.annotated in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr annotated of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.annotated> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr annotated not resolved; maybe fwd ref or unanalyzed import)
Name graph_options in context <class '_ast.Store'>
Set graph_options in <Scope: function main> to <Node attribute:optparse.OptionParser.parse_args.annotated>
Assign ['logger'] [<_ast.Call object at 0x7ffa5c5ad668>]
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:pyan.main.main> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Store'>
Set logger in <Scope: function main> to <Node attribute:logging.getLogger>
Attribute very_verbose of options in context <class '_ast.Load'>
Resolve options.very_verbose in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr very_verbose of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.very_verbose> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr very_verbose not resolved; maybe fwd ref or unanalyzed import)
Call logger.setLevel
Attribute DEBUG of logging in context <class '_ast.Load'>
Resolve logging.DEBUG in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr DEBUG of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.DEBUG> (target obj <Node module:logging> known but target attr DEBUG not resolved; maybe fwd ref or unanalyzed import)
Attribute setLevel of logger in context <class '_ast.Load'>
Resolve logger.setLevel in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr setLevel of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
Attribute verbose of options in context <class '_ast.Load'>
Resolve options.verbose in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr verbose of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.verbose> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr verbose not resolved; maybe fwd ref or unanalyzed import)
Call logger.setLevel
Attribute INFO of logging in context <class '_ast.Load'>
Resolve logging.INFO in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr INFO of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.INFO> (target obj <Node module:logging> known but target attr INFO not resolved; maybe fwd ref or unanalyzed import)
Attribute setLevel of logger in context <class '_ast.Load'>
Resolve logger.setLevel in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr setLevel of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
Call logger.setLevel
Attribute WARN of logging in context <class '_ast.Load'>
Resolve logging.WARN in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr WARN of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.WARN> (target obj <Node module:logging> known but target attr WARN not resolved; maybe fwd ref or unanalyzed import)
Attribute setLevel of logger in context <class '_ast.Load'>
Resolve logger.setLevel in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr setLevel of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> (target obj <Node attribute:logging.getLogger> known but target attr setLevel not resolved; maybe fwd ref or unanalyzed import)
Call logger.addHandler
Call logging.StreamHandler
Attribute StreamHandler of logging in context <class '_ast.Load'>
Resolve logging.StreamHandler in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr StreamHandler of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.StreamHandler> (target obj <Node module:logging> known but target attr StreamHandler not resolved; maybe fwd ref or unanalyzed import)
Attribute addHandler of logger in context <class '_ast.Load'>
Resolve logger.addHandler in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr addHandler of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.addHandler> (target obj <Node attribute:logging.getLogger> known but target attr addHandler not resolved; maybe fwd ref or unanalyzed import)
Attribute logname of options in context <class '_ast.Load'>
Resolve options.logname in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr logname of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.logname> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr logname not resolved; maybe fwd ref or unanalyzed import)
Assign ['handler'] [<_ast.Call object at 0x7ffa5c5ad9b0>]
Call logging.FileHandler
Attribute logname of options in context <class '_ast.Load'>
Resolve options.logname in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr logname of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.logname> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr logname not resolved; maybe fwd ref or unanalyzed import)
Attribute FileHandler of logging in context <class '_ast.Load'>
Resolve logging.FileHandler in context <class '_ast.Load'>
Get logging in <Scope: function main>, found in <Scope: module >, value <Node module:logging>
Resolved to attr FileHandler of <Node module:logging>
Use from <Node function:pyan.main.main> to <Node attribute:logging.FileHandler> (target obj <Node module:logging> known but target attr FileHandler not resolved; maybe fwd ref or unanalyzed import)
Name handler in context <class '_ast.Store'>
Set handler in <Scope: function main> to <Node attribute:logging.FileHandler>
Call logger.addHandler
Name handler in context <class '_ast.Load'>
Get handler in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.FileHandler>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.FileHandler>
Attribute addHandler of logger in context <class '_ast.Load'>
Resolve logger.addHandler in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Resolved to attr addHandler of <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.addHandler> (target obj <Node attribute:logging.getLogger> known but target attr addHandler not resolved; maybe fwd ref or unanalyzed import)
Assign ['v'] [<_ast.Call object at 0x7ffa5c5bc208>]
Call CallGraphVisitor
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function main>, found in <Scope: function main>, value <Node namespace:pyan.main.main.listcomp>
Use from <Node function:pyan.main.main> to Name <Node namespace:pyan.main.main.listcomp>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name CallGraphVisitor in context <class '_ast.Load'>
Get CallGraphVisitor in <Scope: function main>, found in <Scope: module >, value <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.main.main> to <Node method:pyan.analyzer.CallGraphVisitor.__init__> (call creates an instance)
Name v in context <class '_ast.Store'>
Set v in <Scope: function main> to <Node class:pyan.analyzer.CallGraphVisitor>
Assign ['graph'] [<_ast.Call object at 0x7ffa5c5b4e48>]
Call VisualGraph.from_visitor
Name v in context <class '_ast.Load'>
Get v in <Scope: function main>, found in <Scope: function main>, value <Node class:pyan.analyzer.CallGraphVisitor>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.analyzer.CallGraphVisitor>
Name graph_options in context <class '_ast.Load'>
Get graph_options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args.annotated>
Use from <Node function:pyan.main.main> to Name <Node attribute:optparse.OptionParser.parse_args.annotated>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Attribute from_visitor of VisualGraph in context <class '_ast.Load'>
Resolve VisualGraph.from_visitor in context <class '_ast.Load'>
Get VisualGraph in <Scope: function main>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr from_visitor of <Node class:pyan.visgraph.VisualGraph>
getattr from_visitor on VisualGraph returns <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Name graph in context <class '_ast.Store'>
Set graph in <Scope: function main> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Attribute dot of options in context <class '_ast.Load'>
Resolve options.dot in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr dot of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.dot> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr dot not resolved; maybe fwd ref or unanalyzed import)
Assign ['writer'] [<_ast.Call object at 0x7ffa5c5b4748>]
Call DotWriter
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function main>, found in <Scope: function main>, value <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to Name <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Attribute rankdir of options in context <class '_ast.Load'>
Resolve options.rankdir in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr rankdir of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.rankdir> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr rankdir not resolved; maybe fwd ref or unanalyzed import)
Attribute filename of options in context <class '_ast.Load'>
Resolve options.filename in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr filename of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name DotWriter in context <class '_ast.Load'>
Get DotWriter in <Scope: function main>, found in <Scope: module >, value <Node class:pyan.writers.DotWriter>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.writers.DotWriter>
Use from <Node function:pyan.main.main> to <Node method:pyan.writers.DotWriter.__init__> (call creates an instance)
New edge added for Use from <Node function:pyan.main.main> to <Node method:pyan.writers.DotWriter.__init__> (call creates an instance)
Name writer in context <class '_ast.Store'>
Set writer in <Scope: function main> to <Node class:pyan.writers.DotWriter>
Call writer.run
Attribute run of writer in context <class '_ast.Load'>
Resolve writer.run in context <class '_ast.Load'>
Get writer in <Scope: function main>, found in <Scope: function main>, value <Node class:pyan.writers.DotWriter>
Resolved to attr run of <Node class:pyan.writers.DotWriter>
getattr run on writer returns <Node method:pyan.writers.Writer.run>
Use from <Node function:pyan.main.main> to <Node method:pyan.writers.Writer.run>
New edge added for Use from <Node function:pyan.main.main> to <Node method:pyan.writers.Writer.run>
Attribute tgf of options in context <class '_ast.Load'>
Resolve options.tgf in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr tgf of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.tgf> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr tgf not resolved; maybe fwd ref or unanalyzed import)
Assign ['writer'] [<_ast.Call object at 0x7ffa5c5b4470>]
Call TgfWriter
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function main>, found in <Scope: function main>, value <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to Name <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Attribute filename of options in context <class '_ast.Load'>
Resolve options.filename in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr filename of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name TgfWriter in context <class '_ast.Load'>
Get TgfWriter in <Scope: function main>, found in <Scope: module >, value <Node class:pyan.writers.TgfWriter>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.writers.TgfWriter>
Use from <Node function:pyan.main.main> to <Node method:pyan.writers.TgfWriter.__init__> (call creates an instance)
New edge added for Use from <Node function:pyan.main.main> to <Node method:pyan.writers.TgfWriter.__init__> (call creates an instance)
Name writer in context <class '_ast.Store'>
Set writer in <Scope: function main> to <Node class:pyan.writers.TgfWriter>
Call writer.run
Attribute run of writer in context <class '_ast.Load'>
Resolve writer.run in context <class '_ast.Load'>
Get writer in <Scope: function main>, found in <Scope: function main>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr run of <Node class:pyan.writers.TgfWriter>
getattr run on writer returns <Node method:pyan.writers.Writer.run>
Use from <Node function:pyan.main.main> to <Node method:pyan.writers.Writer.run>
Attribute yed of options in context <class '_ast.Load'>
Resolve options.yed in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr yed of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.yed> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr yed not resolved; maybe fwd ref or unanalyzed import)
Assign ['writer'] [<_ast.Call object at 0x7ffa5c5b41d0>]
Call YedWriter
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function main>, found in <Scope: function main>, value <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Use from <Node function:pyan.main.main> to Name <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Attribute filename of options in context <class '_ast.Load'>
Resolve options.filename in context <class '_ast.Load'>
Get options in <Scope: function main>, found in <Scope: function main>, value <Node attribute:optparse.OptionParser.parse_args>
Resolved to attr filename of <Node attribute:optparse.OptionParser.parse_args>
Use from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> (target obj <Node attribute:optparse.OptionParser.parse_args> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function main>, found in <Scope: function main>, value <Node attribute:logging.getLogger>
Use from <Node function:pyan.main.main> to Name <Node attribute:logging.getLogger>
Name YedWriter in context <class '_ast.Load'>
Get YedWriter in <Scope: function main>, found in <Scope: module >, value <Node class:pyan.writers.YedWriter>
Use from <Node function:pyan.main.main> to Name <Node class:pyan.writers.YedWriter>
Use from <Node function:pyan.main.main> to <Node method:pyan.writers.YedWriter.__init__> (call creates an instance)
New edge added for Use from <Node function:pyan.main.main> to <Node method:pyan.writers.YedWriter.__init__> (call creates an instance)
Name writer in context <class '_ast.Store'>
Set writer in <Scope: function main> to <Node class:pyan.writers.YedWriter>
Call writer.run
Attribute run of writer in context <class '_ast.Load'>
Resolve writer.run in context <class '_ast.Load'>
Get writer in <Scope: function main>, found in <Scope: function main>, value <Node class:pyan.writers.YedWriter>
Resolved to attr run of <Node class:pyan.writers.YedWriter>
getattr run on writer returns <Node method:pyan.writers.Writer.run>
Use from <Node function:pyan.main.main> to <Node method:pyan.writers.Writer.run>
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:pyan.main> to Name <Node ???:*.__name__>
Call main
Name main in context <class '_ast.Load'>
Get main in <Scope: module >, found in <Scope: module >, value <Node function:pyan.main.main>
Use from <Node module:pyan.main> to Name <Node function:pyan.main.main>
========== pass 2, file 'pyan/node.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
ImportFrom: from enum import ['Enum']
Use from <Node module:pyan.node> to ImportFrom <Node module:enum>
Set Enum in <Scope: module > to <Node import:enum.Enum>
From setting name Enum to <Node import:enum.Enum>
FunctionDef make_safe_label
Set make_safe_label in <Scope: module > to <Node function:pyan.node.make_safe_label>
Assign ['unsafe_words'] [<_ast.Str object at 0x7ffa5c5ccc18>, <_ast.Str object at 0x7ffa5c5ccc50>, <_ast.Str object at 0x7ffa5c5ccc88>, <_ast.Str object at 0x7ffa5c5cccc0>]
Name unsafe_words in context <class '_ast.Store'>
Set unsafe_words in <Scope: function make_safe_label>: value None is not a Node
Assign ['out'] ['label']
Name label in context <class '_ast.Load'>
Get label in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Use from <Node function:pyan.node.make_safe_label> to Name <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Name out in context <class '_ast.Store'>
Set out in <Scope: function make_safe_label> to <Node ---:pyan.node.make_safe_label.^^^argument^^^>
For-loop
Name unsafe_words in context <class '_ast.Load'>
Get unsafe_words in <Scope: function make_safe_label>: no Node value (or name not in scope)
Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
Name word in context <class '_ast.Store'>
Set word in <Scope: function make_safe_label> to <Node ???:*.unsafe_words>
Assign ['out'] [<_ast.Call object at 0x7ffa5c5ccdd8>]
Call out.replace
Name word in context <class '_ast.Load'>
Get word in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ???:*.unsafe_words>
Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
Name word in context <class '_ast.Load'>
Get word in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ???:*.unsafe_words>
Use from <Node function:pyan.node.make_safe_label> to Name <Node ???:*.unsafe_words>
Attribute replace of out in context <class '_ast.Load'>
Resolve out.replace in context <class '_ast.Load'>
Get out in <Scope: function make_safe_label>, found in <Scope: function make_safe_label>, value <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Resolved to attr replace of <Node ---:pyan.node.make_safe_label.^^^argument^^^>
Use from <Node function:pyan.node.make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace> (target obj <Node ---:pyan.node.make_safe_label.^^^argument^^^> known but target attr replace not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace>
Call <_ast.Call object at 0x7ffa5c5d50b8>.replace
Attribute replace of <_ast.Call object at 0x7ffa5c5d50b8> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x7ffa5c5d50b8>.replace in context <class '_ast.Load'>
Unresolved function call as obj, returning attr replace of unknown
Use from <Node function:pyan.node.make_safe_label> to <Node ???:*.replace> (target obj <_ast.Call object at 0x7ffa5c5d50b8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
ClassDef Flavor
Set Flavor in <Scope: module > to <Node class:pyan.node.Flavor>
Name Enum in context <class '_ast.Load'>
Get Enum in <Scope: class Flavor>, found in <Scope: module >, value <Node import:enum.Enum>
Use from <Node class:pyan.node.Flavor> to Name <Node import:enum.Enum>
Assign ['UNSPECIFIED'] [<_ast.Str object at 0x7ffa5c5d5400>]
Name UNSPECIFIED in context <class '_ast.Store'>
Set UNSPECIFIED in <Scope: class Flavor>: value None is not a Node
Assign ['UNKNOWN'] [<_ast.Str object at 0x7ffa5c5d54a8>]
Name UNKNOWN in context <class '_ast.Store'>
Set UNKNOWN in <Scope: class Flavor>: value None is not a Node
Assign ['NAMESPACE'] [<_ast.Str object at 0x7ffa5c5d5320>]
Name NAMESPACE in context <class '_ast.Store'>
Set NAMESPACE in <Scope: class Flavor>: value None is not a Node
Assign ['ATTRIBUTE'] [<_ast.Str object at 0x7ffa5c5d5518>]
Name ATTRIBUTE in context <class '_ast.Store'>
Set ATTRIBUTE in <Scope: class Flavor>: value None is not a Node
Assign ['IMPORTEDITEM'] [<_ast.Str object at 0x7ffa5c5d5588>]
Name IMPORTEDITEM in context <class '_ast.Store'>
Set IMPORTEDITEM in <Scope: class Flavor>: value None is not a Node
Assign ['MODULE'] [<_ast.Str object at 0x7ffa5c5d5710>]
Name MODULE in context <class '_ast.Store'>
Set MODULE in <Scope: class Flavor>: value None is not a Node
Assign ['CLASS'] [<_ast.Str object at 0x7ffa5c5d57b8>]
Name CLASS in context <class '_ast.Store'>
Set CLASS in <Scope: class Flavor>: value None is not a Node
Assign ['FUNCTION'] [<_ast.Str object at 0x7ffa5c5d5908>]
Name FUNCTION in context <class '_ast.Store'>
Set FUNCTION in <Scope: class Flavor>: value None is not a Node
Assign ['METHOD'] [<_ast.Str object at 0x7ffa5c5d56d8>]
Name METHOD in context <class '_ast.Store'>
Set METHOD in <Scope: class Flavor>: value None is not a Node
Assign ['STATICMETHOD'] [<_ast.Str object at 0x7ffa5c5d5ac8>]
Name STATICMETHOD in context <class '_ast.Store'>
Set STATICMETHOD in <Scope: class Flavor>: value None is not a Node
Assign ['CLASSMETHOD'] [<_ast.Str object at 0x7ffa5c5d5a58>]
Name CLASSMETHOD in context <class '_ast.Store'>
Set CLASSMETHOD in <Scope: class Flavor>: value None is not a Node
Assign ['NAME'] [<_ast.Str object at 0x7ffa5c5d59e8>]
Name NAME in context <class '_ast.Store'>
Set NAME in <Scope: class Flavor>: value None is not a Node
FunctionDef specificity
Name staticmethod in context <class '_ast.Load'>
Get staticmethod in <Scope: class Flavor>: no Node value (or name not in scope)
Use from <Node class:pyan.node.Flavor> to Name <Node ???:*.staticmethod>
Set specificity in <Scope: class Flavor> to <Node staticmethod:pyan.node.Flavor.specificity>
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function specificity>, found in <Scope: function specificity>, value <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Attribute UNSPECIFIED of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNSPECIFIED in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNSPECIFIED of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.UNSPECIFIED> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.UNSPECIFIED> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute UNKNOWN of Flavor in context <class '_ast.Load'>
Resolve Flavor.UNKNOWN in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr UNKNOWN of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.UNKNOWN> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.UNKNOWN> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function specificity>, found in <Scope: function specificity>, value <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Attribute NAMESPACE of Flavor in context <class '_ast.Load'>
Resolve Flavor.NAMESPACE in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr NAMESPACE of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.NAMESPACE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.NAMESPACE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute ATTRIBUTE of Flavor in context <class '_ast.Load'>
Resolve Flavor.ATTRIBUTE in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr ATTRIBUTE of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.ATTRIBUTE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.ATTRIBUTE> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function specificity>, found in <Scope: function specificity>, value <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to Name <Node ---:pyan.node.Flavor.specificity.^^^argument^^^>
Attribute IMPORTEDITEM of Flavor in context <class '_ast.Load'>
Resolve Flavor.IMPORTEDITEM in context <class '_ast.Load'>
Get Flavor in <Scope: function specificity>, found in <Scope: module >, value <Node class:pyan.node.Flavor>
Resolved to attr IMPORTEDITEM of <Node class:pyan.node.Flavor>
Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.IMPORTEDITEM> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ???:*.IMPORTEDITEM> (target obj Flavor not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef __repr__
Set __repr__ in <Scope: class Flavor> to <Node method:pyan.node.Flavor.__repr__>
Method def: setting self name "self" to <Node class:pyan.node.Flavor>
Attribute value of self in context <class '_ast.Load'>
Resolve self.value in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Flavor>
Resolved to attr value of <Node class:pyan.node.Flavor>
Use from <Node method:pyan.node.Flavor.__repr__> to <Node ???:*.value> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.node.Flavor.__repr__> to <Node ???:*.value> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
ClassDef Node
Set Node in <Scope: module > to <Node class:pyan.node.Node>
FunctionDef __init__
Set __init__ in <Scope: class Node> to <Node method:pyan.node.Node.__init__>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Assign ['self.namespace'] ['namespace']
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Store'>
Resolve self.namespace in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
setattr namespace on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.name'] ['name']
Name name in context <class '_ast.Load'>
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Store'>
Resolve self.name in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
setattr name on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.ast_node'] ['ast_node']
Name ast_node in context <class '_ast.Load'>
Get ast_node in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute ast_node of self in context <class '_ast.Store'>
Resolve self.ast_node in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
setattr ast_node on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.filename'] ['filename']
Name filename in context <class '_ast.Load'>
Get filename in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute filename of self in context <class '_ast.Store'>
Resolve self.filename in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr filename of <Node class:pyan.node.Node>
setattr filename on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Store'>
Resolve self.flavor in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
setattr flavor on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['self.defined'] [<_ast.Compare object at 0x7ffa5c5c8908>]
Name namespace in context <class '_ast.Load'>
Get namespace in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__init__> to Name <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute defined of self in context <class '_ast.Store'>
Resolve self.defined in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.node.Node>
Resolved to attr defined of <Node class:pyan.node.Node>
setattr defined on self to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_short_name
Set get_short_name in <Scope: class Node> to <Node method:pyan.node.Node.get_short_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_short_name>, found in <Scope: function get_short_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_short_name>, found in <Scope: function get_short_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_short_name>, found in <Scope: function get_short_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_annotated_name
Set get_annotated_name in <Scope: class Node> to <Node method:pyan.node.Node.get_annotated_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call self.get_level
Attribute get_level of self in context <class '_ast.Load'>
Resolve self.get_level in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr get_level of <Node class:pyan.node.Node>
getattr get_level on self returns <Node method:pyan.node.Node.get_level>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node method:pyan.node.Node.get_level>
Attribute ast_node of self in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
getattr ast_node on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr filename of <Node class:pyan.node.Node>
getattr filename on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute lineno of self.ast_node in context <class '_ast.Load'>
Resolve self.ast_node.lineno in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
Resolved to attr lineno of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr lineno not resolved; maybe fwd ref or unanalyzed import)
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_annotated_name>, found in <Scope: function get_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_long_annotated_name
Set get_long_annotated_name in <Scope: class Node> to <Node method:pyan.node.Node.get_long_annotated_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call self.get_level
Attribute get_level of self in context <class '_ast.Load'>
Resolve self.get_level in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr get_level of <Node class:pyan.node.Node>
getattr get_level on self returns <Node method:pyan.node.Node.get_level>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node method:pyan.node.Node.get_level>
Attribute ast_node of self in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
getattr ast_node on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute filename of self in context <class '_ast.Load'>
Resolve self.filename in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr filename of <Node class:pyan.node.Node>
getattr filename on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute lineno of self.ast_node in context <class '_ast.Load'>
Resolve self.ast_node.lineno in context <class '_ast.Load'>
Resolve self.ast_node in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr ast_node of <Node class:pyan.node.Node>
Resolved to attr lineno of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr lineno not resolved; maybe fwd ref or unanalyzed import)
Call repr
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
getattr flavor on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolving repr() of self.flavor
Resolve self.flavor.__repr__ in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
Resolved to attr __repr__ of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolve repr() of self.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function get_long_annotated_name>: no Node value (or name not in scope)
Use from <Node method:pyan.node.Node.get_long_annotated_name> to Name <Node ???:*.repr>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call repr
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
getattr flavor on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolving repr() of self.flavor
Resolve self.flavor.__repr__ in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
Resolved to attr __repr__ of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolve repr() of self.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function get_long_annotated_name>: no Node value (or name not in scope)
Use from <Node method:pyan.node.Node.get_long_annotated_name> to Name <Node ???:*.repr>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_long_annotated_name>, found in <Scope: function get_long_annotated_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_name
Set get_name in <Scope: class Node> to <Node method:pyan.node.Node.get_name>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute name of self in context <class '_ast.Load'>
Resolve self.name in context <class '_ast.Load'>
Get self in <Scope: function get_name>, found in <Scope: function get_name>, value <Node class:pyan.node.Node>
Resolved to attr name of <Node class:pyan.node.Node>
getattr name on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_level
Set get_level in <Scope: class Node> to <Node method:pyan.node.Node.get_level>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_level>, found in <Scope: function get_level>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_level> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Call self.namespace.count
Attribute count of self.namespace in context <class '_ast.Load'>
Resolve self.namespace.count in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_level>, found in <Scope: function get_level>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
Resolved to attr count of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_level> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.count> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr count not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_toplevel_namespace
Set get_toplevel_namespace in <Scope: class Node> to <Node method:pyan.node.Node.get_toplevel_namespace>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Assign ['idx'] [<_ast.Call object at 0x7ffa5c61b320>]
Call self.namespace.find
Attribute find of self.namespace in context <class '_ast.Load'>
Resolve self.namespace.find in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
Resolved to attr find of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find> (target obj <Node ---:pyan.node.Node.__init__.^^^argument^^^> known but target attr find not resolved; maybe fwd ref or unanalyzed import)
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function get_toplevel_namespace> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to Name <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to Name <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_toplevel_namespace>, found in <Scope: function get_toplevel_namespace>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
FunctionDef get_label
Set get_label in <Scope: class Node> to <Node method:pyan.node.Node.get_label>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Call make_safe_label
Call self.get_name
Attribute get_name of self in context <class '_ast.Load'>
Resolve self.get_name in context <class '_ast.Load'>
Get self in <Scope: function get_label>, found in <Scope: function get_label>, value <Node class:pyan.node.Node>
Resolved to attr get_name of <Node class:pyan.node.Node>
getattr get_name on self returns <Node method:pyan.node.Node.get_name>
Use from <Node method:pyan.node.Node.get_label> to <Node method:pyan.node.Node.get_name>
Name make_safe_label in context <class '_ast.Load'>
Get make_safe_label in <Scope: function get_label>, found in <Scope: module >, value <Node function:pyan.node.make_safe_label>
Use from <Node method:pyan.node.Node.get_label> to Name <Node function:pyan.node.make_safe_label>
FunctionDef get_namespace_label
Set get_namespace_label in <Scope: class Node> to <Node method:pyan.node.Node.get_namespace_label>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Call make_safe_label
Attribute namespace of self in context <class '_ast.Load'>
Resolve self.namespace in context <class '_ast.Load'>
Get self in <Scope: function get_namespace_label>, found in <Scope: function get_namespace_label>, value <Node class:pyan.node.Node>
Resolved to attr namespace of <Node class:pyan.node.Node>
getattr namespace on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.get_namespace_label> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Name make_safe_label in context <class '_ast.Load'>
Get make_safe_label in <Scope: function get_namespace_label>, found in <Scope: module >, value <Node function:pyan.node.make_safe_label>
Use from <Node method:pyan.node.Node.get_namespace_label> to Name <Node function:pyan.node.make_safe_label>
FunctionDef __repr__
Set __repr__ in <Scope: class Node> to <Node method:pyan.node.Node.__repr__>
Method def: setting self name "self" to <Node class:pyan.node.Node>
Call repr
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
getattr flavor on self returns <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Use from <Node method:pyan.node.Node.__repr__> to <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolving repr() of self.flavor
Resolve self.flavor.__repr__ in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Node>
Resolved to attr flavor of <Node class:pyan.node.Node>
Resolved to attr __repr__ of <Node ---:pyan.node.Node.__init__.^^^argument^^^>
Resolve repr() of self.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function __repr__>: no Node value (or name not in scope)
Use from <Node method:pyan.node.Node.__repr__> to Name <Node ???:*.repr>
Call self.get_name
Attribute get_name of self in context <class '_ast.Load'>
Resolve self.get_name in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.node.Node>
Resolved to attr get_name of <Node class:pyan.node.Node>
getattr get_name on self returns <Node method:pyan.node.Node.get_name>
Use from <Node method:pyan.node.Node.__repr__> to <Node method:pyan.node.Node.get_name>
========== pass 2, file 'pyan/visgraph.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
Import ['re']
Set re in <Scope: module > to <Node module:re>
Use from <Node module:pyan.visgraph> to Import <Node module:re>
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.visgraph> to Import <Node module:logging>
Import ['colorsys']
Set colorsys in <Scope: module > to <Node module:colorsys>
Use from <Node module:pyan.visgraph> to Import <Node module:colorsys>
ClassDef Colorizer
Set Colorizer in <Scope: module > to <Node class:pyan.visgraph.Colorizer>
FunctionDef __init__
Set __init__ in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['self.logger'] [<_ast.BoolOp object at 0x7ffa5c56bba8>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function __init__>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node method:pyan.visgraph.Colorizer.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Store'>
Resolve self.logger in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr logger of <Node class:pyan.visgraph.Colorizer>
setattr logger on self to <Node attribute:logging.getLogger>
Assign ['self.colored'] ['colored']
Name colored in context <class '_ast.Load'>
Get colored in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.__init__> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Attribute colored of self in context <class '_ast.Store'>
Resolve self.colored in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr colored of <Node class:pyan.visgraph.Colorizer>
setattr colored on self to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Assign ['self._hues'] [<_ast.ListComp object at 0x7ffa5c56bfd0>]
ListComp
Name j in context <class '_ast.Load'>
Get j in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ???:*.range>
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ???:*.range>
Name num_colors in context <class '_ast.Load'>
Get num_colors in <Scope: function listcomp>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Call range
Name num_colors in context <class '_ast.Load'>
Get num_colors in <Scope: function listcomp>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to Name <Node ???:*.range>
Name j in context <class '_ast.Store'>
Set j in <Scope: function listcomp> to <Node ???:*.range>
Attribute _hues of self in context <class '_ast.Store'>
Resolve self._hues in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _hues of <Node class:pyan.visgraph.Colorizer>
setattr _hues on self to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Assign ['self._idx_of'] [<_ast.Dict object at 0x7ffa5c56b7b8>]
Attribute _idx_of of self in context <class '_ast.Store'>
Assign ['self._idx'] [<_ast.Num object at 0x7ffa5c56b710>]
Attribute _idx of self in context <class '_ast.Store'>
FunctionDef _next_idx
Set _next_idx in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer._next_idx>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['result'] ['self._idx']
Attribute _idx of self in context <class '_ast.Load'>
Resolve self._idx in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node ???:*._idx> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node ???:*._idx> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name result in context <class '_ast.Store'>
Set result in <Scope: function _next_idx> to <Node ???:*._idx>
AugAssign ['self._idx'] <class '_ast.Add'> [<_ast.Num object at 0x7ffa5c56b470>]
Attribute _idx of self in context <class '_ast.Store'>
Attribute _idx of self in context <class '_ast.Load'>
Resolve self._idx in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node ???:*._idx> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call len
Attribute _hues of self in context <class '_ast.Load'>
Resolve self._hues in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _hues of <Node class:pyan.visgraph.Colorizer>
getattr _hues on self returns <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Name len in context <class '_ast.Load'>
Get len in <Scope: function _next_idx>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to Name <Node ???:*.len>
Call self.logger.warn
Attribute warn of self.logger in context <class '_ast.Load'>
Resolve self.logger.warn in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr logger of <Node class:pyan.visgraph.Colorizer>
Resolved to attr warn of <Node attribute:logging.getLogger>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:logging.getLogger.warn> (target obj <Node attribute:logging.getLogger> known but target attr warn not resolved; maybe fwd ref or unanalyzed import)
Assign ['self._idx'] [<_ast.Num object at 0x7ffa5c568f28>]
Attribute _idx of self in context <class '_ast.Store'>
Name result in context <class '_ast.Load'>
Get result in <Scope: function _next_idx>, found in <Scope: function _next_idx>, value <Node ???:*._idx>
Use from <Node method:pyan.visgraph.Colorizer._next_idx> to Name <Node ???:*._idx>
FunctionDef _node_to_idx
Set _node_to_idx in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['ns'] ['node.filename']
Attribute filename of node in context <class '_ast.Load'>
Resolve node.filename in context <class '_ast.Load'>
Get node in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Resolved to attr filename of <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename> (target obj <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^> known but target attr filename not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Store'>
Set ns in <Scope: function _node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Call self.logger.info
Call node.get_short_name
Attribute get_short_name of node in context <class '_ast.Load'>
Resolve node.get_short_name in context <class '_ast.Load'>
Get node in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Resolved to attr get_short_name of <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.get_short_name> (target obj <Node ---:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^> known but target attr get_short_name not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr logger of <Node class:pyan.visgraph.Colorizer>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Attribute _idx_of of self in context <class '_ast.Load'>
Resolve self._idx_of in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx_of of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node ???:*._idx_of> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node ???:*._idx_of> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign [<_ast.Subscript object at 0x7ffa5c568828>] [<_ast.Call object at 0x7ffa5c568940>]
Call self._next_idx
Attribute _next_idx of self in context <class '_ast.Load'>
Resolve self._next_idx in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _next_idx of <Node class:pyan.visgraph.Colorizer>
getattr _next_idx on self returns <Node method:pyan.visgraph.Colorizer._next_idx>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node method:pyan.visgraph.Colorizer._next_idx>
Attribute _idx_of of self in context <class '_ast.Load'>
Resolve self._idx_of in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx_of of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node ???:*._idx_of> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Attribute _idx_of of self in context <class '_ast.Load'>
Resolve self._idx_of in context <class '_ast.Load'>
Get self in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _idx_of of <Node class:pyan.visgraph.Colorizer>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node ???:*._idx_of> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ns in context <class '_ast.Load'>
Get ns in <Scope: function _node_to_idx>, found in <Scope: function _node_to_idx>, value <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Use from <Node method:pyan.visgraph.Colorizer._node_to_idx> to Name <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
FunctionDef get
Set get in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer.get>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Assign ['idx'] [<_ast.Call object at 0x7ffa5c568588>]
Call self._node_to_idx
Name node in context <class '_ast.Load'>
Get node in <Scope: function get>, found in <Scope: function get>, value <Node ---:pyan.visgraph.Colorizer.get.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node ---:pyan.visgraph.Colorizer.get.^^^argument^^^>
Attribute _node_to_idx of self in context <class '_ast.Load'>
Resolve self._node_to_idx in context <class '_ast.Load'>
Get self in <Scope: function get>, found in <Scope: function get>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _node_to_idx of <Node class:pyan.visgraph.Colorizer>
getattr _node_to_idx on self returns <Node method:pyan.visgraph.Colorizer._node_to_idx>
Use from <Node method:pyan.visgraph.Colorizer.get> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function get> to <Node method:pyan.visgraph.Colorizer._node_to_idx>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get>, found in <Scope: function get>, value <Node method:pyan.visgraph.Colorizer._node_to_idx>
Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node method:pyan.visgraph.Colorizer._node_to_idx>
Attribute _hues of self in context <class '_ast.Load'>
Resolve self._hues in context <class '_ast.Load'>
Get self in <Scope: function get>, found in <Scope: function get>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr _hues of <Node class:pyan.visgraph.Colorizer>
getattr _hues on self returns <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Use from <Node method:pyan.visgraph.Colorizer.get> to <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function get>, found in <Scope: function get>, value <Node method:pyan.visgraph.Colorizer._node_to_idx>
Use from <Node method:pyan.visgraph.Colorizer.get> to Name <Node method:pyan.visgraph.Colorizer._node_to_idx>
FunctionDef make_colors
Set make_colors in <Scope: class Colorizer> to <Node method:pyan.visgraph.Colorizer.make_colors>
Method def: setting self name "self" to <Node class:pyan.visgraph.Colorizer>
Attribute colored of self in context <class '_ast.Load'>
Resolve self.colored in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr colored of <Node class:pyan.visgraph.Colorizer>
getattr colored on self returns <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^>
Assign ['idx', 'H'] [<_ast.Call object at 0x7ffa5c590f60>]
Call self.get
Name node in context <class '_ast.Load'>
Get node in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Attribute get of self in context <class '_ast.Load'>
Resolve self.get in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr get of <Node class:pyan.visgraph.Colorizer>
getattr get on self returns <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name H in context <class '_ast.Store'>
Set H in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Assign ['L'] [<_ast.Call object at 0x7ffa5c590e48>]
Call max
Call node.get_level
Attribute get_level of node in context <class '_ast.Load'>
Resolve node.get_level in context <class '_ast.Load'>
Get node in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Resolved to attr get_level of <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.make_colors.^^^argument^^^.get_level> (target obj <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^> known but target attr get_level not resolved; maybe fwd ref or unanalyzed import)
Name max in context <class '_ast.Load'>
Get max in <Scope: function make_colors>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
Name L in context <class '_ast.Store'>
Set L in <Scope: function make_colors> to <Node ???:*.max>
Assign ['S'] [<_ast.Num object at 0x7ffa5c590a90>]
Name S in context <class '_ast.Store'>
Set S in <Scope: function make_colors>: value None is not a Node
Assign ['A'] [<_ast.Num object at 0x7ffa5c590a58>]
Name A in context <class '_ast.Store'>
Set A in <Scope: function make_colors>: value None is not a Node
Assign ['fill_RGBA'] [<_ast.Call object at 0x7ffa5c5909e8>]
Call self.htmlize_rgb
Call colorsys.hls_to_rgb
Name H in context <class '_ast.Load'>
Get H in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node method:pyan.visgraph.Colorizer.get>
Name L in context <class '_ast.Load'>
Get L in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ???:*.max>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
Name S in context <class '_ast.Load'>
Get S in <Scope: function make_colors>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.S>
Attribute hls_to_rgb of colorsys in context <class '_ast.Load'>
Resolve colorsys.hls_to_rgb in context <class '_ast.Load'>
Get colorsys in <Scope: function make_colors>, found in <Scope: module >, value <Node module:colorsys>
Resolved to attr hls_to_rgb of <Node module:colorsys>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:colorsys.hls_to_rgb> (target obj <Node module:colorsys> known but target attr hls_to_rgb not resolved; maybe fwd ref or unanalyzed import)
Name A in context <class '_ast.Load'>
Get A in <Scope: function make_colors>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.A>
Attribute htmlize_rgb of self in context <class '_ast.Load'>
Resolve self.htmlize_rgb in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr htmlize_rgb of <Node class:pyan.visgraph.Colorizer>
getattr htmlize_rgb on self returns <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Name fill_RGBA in context <class '_ast.Store'>
Set fill_RGBA in <Scope: function make_colors> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Assign ['text_RGB'] [<_ast.IfExp object at 0x7ffa5c590550>]
Name L in context <class '_ast.Load'>
Get L in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ???:*.max>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
Name text_RGB in context <class '_ast.Store'>
Set text_RGB in <Scope: function make_colors> to <Node ???:*.max>
Assign ['idx', '_'] [<_ast.Call object at 0x7ffa5c590128>]
Call self.get
Name node in context <class '_ast.Load'>
Get node in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^>
Attribute get of self in context <class '_ast.Load'>
Resolve self.get in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr get of <Node class:pyan.visgraph.Colorizer>
getattr get on self returns <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function make_colors> to <Node method:pyan.visgraph.Colorizer.get>
Assign ['fill_RGBA'] [<_ast.Call object at 0x7ffa5c590278>]
Call self.htmlize_rgb
Attribute htmlize_rgb of self in context <class '_ast.Load'>
Resolve self.htmlize_rgb in context <class '_ast.Load'>
Get self in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr htmlize_rgb of <Node class:pyan.visgraph.Colorizer>
getattr htmlize_rgb on self returns <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Name fill_RGBA in context <class '_ast.Store'>
Set fill_RGBA in <Scope: function make_colors> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Assign ['text_RGB'] [<_ast.Str object at 0x7ffa5c5e0eb8>]
Name text_RGB in context <class '_ast.Store'>
Set text_RGB in <Scope: function make_colors>: value None is not a Node
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node method:pyan.visgraph.Colorizer.get>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node method:pyan.visgraph.Colorizer.get>
Name fill_RGBA in context <class '_ast.Load'>
Get fill_RGBA in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Name text_RGB in context <class '_ast.Load'>
Get text_RGB in <Scope: function make_colors>, found in <Scope: function make_colors>, value <Node ???:*.max>
Use from <Node method:pyan.visgraph.Colorizer.make_colors> to Name <Node ???:*.max>
FunctionDef htmlize_rgb
Name staticmethod in context <class '_ast.Load'>
Get staticmethod in <Scope: class Colorizer>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.Colorizer> to Name <Node ???:*.staticmethod>
Set htmlize_rgb in <Scope: class Colorizer> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>
Name A in context <class '_ast.Load'>
Get A in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Assign ['R', 'G', 'B', 'A'] [<_ast.ListComp object at 0x7ffa5c585c88>]
ListComp
Call int
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name int in context <class '_ast.Load'>
Get int in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.int>
Name R in context <class '_ast.Load'>
Get R in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name G in context <class '_ast.Load'>
Get G in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name B in context <class '_ast.Load'>
Get B in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name A in context <class '_ast.Load'>
Get A in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name R in context <class '_ast.Store'>
Set R in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Store'>
Set G in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Store'>
Set B in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name A in context <class '_ast.Store'>
Set A in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Load'>
Get R in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Load'>
Get G in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Load'>
Get B in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name A in context <class '_ast.Load'>
Get A in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Assign ['R', 'G', 'B'] [<_ast.ListComp object at 0x7ffa5c585588>]
ListComp
Call int
Name x in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^>
Name int in context <class '_ast.Load'>
Get int in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node ???:*.int>
Name R in context <class '_ast.Load'>
Get R in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Load'>
Get G in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Load'>
Get B in <Scope: function listcomp>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Store'>
Set R in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Store'>
Set G in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Store'>
Set B in <Scope: function htmlize_rgb> to <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name R in context <class '_ast.Load'>
Get R in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name G in context <class '_ast.Load'>
Get G in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Name B in context <class '_ast.Load'>
Get B in <Scope: function htmlize_rgb>, found in <Scope: function htmlize_rgb>, value <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Use from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to Name <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
ClassDef VisualNode
Set VisualNode in <Scope: module > to <Node class:pyan.visgraph.VisualNode>
Name object in context <class '_ast.Load'>
Get object in <Scope: class VisualNode>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualNode> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class VisualNode> to <Node method:pyan.visgraph.VisualNode.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualNode>
Assign ['self.id'] ['id']
Name id in context <class '_ast.Load'>
Get id in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute id of self in context <class '_ast.Store'>
Resolve self.id in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
setattr id on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.label'] ['label']
Name label in context <class '_ast.Load'>
Get label in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute label of self in context <class '_ast.Store'>
Resolve self.label in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr label of <Node class:pyan.visgraph.VisualNode>
setattr label on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Store'>
Resolve self.flavor in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualNode>
setattr flavor on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.fill_color'] ['fill_color']
Name fill_color in context <class '_ast.Load'>
Get fill_color in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute fill_color of self in context <class '_ast.Store'>
Resolve self.fill_color in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr fill_color of <Node class:pyan.visgraph.VisualNode>
setattr fill_color on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.text_color'] ['text_color']
Name text_color in context <class '_ast.Load'>
Get text_color in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute text_color of self in context <class '_ast.Store'>
Resolve self.text_color in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr text_color of <Node class:pyan.visgraph.VisualNode>
setattr text_color on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Assign ['self.group'] ['group']
Name group in context <class '_ast.Load'>
Get group in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__init__> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute group of self in context <class '_ast.Store'>
Resolve self.group in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr group of <Node class:pyan.visgraph.VisualNode>
setattr group on self to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
FunctionDef __repr__
Set __repr__ in <Scope: class VisualNode> to <Node method:pyan.visgraph.VisualNode.__repr__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualNode>
Assign ['optionals'] [<_ast.ListComp object at 0x7ffa5c56f668>]
ListComp
Call repr
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolving repr() of s
Resolve s.__repr__ in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolved to attr __repr__ of <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolve repr() of s: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ???:*.repr>
Attribute label of self in context <class '_ast.Load'>
Resolve self.label in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr label of <Node class:pyan.visgraph.VisualNode>
getattr label on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualNode>
getattr flavor on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute fill_color of self in context <class '_ast.Load'>
Resolve self.fill_color in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr fill_color of <Node class:pyan.visgraph.VisualNode>
getattr fill_color on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute text_color of self in context <class '_ast.Load'>
Resolve self.text_color in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr text_color of <Node class:pyan.visgraph.VisualNode>
getattr text_color on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Attribute group of self in context <class '_ast.Load'>
Resolve self.group in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr group of <Node class:pyan.visgraph.VisualNode>
getattr group on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to Name <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Name optionals in context <class '_ast.Store'>
Set optionals in <Scope: function __repr__> to <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Name optionals in context <class '_ast.Load'>
Get optionals in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Call repr
Attribute id of self in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
getattr id on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolving repr() of self.id
Resolve self.id.__repr__ in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
Resolved to attr __repr__ of <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolve repr() of self.id: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function __repr__>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node ???:*.repr>
Call <_ast.Str object at 0x7ffa5c46b668>.join
Name optionals in context <class '_ast.Load'>
Get optionals in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp>
Attribute join of <_ast.Str object at 0x7ffa5c46b668> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x7ffa5c46b668>.join in context <class '_ast.Load'>
Resolved to attr join of <Node class:Str>
getattr join on <_ast.Str object at 0x7ffa5c46b668> returns <Node attribute:Str.join>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node attribute:Str.join>
Call repr
Attribute id of self in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
getattr id on self returns <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolving repr() of self.id
Resolve self.id.__repr__ in context <class '_ast.Load'>
Resolve self.id in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualNode>
Resolved to attr id of <Node class:pyan.visgraph.VisualNode>
Resolved to attr __repr__ of <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^>
Resolve repr() of self.id: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function __repr__>: no Node value (or name not in scope)
Use from <Node method:pyan.visgraph.VisualNode.__repr__> to Name <Node ???:*.repr>
ClassDef VisualEdge
Set VisualEdge in <Scope: module > to <Node class:pyan.visgraph.VisualEdge>
Name object in context <class '_ast.Load'>
Get object in <Scope: class VisualEdge>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualEdge> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class VisualEdge> to <Node method:pyan.visgraph.VisualEdge.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualEdge>
Assign ['self.source'] ['source']
Name source in context <class '_ast.Load'>
Get source in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute source of self in context <class '_ast.Store'>
Resolve self.source in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr source of <Node class:pyan.visgraph.VisualEdge>
setattr source on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Assign ['self.target'] ['target']
Name target in context <class '_ast.Load'>
Get target in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute target of self in context <class '_ast.Store'>
Resolve self.target in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr target of <Node class:pyan.visgraph.VisualEdge>
setattr target on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Assign ['self.flavor'] ['flavor']
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute flavor of self in context <class '_ast.Store'>
Resolve self.flavor in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualEdge>
setattr flavor on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Assign ['self.color'] ['color']
Name color in context <class '_ast.Load'>
Get color in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__init__> to Name <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute color of self in context <class '_ast.Store'>
Resolve self.color in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr color of <Node class:pyan.visgraph.VisualEdge>
setattr color on self to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
FunctionDef __repr__
Set __repr__ in <Scope: class VisualEdge> to <Node method:pyan.visgraph.VisualEdge.__repr__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualEdge>
Attribute label of self.source in context <class '_ast.Load'>
Resolve self.source.label in context <class '_ast.Load'>
Resolve self.source in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr source of <Node class:pyan.visgraph.VisualEdge>
Resolved to attr label of <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> (target obj <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute flavor of self in context <class '_ast.Load'>
Resolve self.flavor in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr flavor of <Node class:pyan.visgraph.VisualEdge>
getattr flavor on self returns <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Attribute label of self.target in context <class '_ast.Load'>
Resolve self.target.label in context <class '_ast.Load'>
Resolve self.target in context <class '_ast.Load'>
Get self in <Scope: function __repr__>, found in <Scope: function __repr__>, value <Node class:pyan.visgraph.VisualEdge>
Resolved to attr target of <Node class:pyan.visgraph.VisualEdge>
Resolved to attr label of <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> (target obj <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
ClassDef VisualGraph
Set VisualGraph in <Scope: module > to <Node class:pyan.visgraph.VisualGraph>
Name object in context <class '_ast.Load'>
Get object in <Scope: class VisualGraph>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualGraph> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class VisualGraph> to <Node method:pyan.visgraph.VisualGraph.__init__>
Method def: setting self name "self" to <Node class:pyan.visgraph.VisualGraph>
Assign ['self.id'] ['id']
Name id in context <class '_ast.Load'>
Get id in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute id of self in context <class '_ast.Store'>
Resolve self.id in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr id of <Node class:pyan.visgraph.VisualGraph>
setattr id on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.label'] ['label']
Name label in context <class '_ast.Load'>
Get label in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute label of self in context <class '_ast.Store'>
Resolve self.label in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr label of <Node class:pyan.visgraph.VisualGraph>
setattr label on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.nodes'] [<_ast.BoolOp object at 0x7ffa5c466908>]
Name nodes in context <class '_ast.Load'>
Get nodes in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute nodes of self in context <class '_ast.Store'>
Resolve self.nodes in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr nodes of <Node class:pyan.visgraph.VisualGraph>
setattr nodes on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.edges'] [<_ast.BoolOp object at 0x7ffa5c466c50>]
Name edges in context <class '_ast.Load'>
Get edges in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute edges of self in context <class '_ast.Store'>
Resolve self.edges in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr edges of <Node class:pyan.visgraph.VisualGraph>
setattr edges on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.subgraphs'] [<_ast.BoolOp object at 0x7ffa5c466a20>]
Name subgraphs in context <class '_ast.Load'>
Get subgraphs in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute subgraphs of self in context <class '_ast.Store'>
Resolve self.subgraphs in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr subgraphs of <Node class:pyan.visgraph.VisualGraph>
setattr subgraphs on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Assign ['self.grouped'] ['grouped']
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node method:pyan.visgraph.VisualGraph.__init__> to Name <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Attribute grouped of self in context <class '_ast.Store'>
Resolve self.grouped in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr grouped of <Node class:pyan.visgraph.VisualGraph>
setattr grouped on self to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
FunctionDef from_visitor
Name classmethod in context <class '_ast.Load'>
Get classmethod in <Scope: class VisualGraph>: no Node value (or name not in scope)
Use from <Node class:pyan.visgraph.VisualGraph> to Name <Node ???:*.classmethod>
Set from_visitor in <Scope: class VisualGraph> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>
Method def: setting self name "cls" to <Node class:pyan.visgraph.VisualGraph>
Assign ['colored'] [<_ast.Call object at 0x7ffa5c466d30>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name colored in context <class '_ast.Store'>
Set colored in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['nested'] [<_ast.Call object at 0x7ffa5c466780>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name nested in context <class '_ast.Store'>
Set nested in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['grouped_alt'] [<_ast.Call object at 0x7ffa5c4664e0>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name grouped_alt in context <class '_ast.Store'>
Set grouped_alt in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['grouped'] [<_ast.BoolOp object at 0x7ffa5c466470>]
Name nested in context <class '_ast.Load'>
Get nested in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name grouped in context <class '_ast.Store'>
Set grouped in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['annotated'] [<_ast.Call object at 0x7ffa5c466320>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name annotated in context <class '_ast.Store'>
Set annotated in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['draw_defines'] [<_ast.Call object at 0x7ffa5c477240>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name draw_defines in context <class '_ast.Store'>
Set draw_defines in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['draw_uses'] [<_ast.Call object at 0x7ffa5c477518>]
Call options.get
Attribute get of options in context <class '_ast.Load'>
Resolve options.get in context <class '_ast.Load'>
Get options in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr get of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr get not resolved; maybe fwd ref or unanalyzed import)
Name draw_uses in context <class '_ast.Store'>
Set draw_uses in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name annotated in context <class '_ast.Load'>
Get annotated in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['labeler'] [<_ast.Lambda object at 0x7ffa5c4773c8>]
Lambda
Call n.get_annotated_name
Attribute get_annotated_name of n in context <class '_ast.Load'>
Resolve n.get_annotated_name in context <class '_ast.Load'>
Get n in <Scope: function lambda>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr get_annotated_name of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_annotated_name> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr get_annotated_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_annotated_name> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr get_annotated_name not resolved; maybe fwd ref or unanalyzed import)
Name labeler in context <class '_ast.Store'>
Set labeler in <Scope: function from_visitor> to <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Assign ['labeler'] [<_ast.Lambda object at 0x7ffa5c477780>]
Lambda
Call n.get_long_annotated_name
Attribute get_long_annotated_name of n in context <class '_ast.Load'>
Resolve n.get_long_annotated_name in context <class '_ast.Load'>
Get n in <Scope: function lambda>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr get_long_annotated_name of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_long_annotated_name> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr get_long_annotated_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_long_annotated_name> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr get_long_annotated_name not resolved; maybe fwd ref or unanalyzed import)
Name labeler in context <class '_ast.Store'>
Set labeler in <Scope: function from_visitor> to <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Assign ['labeler'] [<_ast.Lambda object at 0x7ffa5c477a90>]
Lambda
Call n.get_short_name
Attribute get_short_name of n in context <class '_ast.Load'>
Resolve n.get_short_name in context <class '_ast.Load'>
Get n in <Scope: function lambda>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr get_short_name of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_short_name> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr get_short_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_short_name> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr get_short_name not resolved; maybe fwd ref or unanalyzed import)
Name labeler in context <class '_ast.Store'>
Set labeler in <Scope: function from_visitor> to <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Assign ['logger'] [<_ast.BoolOp object at 0x7ffa5c477dd8>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function from_visitor>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Name logger in context <class '_ast.Store'>
Set logger in <Scope: function from_visitor> to <Node attribute:logging.getLogger>
Assign ['visited_nodes'] []
Name visited_nodes in context <class '_ast.Store'>
Set visited_nodes in <Scope: function from_visitor>: value None is not a Node
For-loop
Attribute nodes of visitor in context <class '_ast.Load'>
Resolve visitor.nodes in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr nodes of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Store'>
Set name in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
For-loop
Attribute nodes of visitor in context <class '_ast.Load'>
Resolve visitor.nodes in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr nodes of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name name in context <class '_ast.Load'>
Get name in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Name node in context <class '_ast.Store'>
Set node in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Attribute defined of node in context <class '_ast.Load'>
Resolve node.defined in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Call visited_nodes.append
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Attribute append of visited_nodes in context <class '_ast.Load'>
Resolve visited_nodes.append in context <class '_ast.Load'>
Get visited_nodes in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.append> (target obj visited_nodes not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call visited_nodes.sort
Lambda
Attribute namespace of x in context <class '_ast.Load'>
Resolve x.namespace in context <class '_ast.Load'>
Get x in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr namespace of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.namespace> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute name of x in context <class '_ast.Load'>
Resolve x.name in context <class '_ast.Load'>
Get x in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr name of None
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node ???:*.name> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute sort of visited_nodes in context <class '_ast.Load'>
Resolve visited_nodes.sort in context <class '_ast.Load'>
Get visited_nodes in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr sort of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.sort> (target obj visited_nodes not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef find_filenames
Set find_filenames in <Scope: function from_visitor> to <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Assign ['filenames'] [<_ast.Call object at 0x7ffa5c65d470>]
Call set
Name set in context <class '_ast.Load'>
Get set in <Scope: function find_filenames>: no Node value (or name not in scope)
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.set>
Name filenames in context <class '_ast.Store'>
Set filenames in <Scope: function find_filenames> to <Node ???:*.set>
For-loop
Name visited_nodes in context <class '_ast.Load'>
Get visited_nodes in <Scope: function find_filenames>: no Node value (or name not in scope)
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.visited_nodes>
Name node in context <class '_ast.Store'>
Set node in <Scope: function find_filenames> to <Node ???:*.visited_nodes>
Call filenames.add
Attribute filename of node in context <class '_ast.Load'>
Resolve node.filename in context <class '_ast.Load'>
Get node in <Scope: function find_filenames>, found in <Scope: function find_filenames>, value <Node ???:*.visited_nodes>
Resolved to attr filename of <Node ???:*.visited_nodes>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node ???:*.filename> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute add of filenames in context <class '_ast.Load'>
Resolve filenames.add in context <class '_ast.Load'>
Get filenames in <Scope: function find_filenames>, found in <Scope: function find_filenames>, value <Node ???:*.set>
Resolved to attr add of <Node ???:*.set>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node ???:*.add> (target obj filenames not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name filenames in context <class '_ast.Load'>
Get filenames in <Scope: function find_filenames>, found in <Scope: function find_filenames>, value <Node ???:*.set>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to Name <Node ???:*.set>
Assign ['colorizer'] [<_ast.Call object at 0x7ffa5c65dc18>]
Call Colorizer
Call len
Call find_filenames
Name find_filenames in context <class '_ast.Load'>
Get find_filenames in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Name colored in context <class '_ast.Load'>
Get colored in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:logging.getLogger>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:logging.getLogger>
Name Colorizer in context <class '_ast.Load'>
Get Colorizer in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.Colorizer>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.Colorizer>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.Colorizer.__init__> (call creates an instance)
Name colorizer in context <class '_ast.Store'>
Set colorizer in <Scope: function from_visitor> to <Node class:pyan.visgraph.Colorizer>
Assign ['nodes_dict'] [<_ast.Call object at 0x7ffa5c65da20>]
Call dict
Name dict in context <class '_ast.Load'>
Get dict in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name nodes_dict in context <class '_ast.Store'>
Set nodes_dict in <Scope: function from_visitor> to <Node ???:*.dict>
Assign ['root_graph'] [<_ast.Call object at 0x7ffa5c65d940>]
Call cls
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name cls in context <class '_ast.Load'>
Get cls in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualGraph.__init__> (call creates an instance)
Name root_graph in context <class '_ast.Store'>
Set root_graph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Assign ['subgraph'] ['root_graph']
Name root_graph in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Name subgraph in context <class '_ast.Store'>
Set subgraph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Assign ['namespace_stack'] []
Name namespace_stack in context <class '_ast.Store'>
Set namespace_stack in <Scope: function from_visitor>: value None is not a Node
Assign ['prev_namespace'] [<_ast.Str object at 0x7ffa5c660978>]
Name prev_namespace in context <class '_ast.Store'>
Set prev_namespace in <Scope: function from_visitor>: value None is not a Node
For-loop
Name visited_nodes in context <class '_ast.Load'>
Get visited_nodes in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Name node in context <class '_ast.Store'>
Set node in <Scope: function from_visitor> to <Node ???:*.visited_nodes>
Call logger.info
Attribute name of node in context <class '_ast.Load'>
Resolve node.name in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr name of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.name> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute info of logger in context <class '_ast.Load'>
Resolve logger.info in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:logging.getLogger>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['idx', 'fill_RGBA', 'text_RGB'] [<_ast.Call object at 0x7ffa5c660e48>]
Call colorizer.make_colors
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Attribute make_colors of colorizer in context <class '_ast.Load'>
Resolve colorizer.make_colors in context <class '_ast.Load'>
Get colorizer in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.Colorizer>
Resolved to attr make_colors of <Node class:pyan.visgraph.Colorizer>
getattr make_colors on colorizer returns <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Name fill_RGBA in context <class '_ast.Store'>
Set fill_RGBA in <Scope: function from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Name text_RGB in context <class '_ast.Store'>
Set text_RGB in <Scope: function from_visitor> to <Node method:pyan.visgraph.Colorizer.make_colors>
Assign ['visual_node'] [<_ast.Call object at 0x7ffa5c660f60>]
Call VisualNode
Call node.get_label
Attribute get_label of node in context <class '_ast.Load'>
Resolve node.get_label in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr get_label of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.get_label> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call labeler
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Name labeler in context <class '_ast.Load'>
Get labeler in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda>
Call repr
Attribute flavor of node in context <class '_ast.Load'>
Resolve node.flavor in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr flavor of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.flavor> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Resolving repr() of node.flavor
Resolve node.flavor.__repr__ in context <class '_ast.Load'>
Resolve node.flavor in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr flavor of <Node ???:*.visited_nodes>
Unresolved, returning attr __repr__ of unknown
Resolve repr() of node.flavor: returning attr node None
Name repr in context <class '_ast.Load'>
Get repr in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.repr>
Name fill_RGBA in context <class '_ast.Load'>
Get fill_RGBA in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node method:pyan.visgraph.Colorizer.make_colors>
Name text_RGB in context <class '_ast.Load'>
Get text_RGB in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node method:pyan.visgraph.Colorizer.make_colors>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node method:pyan.visgraph.Colorizer.make_colors>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node method:pyan.visgraph.Colorizer.make_colors>
Name VisualNode in context <class '_ast.Load'>
Get VisualNode in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualNode.__init__> (call creates an instance)
Name visual_node in context <class '_ast.Store'>
Set visual_node in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualNode>
Assign [<_ast.Subscript object at 0x7ffa5c660470>] ['visual_node']
Name visual_node in context <class '_ast.Load'>
Get visual_node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name node in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.visited_nodes>
Name grouped in context <class '_ast.Load'>
Get grouped in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name prev_namespace in context <class '_ast.Load'>
Get prev_namespace in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.prev_namespace>
Call logger.info
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name prev_namespace in context <class '_ast.Load'>
Get prev_namespace in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.prev_namespace>
Attribute info of logger in context <class '_ast.Load'>
Resolve logger.info in context <class '_ast.Load'>
Get logger in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:logging.getLogger>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
Assign ['label'] [<_ast.Call object at 0x7ffa5c653e48>]
Call node.get_namespace_label
Attribute get_namespace_label of node in context <class '_ast.Load'>
Resolve node.get_namespace_label in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr get_namespace_label of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.get_namespace_label> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name label in context <class '_ast.Store'>
Set label in <Scope: function from_visitor> to <Node ???:*.get_namespace_label>
Assign ['subgraph'] [<_ast.Call object at 0x7ffa5c653fd0>]
Call cls
Name label in context <class '_ast.Load'>
Get label in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.get_namespace_label>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.get_namespace_label>
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name cls in context <class '_ast.Load'>
Get cls in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualGraph.__init__> (call creates an instance)
Name subgraph in context <class '_ast.Store'>
Set subgraph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Name nested in context <class '_ast.Load'>
Get nested in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Call len
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Assign ['m'] [<_ast.Call object at 0x7ffa5c6537f0>]
Call re.match
Attribute label of <_ast.Subscript object at 0x7ffa5c653940> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c653940>.label in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c653940> in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr label of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.label> (target obj <_ast.Subscript object at 0x7ffa5c653940> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute match of re in context <class '_ast.Load'>
Resolve re.match in context <class '_ast.Load'>
Get re in <Scope: function from_visitor>, found in <Scope: module >, value <Node module:re>
Resolved to attr match of <Node module:re>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match> (target obj <Node module:re> known but target attr match not resolved; maybe fwd ref or unanalyzed import)
Name m in context <class '_ast.Store'>
Set m in <Scope: function from_visitor> to <Node attribute:re.match>
Name m in context <class '_ast.Load'>
Get m in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:re.match>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:re.match>
Call m.end
Attribute end of m in context <class '_ast.Load'>
Resolve m.end in context <class '_ast.Load'>
Get m in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:re.match>
Resolved to attr end of <Node attribute:re.match>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match.end> (target obj <Node attribute:re.match> known but target attr end not resolved; maybe fwd ref or unanalyzed import)
Call len
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call m.end
Attribute end of m in context <class '_ast.Load'>
Resolve m.end in context <class '_ast.Load'>
Get m in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:re.match>
Resolved to attr end of <Node attribute:re.match>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match.end> (target obj <Node attribute:re.match> known but target attr end not resolved; maybe fwd ref or unanalyzed import)
Call namespace_stack.pop
Attribute pop of namespace_stack in context <class '_ast.Load'>
Resolve namespace_stack.pop in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr pop of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.pop> (target obj namespace_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call len
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Assign ['m'] [<_ast.Call object at 0x7ffa5c64e160>]
Call re.match
Attribute label of <_ast.Subscript object at 0x7ffa5c64e518> in context <class '_ast.Load'>
Resolve <_ast.Subscript object at 0x7ffa5c64e518>.label in context <class '_ast.Load'>
Get <_ast.Subscript object at 0x7ffa5c64e518> in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr label of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.label> (target obj <_ast.Subscript object at 0x7ffa5c64e518> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute namespace of node in context <class '_ast.Load'>
Resolve node.namespace in context <class '_ast.Load'>
Get node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.visited_nodes>
Resolved to attr namespace of <Node ???:*.visited_nodes>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.namespace> (target obj node not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute match of re in context <class '_ast.Load'>
Resolve re.match in context <class '_ast.Load'>
Get re in <Scope: function from_visitor>, found in <Scope: module >, value <Node module:re>
Resolved to attr match of <Node module:re>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match> (target obj <Node module:re> known but target attr match not resolved; maybe fwd ref or unanalyzed import)
Name m in context <class '_ast.Store'>
Set m in <Scope: function from_visitor> to <Node attribute:re.match>
Assign ['parentgraph'] [<_ast.IfExp object at 0x7ffa5c64e828>]
Call len
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name len in context <class '_ast.Load'>
Get len in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.len>
Name namespace_stack in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.namespace_stack>
Name root_graph in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Name parentgraph in context <class '_ast.Store'>
Set parentgraph in <Scope: function from_visitor> to <Node class:pyan.visgraph.VisualGraph>
Call parentgraph.subgraphs.append
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Attribute append of parentgraph.subgraphs in context <class '_ast.Load'>
Resolve parentgraph.subgraphs.append in context <class '_ast.Load'>
Resolve parentgraph.subgraphs in context <class '_ast.Load'>
Get parentgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr subgraphs of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call namespace_stack.append
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Attribute append of namespace_stack in context <class '_ast.Load'>
Resolve namespace_stack.append in context <class '_ast.Load'>
Get namespace_stack in <Scope: function from_visitor>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ???:*.append> (target obj namespace_stack not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call root_graph.subgraphs.append
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Attribute append of root_graph.subgraphs in context <class '_ast.Load'>
Resolve root_graph.subgraphs.append in context <class '_ast.Load'>
Resolve root_graph.subgraphs in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr subgraphs of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call subgraph.nodes.append
Name visual_node in context <class '_ast.Load'>
Get visual_node in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualNode>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualNode>
Attribute append of subgraph.nodes in context <class '_ast.Load'>
Resolve subgraph.nodes.append in context <class '_ast.Load'>
Resolve subgraph.nodes in context <class '_ast.Load'>
Get subgraph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr nodes of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Name draw_defines in context <class '_ast.Load'>
Get draw_defines in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name grouped_alt in context <class '_ast.Load'>
Get grouped_alt in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['color'] [<_ast.IfExp object at 0x7ffa5c64e780>]
Name draw_defines in context <class '_ast.Load'>
Get draw_defines in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name color in context <class '_ast.Store'>
Set color in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
For-loop
Attribute defines_edges of visitor in context <class '_ast.Load'>
Resolve visitor.defines_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr defines_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Attribute defined of n in context <class '_ast.Load'>
Resolve n.defined in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute defines_edges of visitor in context <class '_ast.Load'>
Resolve visitor.defines_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr defines_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr defines_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Attribute defined of n2 in context <class '_ast.Load'>
Resolve n2.defined in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Call root_graph.edges.append
Call VisualEdge
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Name color in context <class '_ast.Load'>
Get color in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name VisualEdge in context <class '_ast.Load'>
Get VisualEdge in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualEdge.__init__> (call creates an instance)
Attribute append of root_graph.edges in context <class '_ast.Load'>
Resolve root_graph.edges.append in context <class '_ast.Load'>
Resolve root_graph.edges in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr edges of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Name draw_uses in context <class '_ast.Load'>
Get draw_uses in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Assign ['color'] [<_ast.Str object at 0x7ffa5c6574e0>]
Name color in context <class '_ast.Store'>
Set color in <Scope: function from_visitor>: value None is not a Node
For-loop
Attribute uses_edges of visitor in context <class '_ast.Load'>
Resolve visitor.uses_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr uses_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Store'>
Set n in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Attribute defined of n in context <class '_ast.Load'>
Resolve n.defined in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
For-loop
Attribute uses_edges of visitor in context <class '_ast.Load'>
Resolve visitor.uses_edges in context <class '_ast.Load'>
Get visitor in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Resolved to attr uses_edges of <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> (target obj <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> known but target attr uses_edges not resolved; maybe fwd ref or unanalyzed import)
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Name n2 in context <class '_ast.Store'>
Set n2 in <Scope: function from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Attribute defined of n2 in context <class '_ast.Load'>
Resolve n2.defined in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Resolved to attr defined of <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> (target obj <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> known but target attr defined not resolved; maybe fwd ref or unanalyzed import)
Call root_graph.edges.append
Call VisualEdge
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n in context <class '_ast.Load'>
Get n in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Name nodes_dict in context <class '_ast.Load'>
Get nodes_dict in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node ???:*.dict>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node ???:*.dict>
Name n2 in context <class '_ast.Load'>
Get n2 in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Name color in context <class '_ast.Load'>
Get color in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get>
Name VisualEdge in context <class '_ast.Load'>
Get VisualEdge in <Scope: function from_visitor>, found in <Scope: module >, value <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to Name <Node class:pyan.visgraph.VisualEdge>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.visgraph.VisualEdge.__init__> (call creates an instance)
Attribute append of root_graph.edges in context <class '_ast.Load'>
Resolve root_graph.edges.append in context <class '_ast.Load'>
Resolve root_graph.edges in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
Resolved to attr edges of <Node class:pyan.visgraph.VisualGraph>
Resolved to attr append of <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> (target obj <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Name root_graph in context <class '_ast.Load'>
Get root_graph in <Scope: function from_visitor>, found in <Scope: function from_visitor>, value <Node class:pyan.visgraph.VisualGraph>
========== pass 2, file 'pyan/writers.py' ==========
Scopes now: {'pyan.analyzer': <Scope: module >, 'pyan.analyzer.CallGraphVisitor': <Scope: class CallGraphVisitor>, 'pyan.analyzer.CallGraphVisitor.__init__': <Scope: function __init__>, 'pyan.analyzer.CallGraphVisitor.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.process_one': <Scope: function process_one>, 'pyan.analyzer.CallGraphVisitor.resolve_base_classes': <Scope: function resolve_base_classes>, 'pyan.analyzer.CallGraphVisitor.postprocess': <Scope: function postprocess>, 'pyan.analyzer.CallGraphVisitor.visit_Module': <Scope: function visit_Module>, 'pyan.analyzer.CallGraphVisitor.visit_ClassDef': <Scope: function visit_ClassDef>, 'pyan.analyzer.CallGraphVisitor.visit_FunctionDef': <Scope: function visit_FunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef': <Scope: function visit_AsyncFunctionDef>, 'pyan.analyzer.CallGraphVisitor.visit_Lambda': <Scope: function visit_Lambda>, 'pyan.analyzer.CallGraphVisitor.visit_Import': <Scope: function visit_Import>, 'pyan.analyzer.CallGraphVisitor.visit_Import.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom': <Scope: function visit_ImportFrom>, 'pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_Attribute': <Scope: function visit_Attribute>, 'pyan.analyzer.CallGraphVisitor.visit_Name': <Scope: function visit_Name>, 'pyan.analyzer.CallGraphVisitor.visit_Assign': <Scope: function visit_Assign>, 'pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_AnnAssign': <Scope: function visit_AnnAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign': <Scope: function visit_AugAssign>, 'pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.visit_For': <Scope: function visit_For>, 'pyan.analyzer.CallGraphVisitor.visit_AsyncFor': <Scope: function visit_AsyncFor>, 'pyan.analyzer.CallGraphVisitor.visit_ListComp': <Scope: function visit_ListComp>, 'pyan.analyzer.CallGraphVisitor.visit_SetComp': <Scope: function visit_SetComp>, 'pyan.analyzer.CallGraphVisitor.visit_DictComp': <Scope: function visit_DictComp>, 'pyan.analyzer.CallGraphVisitor.visit_GeneratorExp': <Scope: function visit_GeneratorExp>, 'pyan.analyzer.CallGraphVisitor.visit_Call': <Scope: function visit_Call>, 'pyan.analyzer.CallGraphVisitor.visit_With': <Scope: function visit_With>, 'pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of': <Scope: function add_uses_enter_exit_of>, 'pyan.analyzer.CallGraphVisitor.analyze_functiondef': <Scope: function analyze_functiondef>, 'pyan.analyzer.CallGraphVisitor.analyze_binding': <Scope: function analyze_binding>, 'pyan.analyzer.CallGraphVisitor.analyze_generators': <Scope: function analyze_generators>, 'pyan.analyzer.CallGraphVisitor.resolve_builtins': <Scope: function resolve_builtins>, 'pyan.analyzer.CallGraphVisitor.resolve_attribute': <Scope: function resolve_attribute>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes': <Scope: function analyze_scopes>, 'pyan.analyzer.CallGraphVisitor.analyze_scopes.process': <Scope: function process>, 'pyan.analyzer.CallGraphVisitor.get_current_class': <Scope: function get_current_class>, 'pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace': <Scope: function get_node_of_current_namespace>, 'pyan.analyzer.CallGraphVisitor.get_value': <Scope: function get_value>, 'pyan.analyzer.CallGraphVisitor.get_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.set_value': <Scope: function set_value>, 'pyan.analyzer.CallGraphVisitor.set_value.find_scope': <Scope: function find_scope>, 'pyan.analyzer.CallGraphVisitor.get_attribute': <Scope: function get_attribute>, 'pyan.analyzer.CallGraphVisitor.get_attribute.lookup': <Scope: function lookup>, 'pyan.analyzer.CallGraphVisitor.set_attribute': <Scope: function set_attribute>, 'pyan.analyzer.CallGraphVisitor.get_node': <Scope: function get_node>, 'pyan.analyzer.CallGraphVisitor.get_parent_node': <Scope: function get_parent_node>, 'pyan.analyzer.CallGraphVisitor.associate_node': <Scope: function associate_node>, 'pyan.analyzer.CallGraphVisitor.add_defines_edge': <Scope: function add_defines_edge>, 'pyan.analyzer.CallGraphVisitor.add_uses_edge': <Scope: function add_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_uses_edge': <Scope: function remove_uses_edge>, 'pyan.analyzer.CallGraphVisitor.remove_wild': <Scope: function remove_wild>, 'pyan.analyzer.CallGraphVisitor.remove_wild.listcomp': <Scope: function listcomp>, 'pyan.analyzer.CallGraphVisitor.contract_nonexistents': <Scope: function contract_nonexistents>, 'pyan.analyzer.CallGraphVisitor.expand_unknowns': <Scope: function expand_unknowns>, 'pyan.analyzer.CallGraphVisitor.cull_inherited': <Scope: function cull_inherited>, 'pyan.analyzer.CallGraphVisitor.collapse_inner': <Scope: function collapse_inner>, 'pyan.anutils': <Scope: module >, 'pyan.anutils.head': <Scope: function head>, 'pyan.anutils.tail': <Scope: function tail>, 'pyan.anutils.get_module_name': <Scope: function get_module_name>, 'pyan.anutils.format_alias': <Scope: function format_alias>, 'pyan.anutils.get_ast_node_name': <Scope: function get_ast_node_name>, 'pyan.anutils.sanitize_exprs': <Scope: function sanitize_exprs>, 'pyan.anutils.sanitize_exprs.process': <Scope: function process>, 'pyan.anutils.sanitize_exprs.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order': <Scope: function resolve_method_resolution_order>, 'pyan.anutils.resolve_method_resolution_order.LinearizationImpossible': <Scope: class LinearizationImpossible>, 'pyan.anutils.resolve_method_resolution_order.C3_find_good_head': <Scope: function C3_find_good_head>, 'pyan.anutils.resolve_method_resolution_order.remove_all': <Scope: function remove_all>, 'pyan.anutils.resolve_method_resolution_order.remove_all.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in': <Scope: function remove_all_in>, 'pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_merge': <Scope: function C3_merge>, 'pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp': <Scope: function listcomp>, 'pyan.anutils.resolve_method_resolution_order.C3_linearize': <Scope: function C3_linearize>, 'pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive': <Scope: function lookup_bases_recursive>, 'pyan.anutils.UnresolvedSuperCallError': <Scope: class UnresolvedSuperCallError>, 'pyan.anutils.Scope': <Scope: class Scope>, 'pyan.anutils.Scope.__init__': <Scope: function __init__>, 'pyan.anutils.Scope.__init__.dictcomp': <Scope: function dictcomp>, 'pyan.anutils.Scope.__repr__': <Scope: function __repr__>, 'pyan.anutils.ExecuteInInnerScope': <Scope: class ExecuteInInnerScope>, 'pyan.anutils.ExecuteInInnerScope.__init__': <Scope: function __init__>, 'pyan.anutils.ExecuteInInnerScope.__enter__': <Scope: function __enter__>, 'pyan.anutils.ExecuteInInnerScope.__exit__': <Scope: function __exit__>, 'pyan': <Scope: module >, 'pyan.main': <Scope: module >, 'pyan.main.main': <Scope: function main>, 'pyan.main.main.listcomp': <Scope: function listcomp>, 'pyan.node': <Scope: module >, 'pyan.node.make_safe_label': <Scope: function make_safe_label>, 'pyan.node.Flavor': <Scope: class Flavor>, 'pyan.node.Flavor.specificity': <Scope: function specificity>, 'pyan.node.Flavor.__repr__': <Scope: function __repr__>, 'pyan.node.Node': <Scope: class Node>, 'pyan.node.Node.__init__': <Scope: function __init__>, 'pyan.node.Node.get_short_name': <Scope: function get_short_name>, 'pyan.node.Node.get_annotated_name': <Scope: function get_annotated_name>, 'pyan.node.Node.get_long_annotated_name': <Scope: function get_long_annotated_name>, 'pyan.node.Node.get_name': <Scope: function get_name>, 'pyan.node.Node.get_level': <Scope: function get_level>, 'pyan.node.Node.get_toplevel_namespace': <Scope: function get_toplevel_namespace>, 'pyan.node.Node.get_label': <Scope: function get_label>, 'pyan.node.Node.get_namespace_label': <Scope: function get_namespace_label>, 'pyan.node.Node.__repr__': <Scope: function __repr__>, 'pyan.visgraph': <Scope: module >, 'pyan.visgraph.Colorizer': <Scope: class Colorizer>, 'pyan.visgraph.Colorizer.__init__': <Scope: function __init__>, 'pyan.visgraph.Colorizer.__init__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.Colorizer._next_idx': <Scope: function _next_idx>, 'pyan.visgraph.Colorizer._node_to_idx': <Scope: function _node_to_idx>, 'pyan.visgraph.Colorizer.get': <Scope: function get>, 'pyan.visgraph.Colorizer.make_colors': <Scope: function make_colors>, 'pyan.visgraph.Colorizer.htmlize_rgb': <Scope: function htmlize_rgb>, 'pyan.visgraph.Colorizer.htmlize_rgb.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualNode': <Scope: class VisualNode>, 'pyan.visgraph.VisualNode.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualNode.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualNode.__repr__.listcomp': <Scope: function listcomp>, 'pyan.visgraph.VisualEdge': <Scope: class VisualEdge>, 'pyan.visgraph.VisualEdge.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualEdge.__repr__': <Scope: function __repr__>, 'pyan.visgraph.VisualGraph': <Scope: class VisualGraph>, 'pyan.visgraph.VisualGraph.__init__': <Scope: function __init__>, 'pyan.visgraph.VisualGraph.from_visitor': <Scope: function from_visitor>, 'pyan.visgraph.VisualGraph.from_visitor.lambda': <Scope: function lambda>, 'pyan.visgraph.VisualGraph.from_visitor.find_filenames': <Scope: function find_filenames>, 'pyan.writers': <Scope: module >, 'pyan.writers.Writer': <Scope: class Writer>, 'pyan.writers.Writer.__init__': <Scope: function __init__>, 'pyan.writers.Writer.log': <Scope: function log>, 'pyan.writers.Writer.indent': <Scope: function indent>, 'pyan.writers.Writer.dedent': <Scope: function dedent>, 'pyan.writers.Writer.write': <Scope: function write>, 'pyan.writers.Writer.run': <Scope: function run>, 'pyan.writers.Writer.write_subgraph': <Scope: function write_subgraph>, 'pyan.writers.Writer.write_edges': <Scope: function write_edges>, 'pyan.writers.Writer.start_graph': <Scope: function start_graph>, 'pyan.writers.Writer.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.Writer.write_node': <Scope: function write_node>, 'pyan.writers.Writer.start_edges': <Scope: function start_edges>, 'pyan.writers.Writer.write_edge': <Scope: function write_edge>, 'pyan.writers.Writer.finish_edges': <Scope: function finish_edges>, 'pyan.writers.Writer.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.Writer.finish_graph': <Scope: function finish_graph>, 'pyan.writers.TgfWriter': <Scope: class TgfWriter>, 'pyan.writers.TgfWriter.__init__': <Scope: function __init__>, 'pyan.writers.TgfWriter.write_node': <Scope: function write_node>, 'pyan.writers.TgfWriter.start_edges': <Scope: function start_edges>, 'pyan.writers.TgfWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter': <Scope: class DotWriter>, 'pyan.writers.DotWriter.__init__': <Scope: function __init__>, 'pyan.writers.DotWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.DotWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.DotWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.DotWriter.write_node': <Scope: function write_node>, 'pyan.writers.DotWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.DotWriter.finish_graph': <Scope: function finish_graph>, 'pyan.writers.YedWriter': <Scope: class YedWriter>, 'pyan.writers.YedWriter.__init__': <Scope: function __init__>, 'pyan.writers.YedWriter.start_graph': <Scope: function start_graph>, 'pyan.writers.YedWriter.start_subgraph': <Scope: function start_subgraph>, 'pyan.writers.YedWriter.finish_subgraph': <Scope: function finish_subgraph>, 'pyan.writers.YedWriter.write_node': <Scope: function write_node>, 'pyan.writers.YedWriter.write_edge': <Scope: function write_edge>, 'pyan.writers.YedWriter.finish_graph': <Scope: function finish_graph>}
Module
Import ['sys']
Set sys in <Scope: module > to <Node module:sys>
Use from <Node module:pyan.writers> to Import <Node module:sys>
Import ['logging']
Set logging in <Scope: module > to <Node module:logging>
Use from <Node module:pyan.writers> to Import <Node module:logging>
ClassDef Writer
Set Writer in <Scope: module > to <Node class:pyan.writers.Writer>
Name object in context <class '_ast.Load'>
Get object in <Scope: class Writer>: no Node value (or name not in scope)
Use from <Node class:pyan.writers.Writer> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class Writer> to <Node method:pyan.writers.Writer.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Assign ['self.graph'] ['graph']
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute graph of self in context <class '_ast.Store'>
Resolve self.graph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr graph of <Node class:pyan.writers.Writer>
setattr graph on self to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Assign ['self.output'] ['output']
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute output of self in context <class '_ast.Store'>
Resolve self.output in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr output of <Node class:pyan.writers.Writer>
setattr output on self to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Assign ['self.logger'] [<_ast.BoolOp object at 0x7ffa5c5282b0>]
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Call logging.getLogger
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ???:*.__name__>
Attribute getLogger of logging in context <class '_ast.Load'>
Resolve logging.getLogger in context <class '_ast.Load'>
Get logging in <Scope: function __init__>, found in <Scope: module >, value <Node module:logging>
Resolved to attr getLogger of <Node module:logging>
Use from <Node method:pyan.writers.Writer.__init__> to <Node attribute:logging.getLogger> (target obj <Node module:logging> known but target attr getLogger not resolved; maybe fwd ref or unanalyzed import)
Attribute logger of self in context <class '_ast.Store'>
Resolve self.logger in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr logger of <Node class:pyan.writers.Writer>
setattr logger on self to <Node attribute:logging.getLogger>
Assign ['self.indent_level'] [<_ast.Num object at 0x7ffa5c5283c8>]
Attribute indent_level of self in context <class '_ast.Store'>
Assign ['self.tabstop'] [<_ast.BinOp object at 0x7ffa5c528630>]
Name tabstop in context <class '_ast.Load'>
Get tabstop in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.__init__> to Name <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute tabstop of self in context <class '_ast.Store'>
Resolve self.tabstop in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.Writer>
Resolved to attr tabstop of <Node class:pyan.writers.Writer>
setattr tabstop on self to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
FunctionDef log
Set log in <Scope: class Writer> to <Node method:pyan.writers.Writer.log>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.logger.info
Name msg in context <class '_ast.Load'>
Get msg in <Scope: function log>, found in <Scope: function log>, value <Node ---:pyan.writers.Writer.log.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.log> to Name <Node ---:pyan.writers.Writer.log.^^^argument^^^>
Attribute info of self.logger in context <class '_ast.Load'>
Resolve self.logger.info in context <class '_ast.Load'>
Resolve self.logger in context <class '_ast.Load'>
Get self in <Scope: function log>, found in <Scope: function log>, value <Node class:pyan.writers.Writer>
Resolved to attr logger of <Node class:pyan.writers.Writer>
Resolved to attr info of <Node attribute:logging.getLogger>
Use from <Node method:pyan.writers.Writer.log> to <Node attribute:logging.getLogger.info> (target obj <Node attribute:logging.getLogger> known but target attr info not resolved; maybe fwd ref or unanalyzed import)
FunctionDef indent
Set indent in <Scope: class Writer> to <Node method:pyan.writers.Writer.indent>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
AugAssign ['self.indent_level'] <class '_ast.Add'> ['level']
Name level in context <class '_ast.Load'>
Get level in <Scope: function indent>, found in <Scope: function indent>, value <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.indent> to Name <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
Attribute indent_level of self in context <class '_ast.Store'>
Resolve self.indent_level in context <class '_ast.Store'>
Get self in <Scope: function indent>, found in <Scope: function indent>, value <Node class:pyan.writers.Writer>
Resolved to attr indent_level of <Node class:pyan.writers.Writer>
setattr indent_level on self to <Node ---:pyan.writers.Writer.indent.^^^argument^^^>
FunctionDef dedent
Set dedent in <Scope: class Writer> to <Node method:pyan.writers.Writer.dedent>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
AugAssign ['self.indent_level'] <class '_ast.Sub'> ['level']
Name level in context <class '_ast.Load'>
Get level in <Scope: function dedent>, found in <Scope: function dedent>, value <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.dedent> to Name <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Attribute indent_level of self in context <class '_ast.Store'>
Resolve self.indent_level in context <class '_ast.Store'>
Get self in <Scope: function dedent>, found in <Scope: function dedent>, value <Node class:pyan.writers.Writer>
Resolved to attr indent_level of <Node class:pyan.writers.Writer>
setattr indent_level on self to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
FunctionDef write
Set write in <Scope: class Writer> to <Node method:pyan.writers.Writer.write>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.outstream.write
Attribute tabstop of self in context <class '_ast.Load'>
Resolve self.tabstop in context <class '_ast.Load'>
Get self in <Scope: function write>, found in <Scope: function write>, value <Node class:pyan.writers.Writer>
Resolved to attr tabstop of <Node class:pyan.writers.Writer>
getattr tabstop on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute indent_level of self in context <class '_ast.Load'>
Resolve self.indent_level in context <class '_ast.Load'>
Get self in <Scope: function write>, found in <Scope: function write>, value <Node class:pyan.writers.Writer>
Resolved to attr indent_level of <Node class:pyan.writers.Writer>
getattr indent_level on self returns <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^>
Name line in context <class '_ast.Load'>
Get line in <Scope: function write>, found in <Scope: function write>, value <Node ---:pyan.writers.Writer.write.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write> to Name <Node ---:pyan.writers.Writer.write.^^^argument^^^>
Attribute write of self.outstream in context <class '_ast.Load'>
Resolve self.outstream.write in context <class '_ast.Load'>
Resolve self.outstream in context <class '_ast.Load'>
Get self in <Scope: function write>, found in <Scope: function write>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
Resolved to attr write of <Node attribute:sys.stdout>
Use from <Node method:pyan.writers.Writer.write> to <Node attribute:sys.stdout.write> (target obj <Node attribute:sys.stdout> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:pyan.writers.Writer.write> to <Node attribute:sys.stdout.write> resolves <Node ???:*.write>; removing wildcard
New edge added for Use from <Node method:pyan.writers.Writer.write> to <Node attribute:sys.stdout.write> (target obj <Node attribute:sys.stdout> known but target attr write not resolved; maybe fwd ref or unanalyzed import)
FunctionDef run
Set run in <Scope: class Writer> to <Node method:pyan.writers.Writer.run>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.log
Call type
Name self in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Name type in context <class '_ast.Load'>
Get type in <Scope: function run>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.type>
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr log of <Node class:pyan.writers.Writer>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.log>
Assign ['self.outstream'] [<_ast.Call object at 0x7ffa5c523d68>]
Call open
Attribute output of self in context <class '_ast.Load'>
Resolve self.output in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr output of <Node class:pyan.writers.Writer>
getattr output on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function run>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.open>
Attribute outstream of self in context <class '_ast.Store'>
Resolve self.outstream in context <class '_ast.Store'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
setattr outstream on self to <Node ???:*.open>
Name TypeError in context <class '_ast.Load'>
Get TypeError in <Scope: function run>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.Writer.run> to Name <Node ???:*.TypeError>
Assign ['self.outstream'] ['sys.stdout']
Attribute stdout of sys in context <class '_ast.Load'>
Resolve sys.stdout in context <class '_ast.Load'>
Get sys in <Scope: function run>, found in <Scope: module >, value <Node module:sys>
Resolved to attr stdout of <Node module:sys>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout> (target obj <Node module:sys> known but target attr stdout not resolved; maybe fwd ref or unanalyzed import)
Attribute outstream of self in context <class '_ast.Store'>
Resolve self.outstream in context <class '_ast.Store'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
setattr outstream on self to <Node attribute:sys.stdout>
Call self.start_graph
Attribute start_graph of self in context <class '_ast.Load'>
Resolve self.start_graph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr start_graph of <Node class:pyan.writers.Writer>
getattr start_graph on self returns <Node method:pyan.writers.Writer.start_graph>
Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.start_graph>
Call self.write_subgraph
Attribute graph of self in context <class '_ast.Load'>
Resolve self.graph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr graph of <Node class:pyan.writers.Writer>
getattr graph on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Attribute write_subgraph of self in context <class '_ast.Load'>
Resolve self.write_subgraph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr write_subgraph of <Node class:pyan.writers.Writer>
getattr write_subgraph on self returns <Node method:pyan.writers.Writer.write_subgraph>
Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.write_subgraph>
Call self.write_edges
Attribute write_edges of self in context <class '_ast.Load'>
Resolve self.write_edges in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr write_edges of <Node class:pyan.writers.Writer>
getattr write_edges on self returns <Node method:pyan.writers.Writer.write_edges>
Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.write_edges>
Call self.finish_graph
Attribute finish_graph of self in context <class '_ast.Load'>
Resolve self.finish_graph in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr finish_graph of <Node class:pyan.writers.Writer>
getattr finish_graph on self returns <Node method:pyan.writers.Writer.finish_graph>
Use from <Node method:pyan.writers.Writer.run> to <Node method:pyan.writers.Writer.finish_graph>
Attribute output of self in context <class '_ast.Load'>
Resolve self.output in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr output of <Node class:pyan.writers.Writer>
getattr output on self returns <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Call self.outstream.close
Attribute close of self.outstream in context <class '_ast.Load'>
Resolve self.outstream.close in context <class '_ast.Load'>
Resolve self.outstream in context <class '_ast.Load'>
Get self in <Scope: function run>, found in <Scope: function run>, value <Node class:pyan.writers.Writer>
Resolved to attr outstream of <Node class:pyan.writers.Writer>
Resolved to attr close of <Node attribute:sys.stdout>
Use from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout.close> (target obj <Node attribute:sys.stdout> known but target attr close not resolved; maybe fwd ref or unanalyzed import)
FunctionDef write_subgraph
Set write_subgraph in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.start_subgraph
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Attribute start_subgraph of self in context <class '_ast.Load'>
Resolve self.start_subgraph in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr start_subgraph of <Node class:pyan.writers.Writer>
getattr start_subgraph on self returns <Node method:pyan.writers.Writer.start_subgraph>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node method:pyan.writers.Writer.start_subgraph>
For-loop
Attribute nodes of graph in context <class '_ast.Load'>
Resolve graph.nodes in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Resolved to attr nodes of <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> (target obj <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> known but target attr nodes not resolved; maybe fwd ref or unanalyzed import)
Name node in context <class '_ast.Store'>
Set node in <Scope: function write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Call self.write_node
Name node in context <class '_ast.Load'>
Get node in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Attribute write_node of self in context <class '_ast.Load'>
Resolve self.write_node in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr write_node of <Node class:pyan.writers.Writer>
getattr write_node on self returns <Node method:pyan.writers.Writer.write_node>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node method:pyan.writers.Writer.write_node>
For-loop
Attribute subgraphs of graph in context <class '_ast.Load'>
Resolve graph.subgraphs in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Resolved to attr subgraphs of <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs> (target obj <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> known but target attr subgraphs not resolved; maybe fwd ref or unanalyzed import)
Name subgraph in context <class '_ast.Store'>
Set subgraph in <Scope: function write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs>
Call self.write_subgraph
Name subgraph in context <class '_ast.Load'>
Get subgraph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs>
Attribute write_subgraph of self in context <class '_ast.Load'>
Resolve self.write_subgraph in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr write_subgraph of <Node class:pyan.writers.Writer>
getattr write_subgraph on self returns <Node method:pyan.writers.Writer.write_subgraph>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node method:pyan.writers.Writer.write_subgraph>
Call self.finish_subgraph
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_subgraph> to Name <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^>
Attribute finish_subgraph of self in context <class '_ast.Load'>
Resolve self.finish_subgraph in context <class '_ast.Load'>
Get self in <Scope: function write_subgraph>, found in <Scope: function write_subgraph>, value <Node class:pyan.writers.Writer>
Resolved to attr finish_subgraph of <Node class:pyan.writers.Writer>
getattr finish_subgraph on self returns <Node method:pyan.writers.Writer.finish_subgraph>
Use from <Node method:pyan.writers.Writer.write_subgraph> to <Node method:pyan.writers.Writer.finish_subgraph>
FunctionDef write_edges
Set write_edges in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_edges>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
Call self.start_edges
Attribute start_edges of self in context <class '_ast.Load'>
Resolve self.start_edges in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr start_edges of <Node class:pyan.writers.Writer>
getattr start_edges on self returns <Node method:pyan.writers.Writer.start_edges>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node method:pyan.writers.Writer.start_edges>
For-loop
Attribute edges of self.graph in context <class '_ast.Load'>
Resolve self.graph.edges in context <class '_ast.Load'>
Resolve self.graph in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr graph of <Node class:pyan.writers.Writer>
Resolved to attr edges of <Node ---:pyan.writers.Writer.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges> (target obj <Node ---:pyan.writers.Writer.__init__.^^^argument^^^> known but target attr edges not resolved; maybe fwd ref or unanalyzed import)
Name edge in context <class '_ast.Store'>
Set edge in <Scope: function write_edges> to <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges>
Call self.write_edge
Name edge in context <class '_ast.Load'>
Get edge in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges>
Use from <Node method:pyan.writers.Writer.write_edges> to Name <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges>
Attribute write_edge of self in context <class '_ast.Load'>
Resolve self.write_edge in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr write_edge of <Node class:pyan.writers.Writer>
getattr write_edge on self returns <Node method:pyan.writers.Writer.write_edge>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node method:pyan.writers.Writer.write_edge>
Call self.finish_edges
Attribute finish_edges of self in context <class '_ast.Load'>
Resolve self.finish_edges in context <class '_ast.Load'>
Get self in <Scope: function write_edges>, found in <Scope: function write_edges>, value <Node class:pyan.writers.Writer>
Resolved to attr finish_edges of <Node class:pyan.writers.Writer>
getattr finish_edges on self returns <Node method:pyan.writers.Writer.finish_edges>
Use from <Node method:pyan.writers.Writer.write_edges> to <Node method:pyan.writers.Writer.finish_edges>
FunctionDef start_graph
Set start_graph in <Scope: class Writer> to <Node method:pyan.writers.Writer.start_graph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef start_subgraph
Set start_subgraph in <Scope: class Writer> to <Node method:pyan.writers.Writer.start_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef write_node
Set write_node in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef start_edges
Set start_edges in <Scope: class Writer> to <Node method:pyan.writers.Writer.start_edges>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef write_edge
Set write_edge in <Scope: class Writer> to <Node method:pyan.writers.Writer.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef finish_edges
Set finish_edges in <Scope: class Writer> to <Node method:pyan.writers.Writer.finish_edges>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef finish_subgraph
Set finish_subgraph in <Scope: class Writer> to <Node method:pyan.writers.Writer.finish_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
FunctionDef finish_graph
Set finish_graph in <Scope: class Writer> to <Node method:pyan.writers.Writer.finish_graph>
Method def: setting self name "self" to <Node class:pyan.writers.Writer>
ClassDef TgfWriter
Set TgfWriter in <Scope: module > to <Node class:pyan.writers.TgfWriter>
Name Writer in context <class '_ast.Load'>
Get Writer in <Scope: class TgfWriter>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Use from <Node class:pyan.writers.TgfWriter> to Name <Node class:pyan.writers.Writer>
FunctionDef __init__
Set __init__ in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Call Writer.__init__
Name self in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.TgfWriter>
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.__init__> to Name <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^>
Attribute __init__ of Writer in context <class '_ast.Load'>
Resolve Writer.__init__ in context <class '_ast.Load'>
Get Writer in <Scope: function __init__>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Resolved to attr __init__ of <Node class:pyan.writers.Writer>
getattr __init__ on Writer returns <Node method:pyan.writers.Writer.__init__>
Use from <Node method:pyan.writers.TgfWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
Assign ['self.i'] [<_ast.Num object at 0x7ffa5c52e0b8>]
Attribute i of self in context <class '_ast.Store'>
Assign ['self.id_map'] [<_ast.Dict object at 0x7ffa5c52e400>]
Attribute id_map of self in context <class '_ast.Store'>
FunctionDef write_node
Set write_node in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Call self.write
Attribute i of self in context <class '_ast.Load'>
Resolve self.i in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr i of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node ???:*.i> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node ???:*.i> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr write of <Node class:pyan.writers.TgfWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node method:pyan.writers.Writer.write>
Assign [<_ast.Subscript object at 0x7ffa5c59cdd8>] ['self.i']
Attribute i of self in context <class '_ast.Load'>
Resolve self.i in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr i of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node ???:*.i> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute id_map of self in context <class '_ast.Load'>
Resolve self.id_map in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr id_map of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node ???:*.id_map> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_node> to <Node ???:*.id_map> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name node in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_node> to Name <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^>
AugAssign ['self.i'] <class '_ast.Add'> [<_ast.Num object at 0x7ffa5c59c160>]
Attribute i of self in context <class '_ast.Store'>
FunctionDef start_edges
Set start_edges in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.start_edges>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_edges>, found in <Scope: function start_edges>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr write of <Node class:pyan.writers.TgfWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.TgfWriter.start_edges> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.TgfWriter.start_edges> to <Node method:pyan.writers.Writer.write>
FunctionDef write_edge
Set write_edge in <Scope: class TgfWriter> to <Node method:pyan.writers.TgfWriter.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.TgfWriter>
Assign ['flavor'] [<_ast.IfExp object at 0x7ffa5c59c940>]
Attribute flavor of edge in context <class '_ast.Load'>
Resolve edge.flavor in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Store'>
Set flavor in <Scope: function write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Call self.write
Attribute id_map of self in context <class '_ast.Load'>
Resolve self.id_map in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr id_map of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node ???:*.id_map> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node ???:*.id_map> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute source of edge in context <class '_ast.Load'>
Resolve edge.source in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Resolved to attr source of <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
Attribute id_map of self in context <class '_ast.Load'>
Resolve self.id_map in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr id_map of <Node class:pyan.writers.TgfWriter>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node ???:*.id_map> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute target of edge in context <class '_ast.Load'>
Resolve edge.target in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.TgfWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name flavor in context <class '_ast.Load'>
Get flavor in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to Name <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.TgfWriter>
Resolved to attr write of <Node class:pyan.writers.TgfWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.TgfWriter.write_edge> to <Node method:pyan.writers.Writer.write>
ClassDef DotWriter
Set DotWriter in <Scope: module > to <Node class:pyan.writers.DotWriter>
Name Writer in context <class '_ast.Load'>
Get Writer in <Scope: class DotWriter>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Use from <Node class:pyan.writers.DotWriter> to Name <Node class:pyan.writers.Writer>
FunctionDef __init__
Set __init__ in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call Writer.__init__
Name self in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.DotWriter>
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name tabstop in context <class '_ast.Load'>
Get tabstop in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Attribute __init__ of Writer in context <class '_ast.Load'>
Resolve Writer.__init__ in context <class '_ast.Load'>
Get Writer in <Scope: function __init__>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Resolved to attr __init__ of <Node class:pyan.writers.Writer>
getattr __init__ on Writer returns <Node method:pyan.writers.Writer.__init__>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
Assign ['options'] [<_ast.BoolOp object at 0x7ffa5c597d30>]
Name options in context <class '_ast.Load'>
Get options in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Name options in context <class '_ast.Store'>
Set options in <Scope: function __init__> to <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Attribute grouped of graph in context <class '_ast.Load'>
Resolve graph.grouped in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Resolved to attr grouped of <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
AugAssign ['options'] <class '_ast.Add'> [<_ast.Str object at 0x7ffa5c597f60>]
Name options in context <class '_ast.Store'>
Set options in <Scope: function __init__>: value None is not a Node
Assign ['self.options'] [<_ast.Call object at 0x7ffa5c597550>]
Call <_ast.Str object at 0x7ffa5c597470>.join
Name options in context <class '_ast.Load'>
Get options in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to Name <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Attribute join of <_ast.Str object at 0x7ffa5c597470> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x7ffa5c597470>.join in context <class '_ast.Load'>
Resolved to attr join of <Node class:Str>
getattr join on <_ast.Str object at 0x7ffa5c597470> returns <Node attribute:Str.join>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:Str.join>
Attribute options of self in context <class '_ast.Store'>
Resolve self.options in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.DotWriter>
Resolved to attr options of <Node class:pyan.writers.DotWriter>
setattr options on self to <Node attribute:Str.join>
Assign ['self.grouped'] ['graph.grouped']
Attribute grouped of graph in context <class '_ast.Load'>
Resolve graph.grouped in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Resolved to attr grouped of <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped of self in context <class '_ast.Store'>
Resolve self.grouped in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.DotWriter>
Resolved to attr grouped of <Node class:pyan.writers.DotWriter>
setattr grouped on self to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped>
FunctionDef start_graph
Set start_graph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.start_graph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute options of self in context <class '_ast.Load'>
Resolve self.options in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr options of <Node class:pyan.writers.DotWriter>
getattr options on self returns <Node attribute:Str.join>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:Str.join>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr indent of <Node class:pyan.writers.DotWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node method:pyan.writers.Writer.indent>
New edge added for Use from <Node method:pyan.writers.DotWriter.start_graph> to <Node method:pyan.writers.Writer.indent>
FunctionDef start_subgraph
Set start_subgraph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.start_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr log of <Node class:pyan.writers.DotWriter>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.log>
Call self.write
Attribute id of graph in context <class '_ast.Load'>
Resolve graph.id in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr indent of <Node class:pyan.writers.DotWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
New edge added for Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
FunctionDef finish_subgraph
Set finish_subgraph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.finish_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr log of <Node class:pyan.writers.DotWriter>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node method:pyan.writers.Writer.log>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr dedent of <Node class:pyan.writers.DotWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node method:pyan.writers.Writer.dedent>
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node method:pyan.writers.Writer.write>
FunctionDef write_node
Set write_node in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.log
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.DotWriter>
Resolved to attr log of <Node class:pyan.writers.DotWriter>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node method:pyan.writers.Writer.log>
Call self.write
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.id> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute fill_color of node in context <class '_ast.Load'>
Resolve node.fill_color in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr fill_color of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.fill_color> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr fill_color not resolved; maybe fwd ref or unanalyzed import)
Attribute text_color of node in context <class '_ast.Load'>
Resolve node.text_color in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr text_color of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.text_color> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr text_color not resolved; maybe fwd ref or unanalyzed import)
Attribute group of node in context <class '_ast.Load'>
Resolve node.group in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Resolved to attr group of <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.group> (target obj <Node ---:pyan.writers.DotWriter.write_node.^^^argument^^^> known but target attr group not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.write_node> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.DotWriter.write_node> to <Node method:pyan.writers.Writer.write>
FunctionDef write_edge
Set write_edge in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Assign ['source'] ['edge.source']
Attribute source of edge in context <class '_ast.Load'>
Resolve edge.source in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr source of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
Name source in context <class '_ast.Store'>
Set source in <Scope: function write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Assign ['target'] ['edge.target']
Attribute target of edge in context <class '_ast.Load'>
Resolve edge.target in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name target in context <class '_ast.Store'>
Set target in <Scope: function write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Assign ['color'] ['edge.color']
Attribute color of edge in context <class '_ast.Load'>
Resolve edge.color in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr color of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
Name color in context <class '_ast.Store'>
Set color in <Scope: function write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Attribute flavor of edge in context <class '_ast.Load'>
Resolve edge.flavor in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.DotWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute id of source in context <class '_ast.Load'>
Resolve source.id in context <class '_ast.Load'>
Get source in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of target in context <class '_ast.Load'>
Resolve target.id in context <class '_ast.Load'>
Get target in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name color in context <class '_ast.Load'>
Get color in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Use from <Node method:pyan.writers.DotWriter.write_edge> to Name <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute id of source in context <class '_ast.Load'>
Resolve source.id in context <class '_ast.Load'>
Get source in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of target in context <class '_ast.Load'>
Resolve target.id in context <class '_ast.Load'>
Get target in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Resolved to attr id of <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Name color in context <class '_ast.Load'>
Get color in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Use from <Node method:pyan.writers.DotWriter.write_edge> to Name <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.write_edge> to <Node method:pyan.writers.Writer.write>
FunctionDef finish_graph
Set finish_graph in <Scope: class DotWriter> to <Node method:pyan.writers.DotWriter.finish_graph>
Method def: setting self name "self" to <Node class:pyan.writers.DotWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.DotWriter>
Resolved to attr write of <Node class:pyan.writers.DotWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.DotWriter.finish_graph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.DotWriter.finish_graph> to <Node method:pyan.writers.Writer.write>
ClassDef YedWriter
Set YedWriter in <Scope: module > to <Node class:pyan.writers.YedWriter>
Name Writer in context <class '_ast.Load'>
Get Writer in <Scope: class YedWriter>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Use from <Node class:pyan.writers.YedWriter> to Name <Node class:pyan.writers.Writer>
FunctionDef __init__
Set __init__ in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.__init__>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call Writer.__init__
Name self in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.YedWriter>
Name graph in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Name output in context <class '_ast.Load'>
Get output in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Name logger in context <class '_ast.Load'>
Get logger in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Name tabstop in context <class '_ast.Load'>
Get tabstop in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to Name <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Attribute __init__ of Writer in context <class '_ast.Load'>
Resolve Writer.__init__ in context <class '_ast.Load'>
Get Writer in <Scope: function __init__>, found in <Scope: module >, value <Node class:pyan.writers.Writer>
Resolved to attr __init__ of <Node class:pyan.writers.Writer>
getattr __init__ on Writer returns <Node method:pyan.writers.Writer.__init__>
Use from <Node method:pyan.writers.YedWriter.__init__> to <Node method:pyan.writers.Writer.__init__>
Assign ['self.grouped'] ['graph.grouped']
Attribute grouped of graph in context <class '_ast.Load'>
Resolve graph.grouped in context <class '_ast.Load'>
Get graph in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Resolved to attr grouped of <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.__init__> to <Node attribute:pyan.writers.YedWriter.__init__.^^^argument^^^.grouped> (target obj <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^> known but target attr grouped not resolved; maybe fwd ref or unanalyzed import)
Attribute grouped of self in context <class '_ast.Store'>
Resolve self.grouped in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:pyan.writers.YedWriter>
Resolved to attr grouped of <Node class:pyan.writers.YedWriter>
setattr grouped on self to <Node attribute:pyan.writers.YedWriter.__init__.^^^argument^^^.grouped>
Assign ['self.indent_level'] [<_ast.Num object at 0x7ffa5c58e668>]
Attribute indent_level of self in context <class '_ast.Store'>
Assign ['self.edge_id'] [<_ast.Num object at 0x7ffa5c58e4e0>]
Attribute edge_id of self in context <class '_ast.Store'>
FunctionDef start_graph
Set start_graph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.start_graph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.indent>
New edge added for Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_graph>, found in <Scope: function start_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_graph> to <Node method:pyan.writers.Writer.indent>
FunctionDef start_subgraph
Set start_subgraph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.start_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr log of <Node class:pyan.writers.YedWriter>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.log>
Call self.write
Attribute id of graph in context <class '_ast.Load'>
Resolve graph.id in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.dedent>
New edge added for Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute id of graph in context <class '_ast.Load'>
Resolve graph.id in context <class '_ast.Load'>
Get graph in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.start_subgraph.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function start_subgraph>, found in <Scope: function start_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node method:pyan.writers.Writer.indent>
FunctionDef finish_subgraph
Set finish_subgraph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.finish_subgraph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.log
Attribute label of graph in context <class '_ast.Load'>
Resolve graph.label in context <class '_ast.Load'>
Get graph in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr log of <Node class:pyan.writers.YedWriter>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.log>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.dedent>
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_subgraph>, found in <Scope: function finish_subgraph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node method:pyan.writers.Writer.write>
FunctionDef write_node
Set write_node in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.write_node>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.log
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute log of self in context <class '_ast.Load'>
Resolve self.log in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr log of <Node class:pyan.writers.YedWriter>
getattr log on self returns <Node method:pyan.writers.Writer.log>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.log>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.log>
Assign ['width'] [<_ast.BinOp object at 0x7ffa5c57a390>]
Call len
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function write_node>: no Node value (or name not in scope)
Use from <Node method:pyan.writers.YedWriter.write_node> to Name <Node ???:*.len>
Name width in context <class '_ast.Store'>
Set width in <Scope: function write_node> to <Node ???:*.len>
Call self.write
Attribute id of node in context <class '_ast.Load'>
Resolve node.id in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr id of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.id> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.indent>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.indent>
Call self.write
Name width in context <class '_ast.Load'>
Get width in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ???:*.len>
Use from <Node method:pyan.writers.YedWriter.write_node> to Name <Node ???:*.len>
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute fill_color of node in context <class '_ast.Load'>
Resolve node.fill_color in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr fill_color of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.fill_color> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr fill_color not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute label of node in context <class '_ast.Load'>
Resolve node.label in context <class '_ast.Load'>
Get node in <Scope: function write_node>, found in <Scope: function write_node>, value <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Resolved to attr label of <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> (target obj <Node ---:pyan.writers.YedWriter.write_node.^^^argument^^^> known but target attr label not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.dedent>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_node>, found in <Scope: function write_node>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_node> to <Node method:pyan.writers.Writer.write>
FunctionDef write_edge
Set write_edge in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.write_edge>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
AugAssign ['self.edge_id'] <class '_ast.Add'> [<_ast.Num object at 0x7ffa5c64a668>]
Attribute edge_id of self in context <class '_ast.Store'>
Assign ['source'] ['edge.source']
Attribute source of edge in context <class '_ast.Load'>
Resolve edge.source in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr source of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr source not resolved; maybe fwd ref or unanalyzed import)
Name source in context <class '_ast.Store'>
Set source in <Scope: function write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source>
Assign ['target'] ['edge.target']
Attribute target of edge in context <class '_ast.Load'>
Resolve edge.target in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr target of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr target not resolved; maybe fwd ref or unanalyzed import)
Name target in context <class '_ast.Store'>
Set target in <Scope: function write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target>
Call self.write
Attribute edge_id of self in context <class '_ast.Load'>
Resolve self.edge_id in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr edge_id of <Node class:pyan.writers.YedWriter>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node ???:*.edge_id> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node ???:*.edge_id> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute id of source in context <class '_ast.Load'>
Resolve source.id in context <class '_ast.Load'>
Get source in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source>
Resolved to attr id of <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source.id> (target obj <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute id of target in context <class '_ast.Load'>
Resolve target.id in context <class '_ast.Load'>
Get target in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target>
Resolved to attr id of <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target.id> (target obj <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> known but target attr id not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.indent>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.indent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.indent
Attribute indent of self in context <class '_ast.Load'>
Resolve self.indent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr indent of <Node class:pyan.writers.YedWriter>
getattr indent on self returns <Node method:pyan.writers.Writer.indent>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.indent>
Attribute flavor of edge in context <class '_ast.Load'>
Resolve edge.flavor in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr flavor of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.flavor> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr flavor not resolved; maybe fwd ref or unanalyzed import)
Call self.write
Attribute color of edge in context <class '_ast.Load'>
Resolve edge.color in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr color of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute color of edge in context <class '_ast.Load'>
Resolve edge.color in context <class '_ast.Load'>
Get edge in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Resolved to attr color of <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.color> (target obj <Node ---:pyan.writers.YedWriter.write_edge.^^^argument^^^> known but target attr color not resolved; maybe fwd ref or unanalyzed import)
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.dedent>
New edge added for Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function write_edge>, found in <Scope: function write_edge>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.write_edge> to <Node method:pyan.writers.Writer.write>
FunctionDef finish_graph
Set finish_graph in <Scope: class YedWriter> to <Node method:pyan.writers.YedWriter.finish_graph>
Method def: setting self name "self" to <Node class:pyan.writers.YedWriter>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node method:pyan.writers.Writer.dedent>
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node method:pyan.writers.Writer.write>
New edge added for Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node method:pyan.writers.Writer.write>
Call self.dedent
Attribute dedent of self in context <class '_ast.Load'>
Resolve self.dedent in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr dedent of <Node class:pyan.writers.YedWriter>
getattr dedent on self returns <Node method:pyan.writers.Writer.dedent>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node method:pyan.writers.Writer.dedent>
Call self.write
Attribute write of self in context <class '_ast.Load'>
Resolve self.write in context <class '_ast.Load'>
Get self in <Scope: function finish_graph>, found in <Scope: function finish_graph>, value <Node class:pyan.writers.YedWriter>
Resolved to attr write of <Node class:pyan.writers.YedWriter>
getattr write on self returns <Node method:pyan.writers.Writer.write>
Use from <Node method:pyan.writers.YedWriter.finish_graph> to <Node method:pyan.writers.Writer.write>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target.id>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.generic_visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.node.Flavor.MODULE>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> resolves <Node ???:*.get_name>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.tail.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node method:pyan.node.Node.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.node.Flavor.CLASS>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> resolves <Node ???:*.get_name>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.tail.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node method:pyan.node.Node.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Use from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> resolves <Node ???:*.defs>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.MODULE>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.MODULE>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.UNKNOWN>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.node.Flavor.UNKNOWN>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.node.Flavor.METHOD>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.node.Flavor.METHOD>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.FUNCTION>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.STATICMETHOD>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.METHOD>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.CLASSMETHOD>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args.arg>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs.arg>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.node.Flavor.CLASS>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Use from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> resolves <Node ???:*.scopes>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> resolves <Node ???:*.defs>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_stack>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.node.Flavor.NAMESPACE>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack>
Use from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> resolves <Node ???:*.defs>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack>
Use from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> resolves <Node ???:*.defs>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.UNSPECIFIED>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename>
Use from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.anutils.get_module_name.rsplit> resolves <Node ???:*.rsplit>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.anutils.get_module_name.rsplit>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node import:operator.add> resolves <Node ???:*.add>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node import:operator.add>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Use from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node import:operator.add> resolves <Node ???:*.add>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node import:operator.add>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find>
Expanding unknowns: new uses edge from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.defined>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes.defined>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> resolves <Node ???:*.name>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.anutils.Scope.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> resolves <Node ???:*.namespace>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.ast_node>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> resolves <Node ???:*.namespace>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> resolves <Node ???:*.name>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.anutils.Scope.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> resolves <Node ???:*.name>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.anutils.Scope.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name>
Use from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> resolves <Node ???:*.namespace>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges>
Expanding unknowns: new uses edge from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges>
Expanding unknowns: new uses edge from <Node function:pyan.anutils.get_module_name> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace>
Use from <Node function:pyan.anutils.get_module_name> to <Node attribute:Str.join> resolves <Node ???:*.join>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.anutils.get_module_name> to <Node attribute:Str.join>
Expanding unknowns: new uses edge from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node import:operator.add> resolves <Node ???:*.add>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node import:operator.add>
Use from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node import:operator.add> resolves <Node ???:*.add>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node import:operator.add>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> resolves <Node ???:*.get_name>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.tail.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node method:pyan.node.Node.get_name>
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.node.Flavor.NAMESPACE>
Use from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:logging.getLogger.info> resolves <Node ???:*.info>; removing wildcard
Expanding unknowns: new uses edge from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:logging.getLogger.info>
Expanding unknowns: new uses edge from <Node function:pyan.node.make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace>
Expanding unknowns: new uses edge from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.NAMESPACE>
Expanding unknowns: new uses edge from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNSPECIFIED>
Expanding unknowns: new uses edge from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM>
Expanding unknowns: new uses edge from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.ATTRIBUTE>
Expanding unknowns: new uses edge from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNKNOWN>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.node.Flavor.value>
Expanding unknowns: new uses edge from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:pyan.visgraph.Colorizer._idx>
Expanding unknowns: new uses edge from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._idx_of>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.TgfWriter.write_node.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> resolves <Node ???:*.namespace>; removing wildcard
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> resolves <Node ???:*.name>; removing wildcard
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.anutils.Scope.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_namespace_label> resolves <Node ???:*.get_namespace_label>; removing wildcard
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_namespace_label>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_label> resolves <Node ???:*.get_label>; removing wildcard
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_label>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.flavor>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.flavor>
Expanding unknowns: new uses edge from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.flavor>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node method:pyan.node.Node.get_annotated_name> resolves <Node ???:*.get_annotated_name>; removing wildcard
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node method:pyan.node.Node.get_annotated_name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_annotated_name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> resolves <Node ???:*.name>; removing wildcard
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.anutils.Scope.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node method:pyan.node.Node.get_long_annotated_name> resolves <Node ???:*.get_long_annotated_name>; removing wildcard
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node method:pyan.node.Node.get_long_annotated_name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_long_annotated_name>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> resolves <Node ???:*.namespace>; removing wildcard
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace>
Use from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node method:pyan.node.Node.get_short_name> resolves <Node ???:*.get_short_name>; removing wildcard
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node method:pyan.node.Node.get_short_name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.get_short_name>
Expanding unknowns: new uses edge from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_short_name>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node import:operator.add> resolves <Node ???:*.add>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node import:operator.add>
Use from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node attribute:optparse.OptionParser.parse_args.filename> resolves <Node ???:*.filename>; removing wildcard
Expanding unknowns: new uses edge from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node attribute:optparse.OptionParser.parse_args.filename>
Expanding unknowns: new uses edge from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename>
Expanding unknowns: new uses edge from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.i>
Expanding unknowns: new uses edge from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.id_map>
Expanding unknowns: new uses edge from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.id_map>
Expanding unknowns: new uses edge from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.edge_id>
Contracting non-existent from <Node module:pyan.analyzer> to <Node module:anutils> as <Node ---:*.anutils>
Contracting non-existent from <Node module:pyan.analyzer> to <Node module:logging> as <Node ---:*.logging>
Contracting non-existent from <Node module:pyan.analyzer> to <Node module:symtable> as <Node ---:*.symtable>
Contracting non-existent from <Node module:pyan.analyzer> to <Node module:ast> as <Node ---:*.ast>
Contracting non-existent from <Node module:pyan.analyzer> to <Node module:node> as <Node ---:*.node>
Contracting non-existent from <Node class:pyan.analyzer.CallGraphVisitor> to <Node attribute:ast.NodeVisitor> as <Node ---:*.NodeVisitor>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:logging.getLogger> as <Node ---:*.getLogger>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> as <Node ???:*.module_to_filename>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.anutils.get_module_name.rsplit> as <Node ???:*.rsplit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.__init__> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> as <Node ???:*.module_names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:ast.parse> as <Node ---:*.parse>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node method:*.open.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node method:*.open.__exit__> as <Node ---:*.__exit__>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.process_one> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> as <Node ???:*.class_base_ast_nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> as <Node ???:*.scope_stack>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_nodes> as <Node ???:*.class_base_nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Name> as <Node ---:*.Name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:logging.getLogger> as <Node ---:*.getLogger>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:ast.Attribute> as <Node ---:*.Attribute>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_base_classes> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.node.Flavor.MODULE> as <Node ???:*.MODULE>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.generic_visit> as <Node ???:*.generic_visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Module> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_Module.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.node.Flavor.CLASS> as <Node ???:*.CLASS>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.body> as <Node ---:*.body>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.bases> as <Node ---:*.bases>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> as <Node ???:*.class_base_ast_nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.tail.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ClassDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args> as <Node ---:*.args>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args> as <Node ---:*.args>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.tail.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwarg> as <Node ---:*.kwarg>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs> as <Node ---:*.kwonlyargs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.vararg> as <Node ---:*.vararg>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args.arg> as <Node ???:*.arg>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.body> as <Node ---:*.body>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs.arg> as <Node ???:*.arg>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_FunctionDef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFunctionDef.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Lambda.^^^argument^^^.body> as <Node ---:*.body>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> as <Node ---:*.names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names> as <Node ---:*.names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> as <Node ???:*.IMPORTEDITEM>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.node.Flavor.MODULE> as <Node ???:*.MODULE>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.asname> as <Node ---:*.asname>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> as <Node ???:*.module_names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Import> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> as <Node ???:*.IMPORTEDITEM>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.node.Flavor.MODULE> as <Node ???:*.MODULE>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> as <Node ---:*.names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.module> as <Node ---:*.module>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_names> as <Node ???:*.module_names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.asname> as <Node ---:*.asname>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names> as <Node ---:*.names>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Store> as <Node ---:*.Store>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.attr> as <Node ---:*.attr>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.ctx> as <Node ---:*.ctx>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.last_value> as <Node ---:*.last_value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:ast.Load> as <Node ---:*.Load>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> as <Node ???:*.ATTRIBUTE>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Attribute> to <Node attribute:pyan.node.Flavor.UNKNOWN> as <Node ???:*.UNKNOWN>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.ctx> as <Node ---:*.ctx>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Store> as <Node ---:*.Store>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:ast.Load> as <Node ---:*.Load>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.node.Flavor.UNKNOWN> as <Node ???:*.UNKNOWN>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Name> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_Name.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.targets> as <Node ---:*.targets>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AnnAssign> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_AnnAssign.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.op> as <Node ---:*.op>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.target> as <Node ---:*.target>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.target> as <Node ---:*.target>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.iter> as <Node ---:*.iter>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.body> as <Node ---:*.body>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_For.^^^argument^^^.orelse> as <Node ---:*.orelse>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_For> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_AsyncFor> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_AsyncFor.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.elt> as <Node ---:*.elt>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_ListComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ListComp.^^^argument^^^.generators> as <Node ---:*.generators>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.elt> as <Node ---:*.elt>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_SetComp.^^^argument^^^.generators> as <Node ---:*.generators>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_SetComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.generators> as <Node ---:*.generators>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.key> as <Node ---:*.key>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_DictComp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.elt> as <Node ---:*.elt>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp.^^^argument^^^.generators> as <Node ---:*.generators>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_GeneratorExp> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes> as <Node ???:*.class_base_ast_nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.node.Flavor.METHOD> as <Node ???:*.METHOD>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.func> as <Node ---:*.func>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.args> as <Node ---:*.args>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords> as <Node ---:*.keywords>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_Call> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.context_expr> as <Node ---:*.context_expr>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:ast.Name> as <Node ---:*.Name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items> as <Node ---:*.items>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.body> as <Node ---:*.body>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.^^^argument^^^.items.optional_vars> as <Node ---:*.optional_vars>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.visit_With> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.node.Flavor.METHOD> as <Node ???:*.METHOD>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node ---:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.METHOD> as <Node ???:*.METHOD>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.decorator_list> as <Node ---:*.decorator_list>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:ast.FunctionDef> as <Node ---:*.FunctionDef>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.args.arg> as <Node ???:*.arg>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.args.kwonlyargs.arg> as <Node ???:*.arg>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args> as <Node ---:*.args>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.FUNCTION> as <Node ???:*.FUNCTION>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_functiondef.^^^argument^^^.args.args> as <Node ---:*.args>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.STATICMETHOD> as <Node ???:*.STATICMETHOD>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.node.Flavor.CLASSMETHOD> as <Node ???:*.CLASSMETHOD>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_functiondef> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_binding.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_binding> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.ifs> as <Node ---:*.ifs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.target> as <Node ---:*.target>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_generators.^^^argument^^^.iter> as <Node ---:*.iter>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_generators> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit> as <Node ???:*.visit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args> as <Node ---:*.args>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Call> as <Node ---:*.Call>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Attribute> as <Node ---:*.Attribute>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:ast.Name> as <Node ---:*.Name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.args.ctx> as <Node ---:*.ctx>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node ---:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node method:pyan.anutils.UnresolvedSuperCallError.__init__> as <Node ---:*.__init__>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.^^^argument^^^.func> as <Node ---:*.func>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_builtins> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Call> as <Node ---:*.Call>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.node.Flavor.CLASS> as <Node ???:*.CLASS>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.attr> as <Node ---:*.attr>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.ctx> as <Node ---:*.ctx>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Num> as <Node ---:*.Num>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Str> as <Node ---:*.Str>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node ---:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.resolve_attribute> to <Node attribute:ast.Attribute> as <Node ---:*.Attribute>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.anutils.Scope.name> as <Node ???:*.name>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.analyze_scopes.process> to <Node attribute:pyan.analyzer.CallGraphVisitor.analyze_scopes.process.^^^argument^^^.get_children> as <Node ---:*.get_children>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:symtable.symtable> as <Node ---:*.symtable>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node ---:pyan.analyzer.CallGraphVisitor.analyze_scopes.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.analyze_scopes> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_current_class> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_stack> as <Node ???:*.class_stack>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.node.Flavor.NAMESPACE> as <Node ???:*.NAMESPACE>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:pyan.analyzer.CallGraphVisitor.name_stack> as <Node ???:*.name_stack>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace> to <Node attribute:Str.join> as <Node ???:*.join>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node ---:pyan.analyzer.CallGraphVisitor.get_value.find_scope.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> as <Node ???:*.scope_stack>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> as <Node ???:*.scope_stack>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node ---:pyan.analyzer.CallGraphVisitor.get_value.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node ---:pyan.analyzer.CallGraphVisitor.set_value.find_scope.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.scope_stack> as <Node ???:*.scope_stack>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.set_value.find_scope> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node ---:pyan.analyzer.CallGraphVisitor.set_value.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.debug> as <Node ---:*.debug>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_value.find_scope.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_value> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Load> as <Node ---:*.Load>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^.ctx> as <Node ---:*.ctx>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.anutils.tail.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:ast.Attribute> as <Node ---:*.Attribute>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> as <Node ???:*.ATTRIBUTE>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^.defs> as <Node ???:*.defs>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node function:pyan.analyzer.CallGraphVisitor.get_attribute.lookup> to <Node ---:pyan.analyzer.CallGraphVisitor.get_attribute.lookup.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Store> as <Node ---:*.Store>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:ast.Attribute> as <Node ---:*.Attribute>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node ---:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name.defs> as <Node ???:*.defs>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.set_attribute> to <Node attribute:pyan.analyzer.CallGraphVisitor.set_attribute.^^^argument^^^.ctx> as <Node ---:*.ctx>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.module_to_filename> as <Node ???:*.module_to_filename>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.node.Flavor.UNSPECIFIED> as <Node ???:*.UNSPECIFIED>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.process_one.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_node> to <Node ---:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.get_parent_node> to <Node attribute:pyan.anutils.get_module_name.rsplit> as <Node ???:*.rsplit>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.associate_node> to <Node ---:pyan.analyzer.CallGraphVisitor.associate_node.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node ---:pyan.analyzer.CallGraphVisitor.add_defines_edge.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node import:operator.add> as <Node ???:*.add>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> as <Node ???:*.defines_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_defines_edge> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> as <Node ???:*.defines_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node import:operator.add> as <Node ???:*.add>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node ---:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.add_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^.remove> as <Node ---:*.remove>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_uses_edge> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_uses_edge.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find> as <Node ???:*.find>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.remove_wild> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node ---:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> as <Node ???:*.defined>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> as <Node ???:*.defined>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.defined> as <Node ???:*.defined>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.ast_node> as <Node ???:*.ast_node>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes.defined> as <Node ???:*.defined>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.anutils.Scope.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.contract_nonexistents> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> as <Node ???:*.defines_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges> as <Node ???:*.defines_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.anutils.Scope.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.expand_unknowns> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.anutils.Scope.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.cull_inherited> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.analyzer.CallGraphVisitor.collapse_inner> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node module:pyan.anutils> to <Node module:os.path> as <Node ---:*.os.path>
Contracting non-existent from <Node module:pyan.anutils> to <Node module:node> as <Node ---:*.node>
Contracting non-existent from <Node module:pyan.anutils> to <Node module:ast> as <Node ---:*.ast>
Contracting non-existent from <Node function:pyan.anutils.head> to <Node ---:pyan.anutils.head.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.tail> to <Node ---:pyan.anutils.tail.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.get_module_name> to <Node ---:pyan.anutils.get_module_name.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.get_module_name> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace> as <Node ???:*.replace>
Contracting non-existent from <Node function:pyan.anutils.get_module_name> to <Node attribute:Str.join> as <Node ???:*.join>
Contracting non-existent from <Node function:pyan.anutils.format_alias> to <Node attribute:ast.alias> as <Node ---:*.alias>
Contracting non-existent from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node function:pyan.anutils.format_alias> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.asname> as <Node ---:*.asname>
Contracting non-existent from <Node function:pyan.anutils.format_alias> to <Node ---:pyan.anutils.format_alias.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Attribute> as <Node ---:*.Attribute>
Contracting non-existent from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:ast.Name> as <Node ---:*.Name>
Contracting non-existent from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.attr> as <Node ---:*.attr>
Contracting non-existent from <Node function:pyan.anutils.get_ast_node_name> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node function:pyan.anutils.get_ast_node_name> to <Node ---:pyan.anutils.get_ast_node_name.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:pyan.anutils.sanitize_exprs.process.^^^argument^^^.elts> as <Node ---:*.elts>
Contracting non-existent from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.Tuple> as <Node ---:*.Tuple>
Contracting non-existent from <Node function:pyan.anutils.sanitize_exprs.process> to <Node ---:pyan.anutils.sanitize_exprs.process.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.sanitize_exprs.process> to <Node attribute:ast.List> as <Node ---:*.List>
Contracting non-existent from <Node function:pyan.anutils.sanitize_exprs> to <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to <Node ---:pyan.anutils.sanitize_exprs.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> as <Node ---:*.debug>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node module:operator> as <Node ---:*.operator>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.error> as <Node ---:*.error>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order> to <Node module:functools> as <Node ---:*.functools>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node import:operator.add> as <Node ???:*.add>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_find_good_head.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node method:pyan.anutils.resolve_method_resolution_order.LinearizationImpossible.__init__> as <Node ---:*.__init__>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_find_good_head> to <Node import:functools.reduce> as <Node ---:*.reduce>
Contracting non-existent from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.remove_all_in.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> as <Node ---:*.debug>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_merge.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.^^^argument^^^.debug> as <Node ---:*.debug>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node import:operator.add> as <Node ???:*.add>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ---:pyan.anutils.resolve_method_resolution_order.C3_linearize.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.C3_linearize> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node import:operator.add> as <Node ???:*.add>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.extend> as <Node ---:*.extend>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node ---:pyan.anutils.resolve_method_resolution_order.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive> to <Node ---:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type> as <Node ---:*.get_type>
Contracting non-existent from <Node method:pyan.anutils.Scope.__init__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_identifiers> as <Node ---:*.get_identifiers>
Contracting non-existent from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_type> as <Node ---:*.get_type>
Contracting non-existent from <Node method:pyan.anutils.Scope.__repr__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__init__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.scopes> as <Node ???:*.scopes>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.Scope.__init__.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_With.add_uses_enter_exit_of.^^^argument^^^.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.tail.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__enter__> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace> as <Node ---:*.get_node_of_current_namespace>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node_of_current_namespace.get_name> as <Node ???:*.get_name>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.get_node> as <Node ---:*.get_node>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.node.Flavor.NAMESPACE> as <Node ???:*.NAMESPACE>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^.add_defines_edge> as <Node ---:*.add_defines_edge>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node ---:pyan.anutils.ExecuteInInnerScope.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.anutils.ExecuteInInnerScope.__exit__> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node module:pyan> to <Node module:main> as <Node ---:*.main>
Contracting non-existent from <Node module:pyan.main> to <Node module:visgraph> as <Node ---:*.visgraph>
Contracting non-existent from <Node module:pyan.main> to <Node module:writers> as <Node ---:*.writers>
Contracting non-existent from <Node module:pyan.main> to <Node module:logging> as <Node ---:*.logging>
Contracting non-existent from <Node module:pyan.main> to <Node module:optparse> as <Node ---:*.optparse>
Contracting non-existent from <Node module:pyan.main> to <Node module:glob> as <Node ---:*.glob>
Contracting non-existent from <Node module:pyan.main> to <Node module:analyzer> as <Node ---:*.analyzer>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.setLevel> as <Node ---:*.setLevel>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.verbose> as <Node ---:*.verbose>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.logname> as <Node ---:*.logname>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.dot> as <Node ---:*.dot>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.INFO> as <Node ---:*.INFO>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.FileHandler> as <Node ---:*.FileHandler>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.WARN> as <Node ---:*.WARN>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.tgf> as <Node ---:*.tgf>
Contracting non-existent from <Node function:pyan.main.main> to <Node import:optparse.OptionParser> as <Node ---:*.OptionParser>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:pyan.writers.DotWriter.run> as <Node ---:*.run>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.yed> as <Node ---:*.yed>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.filename> as <Node ???:*.filename>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:pyan.writers.TgfWriter.run> as <Node ---:*.run>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.rankdir> as <Node ---:*.rankdir>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:pyan.writers.YedWriter.run> as <Node ---:*.run>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.add_option> as <Node ---:*.add_option>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.getLogger> as <Node ---:*.getLogger>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.nested_groups> as <Node ---:*.nested_groups>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.very_verbose> as <Node ---:*.very_verbose>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args> as <Node ---:*.parse_args>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.error> as <Node ---:*.error>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.getLogger.addHandler> as <Node ---:*.addHandler>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_defines> as <Node ---:*.draw_defines>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.StreamHandler> as <Node ---:*.StreamHandler>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.draw_uses> as <Node ---:*.draw_uses>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.colored> as <Node ---:*.colored>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped_alt> as <Node ---:*.grouped_alt>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.grouped> as <Node ---:*.grouped>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:optparse.OptionParser.parse_args.annotated> as <Node ---:*.annotated>
Contracting non-existent from <Node function:pyan.main.main> to <Node attribute:logging.DEBUG> as <Node ---:*.DEBUG>
Contracting non-existent from <Node namespace:pyan.main.main.listcomp> to <Node import:glob.glob> as <Node ---:*.glob>
Contracting non-existent from <Node namespace:pyan.main.main.listcomp> to <Node attribute:optparse.OptionParser.parse_args> as <Node ---:*.parse_args>
Contracting non-existent from <Node module:pyan.node> to <Node module:enum> as <Node ---:*.enum>
Contracting non-existent from <Node function:pyan.node.make_safe_label> to <Node ---:pyan.node.make_safe_label.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:pyan.node.make_safe_label> to <Node attribute:pyan.node.make_safe_label.^^^argument^^^.replace> as <Node ???:*.replace>
Contracting non-existent from <Node class:pyan.node.Flavor> to <Node import:enum.Enum> as <Node ---:*.Enum>
Contracting non-existent from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.IMPORTEDITEM> as <Node ???:*.IMPORTEDITEM>
Contracting non-existent from <Node staticmethod:pyan.node.Flavor.specificity> to <Node ---:pyan.node.Flavor.specificity.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.NAMESPACE> as <Node ???:*.NAMESPACE>
Contracting non-existent from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.ATTRIBUTE> as <Node ???:*.ATTRIBUTE>
Contracting non-existent from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNSPECIFIED> as <Node ???:*.UNSPECIFIED>
Contracting non-existent from <Node staticmethod:pyan.node.Flavor.specificity> to <Node attribute:pyan.node.Flavor.UNKNOWN> as <Node ???:*.UNKNOWN>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Call.^^^argument^^^.keywords.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.node.Flavor.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Assign.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Attribute.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_AugAssign.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.anutils.get_ast_node_name.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Flavor.__repr__> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_DictComp.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:pyan.node.Node.__init__> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_short_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> as <Node ---:*.lineno>
Contracting non-existent from <Node method:pyan.node.Node.get_long_annotated_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_long_annotated_name> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.lineno> as <Node ---:*.lineno>
Contracting non-existent from <Node method:pyan.node.Node.get_name> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_level> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.count> as <Node ---:*.count>
Contracting non-existent from <Node method:pyan.node.Node.get_level> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.get_toplevel_namespace> to <Node attribute:pyan.node.Node.__init__.^^^argument^^^.find> as <Node ???:*.find>
Contracting non-existent from <Node method:pyan.node.Node.get_namespace_label> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.node.Node.__repr__> to <Node ---:pyan.node.Node.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node module:pyan.visgraph> to <Node module:logging> as <Node ---:*.logging>
Contracting non-existent from <Node module:pyan.visgraph> to <Node module:re> as <Node ---:*.re>
Contracting non-existent from <Node module:pyan.visgraph> to <Node module:colorsys> as <Node ---:*.colorsys>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.__init__> to <Node attribute:logging.getLogger> as <Node ---:*.getLogger>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.__init__> to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:pyan.visgraph.Colorizer._idx> as <Node ???:*._idx>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer._next_idx> to <Node attribute:logging.getLogger.warn> as <Node ---:*.warn>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._idx_of> as <Node ???:*._idx_of>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.get_short_name> as <Node ???:*.get_short_name>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer._node_to_idx> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename> as <Node ???:*.filename>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.get> to <Node ---:pyan.visgraph.Colorizer.get.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:colorsys.hls_to_rgb> as <Node ---:*.hls_to_rgb>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node attribute:pyan.visgraph.Colorizer.make_colors.^^^argument^^^.get_level> as <Node ---:*.get_level>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node ---:pyan.visgraph.Colorizer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.Colorizer.make_colors> to <Node ---:pyan.visgraph.Colorizer.make_colors.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb> to <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to <Node ---:pyan.visgraph.Colorizer.htmlize_rgb.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.VisualNode.__init__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node attribute:Str.join> as <Node ???:*.join>
Contracting non-existent from <Node method:pyan.visgraph.VisualNode.__repr__> to <Node ---:pyan.visgraph.VisualNode.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.VisualEdge.__init__> to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node ---:pyan.visgraph.VisualEdge.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.visgraph.VisualEdge.__repr__> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.visgraph.VisualGraph.__init__> to <Node ---:pyan.visgraph.VisualGraph.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.__init__.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges.defined> as <Node ???:*.defined>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges> as <Node ???:*.uses_edges>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.anutils.resolve_method_resolution_order.lookup_bases_recursive.^^^argument^^^.append> as <Node ???:*.append>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.defined> as <Node ???:*.defined>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match> as <Node ---:*.match>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.TgfWriter.write_node.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:re.match.end> as <Node ---:*.end>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node ---:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.get> as <Node ---:*.get>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualEdge.__init__.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger> as <Node ---:*.getLogger>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.nodes.defined> as <Node ???:*.defined>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.anutils.Scope.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.defines_edges> as <Node ???:*.defines_edges>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.remove_wild.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_FunctionDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.class_base_ast_nodes.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_parent_node.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.defines_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.uses_edges.name.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.get_short_name> as <Node ???:*.get_short_name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.resolve_builtins.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.anutils.format_alias.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.get_attribute.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.anutils.Scope.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.namespace> as <Node ???:*.namespace>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_short_name> as <Node ???:*.get_short_name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_long_annotated_name> as <Node ???:*.get_long_annotated_name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.add_uses_edge.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.visgraph.VisualGraph.from_visitor.^^^argument^^^.uses_edges.get_annotated_name> as <Node ???:*.get_annotated_name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_Import.^^^argument^^^.names.name> as <Node ???:*.name>
Contracting non-existent from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node attribute:pyan.analyzer.CallGraphVisitor.visit_ClassDef.^^^argument^^^.name> as <Node ???:*.name>
Contracting non-existent from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node import:operator.add> as <Node ???:*.add>
Contracting non-existent from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node attribute:optparse.OptionParser.parse_args.filename> as <Node ???:*.filename>
Contracting non-existent from <Node function:pyan.visgraph.VisualGraph.from_visitor.find_filenames> to <Node attribute:pyan.visgraph.Colorizer._node_to_idx.^^^argument^^^.filename> as <Node ???:*.filename>
Contracting non-existent from <Node module:pyan.writers> to <Node module:logging> as <Node ---:*.logging>
Contracting non-existent from <Node module:pyan.writers> to <Node module:sys> as <Node ---:*.sys>
Contracting non-existent from <Node method:pyan.writers.Writer.__init__> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.__init__> to <Node attribute:logging.getLogger> as <Node ---:*.getLogger>
Contracting non-existent from <Node method:pyan.writers.Writer.log> to <Node ---:pyan.writers.Writer.log.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.log> to <Node attribute:logging.getLogger.info> as <Node ???:*.info>
Contracting non-existent from <Node method:pyan.writers.Writer.indent> to <Node ---:pyan.writers.Writer.indent.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.dedent> to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.write.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.write> to <Node ---:pyan.writers.Writer.dedent.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.write> to <Node attribute:sys.stdout.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.Writer.run> to <Node ---:pyan.writers.Writer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout.close> as <Node ---:*.close>
Contracting non-existent from <Node method:pyan.writers.Writer.run> to <Node attribute:sys.stdout> as <Node ---:*.stdout>
Contracting non-existent from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.nodes> as <Node ???:*.nodes>
Contracting non-existent from <Node method:pyan.writers.Writer.write_subgraph> to <Node attribute:pyan.writers.Writer.write_subgraph.^^^argument^^^.subgraphs> as <Node ---:*.subgraphs>
Contracting non-existent from <Node method:pyan.writers.Writer.write_subgraph> to <Node ---:pyan.writers.Writer.write_subgraph.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.Writer.write_edges> to <Node attribute:pyan.writers.Writer.__init__.^^^argument^^^.edges> as <Node ---:*.edges>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.__init__> to <Node ---:pyan.writers.TgfWriter.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write_node.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.id_map> as <Node ???:*.id_map>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_node> to <Node ---:pyan.writers.TgfWriter.write_node.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_node> to <Node attribute:pyan.writers.TgfWriter.i> as <Node ???:*.i>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.start_edges> to <Node attribute:pyan.writers.TgfWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.source> as <Node ---:*.source>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.id_map> as <Node ???:*.id_map>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.target> as <Node ---:*.target>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.TgfWriter.write_edge> to <Node attribute:pyan.writers.TgfWriter.write_edge.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:pyan.writers.DotWriter.__init__.^^^argument^^^.grouped> as <Node ---:*.grouped>
Contracting non-existent from <Node method:pyan.writers.DotWriter.__init__> to <Node ---:pyan.writers.DotWriter.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.DotWriter.__init__> to <Node attribute:Str.join> as <Node ???:*.join>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.indent> as <Node ---:*.indent>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:pyan.writers.DotWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_graph> to <Node attribute:Str.join> as <Node ???:*.join>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.indent> as <Node ---:*.indent>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.log> as <Node ---:*.log>
Contracting non-existent from <Node method:pyan.writers.DotWriter.start_subgraph> to <Node attribute:pyan.writers.DotWriter.start_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.dedent> as <Node ---:*.dedent>
Contracting non-existent from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.finish_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.log> as <Node ---:*.log>
Contracting non-existent from <Node method:pyan.writers.DotWriter.finish_subgraph> to <Node attribute:pyan.writers.DotWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.fill_color> as <Node ---:*.fill_color>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.text_color> as <Node ---:*.text_color>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.group> as <Node ---:*.group>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.log> as <Node ---:*.log>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write_node.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_node> to <Node attribute:pyan.writers.DotWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source> as <Node ---:*.source>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.source.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.target> as <Node ---:*.target>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.DotWriter.write_edge> to <Node attribute:pyan.writers.DotWriter.write_edge.^^^argument^^^.color> as <Node ---:*.color>
Contracting non-existent from <Node method:pyan.writers.DotWriter.finish_graph> to <Node attribute:pyan.writers.DotWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.YedWriter.__init__> to <Node ---:pyan.writers.YedWriter.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:pyan.writers.YedWriter.__init__> to <Node attribute:pyan.writers.YedWriter.__init__.^^^argument^^^.grouped> as <Node ---:*.grouped>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.indent> as <Node ---:*.indent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_graph> to <Node attribute:pyan.writers.YedWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> as <Node ---:*.dedent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.log> as <Node ---:*.log>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.start_subgraph.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.YedWriter.start_subgraph> to <Node attribute:pyan.writers.YedWriter.indent> as <Node ---:*.indent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.finish_subgraph.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.dedent> as <Node ---:*.dedent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.log> as <Node ---:*.log>
Contracting non-existent from <Node method:pyan.writers.YedWriter.finish_subgraph> to <Node attribute:pyan.writers.YedWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.dedent> as <Node ---:*.dedent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.log> as <Node ---:*.log>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.label> as <Node ???:*.label>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.write_node.^^^argument^^^.fill_color> as <Node ---:*.fill_color>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_node> to <Node attribute:pyan.writers.YedWriter.indent> as <Node ---:*.indent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.color> as <Node ---:*.color>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target> as <Node ---:*.target>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.dedent> as <Node ---:*.dedent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.flavor> as <Node ???:*.flavor>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write> as <Node ???:*.write>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.edge_id> as <Node ???:*.edge_id>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source> as <Node ---:*.source>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.source.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.write_edge.^^^argument^^^.target.id> as <Node ???:*.id>
Contracting non-existent from <Node method:pyan.writers.YedWriter.write_edge> to <Node attribute:pyan.writers.YedWriter.indent> as <Node ---:*.indent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.dedent> as <Node ---:*.dedent>
Contracting non-existent from <Node method:pyan.writers.YedWriter.finish_graph> to <Node attribute:pyan.writers.YedWriter.write> as <Node ???:*.write>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Import>, uses <Node function:pyan.anutils.format_alias>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Import>, uses <Node ---:*.names>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Import.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Import>, uses <Node ???:*.x>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom>, uses <Node ---:*.names>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom>, uses <Node function:pyan.anutils.format_alias>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_ImportFrom.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_ImportFrom>, uses <Node ???:*.x>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>, uses <Node function:pyan.anutils.sanitize_exprs>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>, uses <Node function:pyan.anutils.get_ast_node_name>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_Assign.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_Assign>, uses <Node ???:*.x>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign>, uses <Node function:pyan.anutils.sanitize_exprs>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign>, uses <Node function:pyan.anutils.get_ast_node_name>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.visit_AugAssign.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.visit_AugAssign>, uses <Node ???:*.x>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>, uses <Node ???:*.uses_edges>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>, uses <Node ???:*.n>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>, uses <Node ???:*.namespace>
Collapsing inner from <Node namespace:pyan.analyzer.CallGraphVisitor.remove_wild.listcomp> to <Node method:pyan.analyzer.CallGraphVisitor.remove_wild>, uses <Node ???:*.name>
Collapsing inner from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to <Node function:pyan.anutils.sanitize_exprs>, uses <Node function:pyan.anutils.sanitize_exprs.process>
Collapsing inner from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to <Node function:pyan.anutils.sanitize_exprs>, uses <Node ???:*.expr>
Collapsing inner from <Node namespace:pyan.anutils.sanitize_exprs.listcomp> to <Node function:pyan.anutils.sanitize_exprs>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>, uses <Node ???:*.x>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>, uses <Node ???:*.lst>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.remove_all_in.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.remove_all_in>, uses <Node function:pyan.anutils.resolve_method_resolution_order.remove_all>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>, uses <Node function:pyan.anutils.tail>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>, uses <Node function:pyan.anutils.head>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.anutils.resolve_method_resolution_order.C3_merge.listcomp> to <Node function:pyan.anutils.resolve_method_resolution_order.C3_merge>, uses <Node ???:*.lst>
Collapsing inner from <Node namespace:pyan.main.main.listcomp> to <Node function:pyan.main.main>, uses <Node ---:*.glob>
Collapsing inner from <Node namespace:pyan.main.main.listcomp> to <Node function:pyan.main.main>, uses <Node ???:*.fn2>
Collapsing inner from <Node namespace:pyan.main.main.listcomp> to <Node function:pyan.main.main>, uses <Node ---:*.parse_args>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to <Node method:pyan.visgraph.Colorizer.__init__>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to <Node method:pyan.visgraph.Colorizer.__init__>, uses <Node ???:*.j>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.__init__.listcomp> to <Node method:pyan.visgraph.Colorizer.__init__>, uses <Node ???:*.range>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>, uses <Node ???:*.int>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>, uses <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp>
Collapsing inner from <Node namespace:pyan.visgraph.Colorizer.htmlize_rgb.listcomp> to <Node staticmethod:pyan.visgraph.Colorizer.htmlize_rgb>, uses <Node ???:*.x>
Collapsing inner from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node method:pyan.visgraph.VisualNode.__repr__>, uses <Node ???:*.repr>
Collapsing inner from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node method:pyan.visgraph.VisualNode.__repr__>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:pyan.visgraph.VisualNode.__repr__.listcomp> to <Node method:pyan.visgraph.VisualNode.__repr__>, uses <Node ???:*.s>
Collapsing inner from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to <Node method:pyan.anutils.Scope.__init__>, uses <Node ???:*.iden>
Collapsing inner from <Node namespace:pyan.anutils.Scope.__init__.dictcomp> to <Node method:pyan.anutils.Scope.__init__>, uses <Node ---:*.get_identifiers>
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node ???:*.get_short_name>
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node ???:*.get_annotated_name>
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node ???:*.get_long_annotated_name>
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node ???:*.namespace>
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node ???:*.name>
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node method:pyan.node.Node.get_short_name>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_short_name> resolves <Node ???:*.get_short_name>; removing wildcard
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node method:pyan.node.Node.get_annotated_name>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_annotated_name> resolves <Node ???:*.get_annotated_name>; removing wildcard
Collapsing inner from <Node namespace:pyan.visgraph.VisualGraph.from_visitor.lambda> to <Node classmethod:pyan.visgraph.VisualGraph.from_visitor>, uses <Node method:pyan.node.Node.get_long_annotated_name>
Use from <Node classmethod:pyan.visgraph.VisualGraph.from_visitor> to <Node method:pyan.node.Node.get_long_annotated_name> resolves <Node ???:*.get_long_annotated_name>; removing wildcard
Looking at pyan.analyzer
Coloring pyan.analyzer from file 'pyan/analyzer.py'
Looking at pyan.anutils
Coloring pyan.anutils from file 'pyan/anutils.py'
Looking at pyan.main
Coloring pyan.main from file 'pyan/main.py'
Looking at pyan.node
Coloring pyan.node from file 'pyan/node.py'
Looking at pyan.visgraph
Coloring pyan.visgraph from file 'pyan/visgraph.py'
Looking at pyan.writers
Coloring pyan.writers from file 'pyan/writers.py'
Looking at CallGraphVisitor
Coloring CallGraphVisitor from file 'pyan/analyzer.py'
Looking at __init__
Coloring __init__ from file 'pyan/analyzer.py'
Looking at add_defines_edge
Coloring add_defines_edge from file 'pyan/analyzer.py'
Looking at add_uses_edge
Coloring add_uses_edge from file 'pyan/analyzer.py'
Looking at analyze_binding
Coloring analyze_binding from file 'pyan/analyzer.py'
Looking at analyze_functiondef
Coloring analyze_functiondef from file 'pyan/analyzer.py'
Looking at analyze_generators
Coloring analyze_generators from file 'pyan/analyzer.py'
Looking at analyze_scopes
Coloring analyze_scopes from file 'pyan/analyzer.py'
Looking at associate_node
Coloring associate_node from file 'pyan/analyzer.py'
Looking at collapse_inner
Coloring collapse_inner from file 'pyan/analyzer.py'
Looking at contract_nonexistents
Coloring contract_nonexistents from file 'pyan/analyzer.py'
Looking at cull_inherited
Coloring cull_inherited from file 'pyan/analyzer.py'
Looking at expand_unknowns
Coloring expand_unknowns from file 'pyan/analyzer.py'
Looking at get_attribute
Coloring get_attribute from file 'pyan/analyzer.py'
Looking at get_current_class
Coloring get_current_class from file 'pyan/analyzer.py'
Looking at get_node
Coloring get_node from file 'pyan/analyzer.py'
Looking at get_node_of_current_namespace
Coloring get_node_of_current_namespace from file 'pyan/analyzer.py'
Looking at get_parent_node
Coloring get_parent_node from file 'pyan/analyzer.py'
Looking at get_value
Coloring get_value from file 'pyan/analyzer.py'
Looking at postprocess
Coloring postprocess from file 'pyan/analyzer.py'
Looking at process
Coloring process from file 'pyan/analyzer.py'
Looking at process_one
Coloring process_one from file 'pyan/analyzer.py'
Looking at remove_uses_edge
Coloring remove_uses_edge from file 'pyan/analyzer.py'
Looking at remove_wild
Coloring remove_wild from file 'pyan/analyzer.py'
Looking at resolve_attribute
Coloring resolve_attribute from file 'pyan/analyzer.py'
Looking at resolve_base_classes
Coloring resolve_base_classes from file 'pyan/analyzer.py'
Looking at resolve_builtins
Coloring resolve_builtins from file 'pyan/analyzer.py'
Looking at set_attribute
Coloring set_attribute from file 'pyan/analyzer.py'
Looking at set_value
Coloring set_value from file 'pyan/analyzer.py'
Looking at visit_AnnAssign
Coloring visit_AnnAssign from file 'pyan/analyzer.py'
Looking at visit_Assign
Coloring visit_Assign from file 'pyan/analyzer.py'
Looking at visit_AsyncFor
Coloring visit_AsyncFor from file 'pyan/analyzer.py'
Looking at visit_AsyncFunctionDef
Coloring visit_AsyncFunctionDef from file 'pyan/analyzer.py'
Looking at visit_Attribute
Coloring visit_Attribute from file 'pyan/analyzer.py'
Looking at visit_AugAssign
Coloring visit_AugAssign from file 'pyan/analyzer.py'
Looking at visit_Call
Coloring visit_Call from file 'pyan/analyzer.py'
Looking at visit_ClassDef
Coloring visit_ClassDef from file 'pyan/analyzer.py'
Looking at visit_DictComp
Coloring visit_DictComp from file 'pyan/analyzer.py'
Looking at visit_For
Coloring visit_For from file 'pyan/analyzer.py'
Looking at visit_FunctionDef
Coloring visit_FunctionDef from file 'pyan/analyzer.py'
Looking at visit_GeneratorExp
Coloring visit_GeneratorExp from file 'pyan/analyzer.py'
Looking at visit_Import
Coloring visit_Import from file 'pyan/analyzer.py'
Looking at visit_ImportFrom
Coloring visit_ImportFrom from file 'pyan/analyzer.py'
Looking at visit_Lambda
Coloring visit_Lambda from file 'pyan/analyzer.py'
Looking at visit_ListComp
Coloring visit_ListComp from file 'pyan/analyzer.py'
Looking at visit_Module
Coloring visit_Module from file 'pyan/analyzer.py'
Looking at visit_Name
Coloring visit_Name from file 'pyan/analyzer.py'
Looking at visit_SetComp
Coloring visit_SetComp from file 'pyan/analyzer.py'
Looking at visit_With
Coloring visit_With from file 'pyan/analyzer.py'
Looking at process
Coloring process from file 'pyan/analyzer.py'
Looking at lookup
Coloring lookup from file 'pyan/analyzer.py'
Looking at find_scope
Coloring find_scope from file 'pyan/analyzer.py'
Looking at find_scope
Coloring find_scope from file 'pyan/analyzer.py'
Looking at add_uses_enter_exit_of
Coloring add_uses_enter_exit_of from file 'pyan/analyzer.py'
Looking at ExecuteInInnerScope
Coloring ExecuteInInnerScope from file 'pyan/anutils.py'
Looking at Scope
Coloring Scope from file 'pyan/anutils.py'
Looking at UnresolvedSuperCallError
Coloring UnresolvedSuperCallError from file 'pyan/anutils.py'
Looking at format_alias
Coloring format_alias from file 'pyan/anutils.py'
Looking at get_ast_node_name
Coloring get_ast_node_name from file 'pyan/anutils.py'
Looking at get_module_name
Coloring get_module_name from file 'pyan/anutils.py'
Looking at head
Coloring head from file 'pyan/anutils.py'
Looking at resolve_method_resolution_order
Coloring resolve_method_resolution_order from file 'pyan/anutils.py'
Looking at sanitize_exprs
Coloring sanitize_exprs from file 'pyan/anutils.py'
Looking at tail
Coloring tail from file 'pyan/anutils.py'
Looking at __enter__
Coloring __enter__ from file 'pyan/anutils.py'
Looking at __exit__
Coloring __exit__ from file 'pyan/anutils.py'
Looking at __init__
Coloring __init__ from file 'pyan/anutils.py'
Looking at __init__
Coloring __init__ from file 'pyan/anutils.py'
Looking at __repr__
Coloring __repr__ from file 'pyan/anutils.py'
Looking at C3_find_good_head
Coloring C3_find_good_head from file 'pyan/anutils.py'
Looking at C3_linearize
Coloring C3_linearize from file 'pyan/anutils.py'
Looking at C3_merge
Coloring C3_merge from file 'pyan/anutils.py'
Looking at LinearizationImpossible
Coloring LinearizationImpossible from file 'pyan/anutils.py'
Looking at lookup_bases_recursive
Coloring lookup_bases_recursive from file 'pyan/anutils.py'
Looking at remove_all
Coloring remove_all from file 'pyan/anutils.py'
Looking at remove_all_in
Coloring remove_all_in from file 'pyan/anutils.py'
Looking at process
Coloring process from file 'pyan/anutils.py'
Looking at main
Coloring main from file 'pyan/main.py'
Looking at Flavor
Coloring Flavor from file 'pyan/node.py'
Looking at Node
Coloring Node from file 'pyan/node.py'
Looking at make_safe_label
Coloring make_safe_label from file 'pyan/node.py'
Looking at __repr__
Coloring __repr__ from file 'pyan/node.py'
Looking at specificity
Coloring specificity from file 'pyan/node.py'
Looking at __init__
Coloring __init__ from file 'pyan/node.py'
Looking at __repr__
Coloring __repr__ from file 'pyan/node.py'
Looking at get_annotated_name
Coloring get_annotated_name from file 'pyan/node.py'
Looking at get_label
Coloring get_label from file 'pyan/node.py'
Looking at get_level
Coloring get_level from file 'pyan/node.py'
Looking at get_long_annotated_name
Coloring get_long_annotated_name from file 'pyan/node.py'
Looking at get_name
Coloring get_name from file 'pyan/node.py'
Looking at get_namespace_label
Coloring get_namespace_label from file 'pyan/node.py'
Looking at get_short_name
Coloring get_short_name from file 'pyan/node.py'
Looking at get_toplevel_namespace
Coloring get_toplevel_namespace from file 'pyan/node.py'
Looking at Colorizer
Coloring Colorizer from file 'pyan/visgraph.py'
Looking at VisualEdge
Coloring VisualEdge from file 'pyan/visgraph.py'
Looking at VisualGraph
Coloring VisualGraph from file 'pyan/visgraph.py'
Looking at VisualNode
Coloring VisualNode from file 'pyan/visgraph.py'
Looking at __init__
Coloring __init__ from file 'pyan/visgraph.py'
Looking at _next_idx
Coloring _next_idx from file 'pyan/visgraph.py'
Looking at _node_to_idx
Coloring _node_to_idx from file 'pyan/visgraph.py'
Looking at get
Coloring get from file 'pyan/visgraph.py'
Looking at htmlize_rgb
Coloring htmlize_rgb from file 'pyan/visgraph.py'
Looking at make_colors
Coloring make_colors from file 'pyan/visgraph.py'
Looking at __init__
Coloring __init__ from file 'pyan/visgraph.py'
Looking at __repr__
Coloring __repr__ from file 'pyan/visgraph.py'
Looking at __init__
Coloring __init__ from file 'pyan/visgraph.py'
Looking at from_visitor
Coloring from_visitor from file 'pyan/visgraph.py'
Looking at find_filenames
Coloring find_filenames from file 'pyan/visgraph.py'
Looking at __init__
Coloring __init__ from file 'pyan/visgraph.py'
Looking at __repr__
Coloring __repr__ from file 'pyan/visgraph.py'
Looking at DotWriter
Coloring DotWriter from file 'pyan/writers.py'
Looking at TgfWriter
Coloring TgfWriter from file 'pyan/writers.py'
Looking at Writer
Coloring Writer from file 'pyan/writers.py'
Looking at YedWriter
Coloring YedWriter from file 'pyan/writers.py'
Looking at __init__
Coloring __init__ from file 'pyan/writers.py'
Looking at finish_graph
Coloring finish_graph from file 'pyan/writers.py'
Looking at finish_subgraph
Coloring finish_subgraph from file 'pyan/writers.py'
Looking at start_graph
Coloring start_graph from file 'pyan/writers.py'
Looking at start_subgraph
Coloring start_subgraph from file 'pyan/writers.py'
Looking at write_edge
Coloring write_edge from file 'pyan/writers.py'
Looking at write_node
Coloring write_node from file 'pyan/writers.py'
Looking at __init__
Coloring __init__ from file 'pyan/writers.py'
Looking at start_edges
Coloring start_edges from file 'pyan/writers.py'
Looking at write_edge
Coloring write_edge from file 'pyan/writers.py'
Looking at write_node
Coloring write_node from file 'pyan/writers.py'
Looking at __init__
Coloring __init__ from file 'pyan/writers.py'
Looking at dedent
Coloring dedent from file 'pyan/writers.py'
Looking at finish_edges
Coloring finish_edges from file 'pyan/writers.py'
Looking at finish_graph
Coloring finish_graph from file 'pyan/writers.py'
Looking at finish_subgraph
Coloring finish_subgraph from file 'pyan/writers.py'
Looking at indent
Coloring indent from file 'pyan/writers.py'
Looking at log
Coloring log from file 'pyan/writers.py'
Looking at run
Coloring run from file 'pyan/writers.py'
Looking at start_edges
Coloring start_edges from file 'pyan/writers.py'
Looking at start_graph
Coloring start_graph from file 'pyan/writers.py'
Looking at start_subgraph
Coloring start_subgraph from file 'pyan/writers.py'
Looking at write
Coloring write from file 'pyan/writers.py'
Looking at write_edge
Coloring write_edge from file 'pyan/writers.py'
Looking at write_edges
Coloring write_edges from file 'pyan/writers.py'
Looking at write_node
Coloring write_node from file 'pyan/writers.py'
Looking at write_subgraph
Coloring write_subgraph from file 'pyan/writers.py'
Looking at __init__
Coloring __init__ from file 'pyan/writers.py'
Looking at finish_graph
Coloring finish_graph from file 'pyan/writers.py'
Looking at finish_subgraph
Coloring finish_subgraph from file 'pyan/writers.py'
Looking at start_graph
Coloring start_graph from file 'pyan/writers.py'
Looking at start_subgraph
Coloring start_subgraph from file 'pyan/writers.py'
Looking at write_edge
Coloring write_edge from file 'pyan/writers.py'
Looking at write_node
Coloring write_node from file 'pyan/writers.py'
<class 'pyan.writers.DotWriter'> running
Start subgraph 
Write node pyan.analyzer
Write node pyan.anutils
Write node pyan.main
Write node pyan.node
Write node pyan.visgraph
Write node pyan.writers
Write node CallGraphVisitor\n\n(pyan/analyzer.py:35,\nclass in pyan.analyzer)
Write node __init__\n\n(pyan/analyzer.py:44,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node add_defines_edge\n\n(pyan/analyzer.py:1247,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node add_uses_edge\n\n(pyan/analyzer.py:1260,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node analyze_binding\n\n(pyan/analyzer.py:744,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node analyze_functiondef\n\n(pyan/analyzer.py:692,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node analyze_generators\n\n(pyan/analyzer.py:796,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node analyze_scopes\n\n(pyan/analyzer.py:966,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node associate_node\n\n(pyan/analyzer.py:1224,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node collapse_inner\n\n(pyan/analyzer.py:1451,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node contract_nonexistents\n\n(pyan/analyzer.py:1375,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node cull_inherited\n\n(pyan/analyzer.py:1429,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node expand_unknowns\n\n(pyan/analyzer.py:1395,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node get_attribute\n\n(pyan/analyzer.py:1066,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node get_current_class\n\n(pyan/analyzer.py:998,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node get_node\n\n(pyan/analyzer.py:1156,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node get_node_of_current_namespace\n\n(pyan/analyzer.py:1002,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node get_parent_node\n\n(pyan/analyzer.py:1216,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node get_value\n\n(pyan/analyzer.py:1021,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node postprocess\n\n(pyan/analyzer.py:134,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node process\n\n(pyan/analyzer.py:79,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node process_one\n\n(pyan/analyzer.py:89,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node remove_uses_edge\n\n(pyan/analyzer.py:1298,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node remove_wild\n\n(pyan/analyzer.py:1306,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node resolve_attribute\n\n(pyan/analyzer.py:879,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node resolve_base_classes\n\n(pyan/analyzer.py:102,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node resolve_builtins\n\n(pyan/analyzer.py:813,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node set_attribute\n\n(pyan/analyzer.py:1127,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node set_value\n\n(pyan/analyzer.py:1043,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_AnnAssign\n\n(pyan/analyzer.py:538,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Assign\n\n(pyan/analyzer.py:520,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_AsyncFor\n\n(pyan/analyzer.py:571,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_AsyncFunctionDef\n\n(pyan/analyzer.py:313,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Attribute\n\n(pyan/analyzer.py:407,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_AugAssign\n\n(pyan/analyzer.py:541,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Call\n\n(pyan/analyzer.py:599,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_ClassDef\n\n(pyan/analyzer.py:181,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_DictComp\n\n(pyan/analyzer.py:586,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_For\n\n(pyan/analyzer.py:559,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_FunctionDef\n\n(pyan/analyzer.py:225,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_GeneratorExp\n\n(pyan/analyzer.py:593,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Import\n\n(pyan/analyzer.py:325,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_ImportFrom\n\n(pyan/analyzer.py:368,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Lambda\n\n(pyan/analyzer.py:316,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_ListComp\n\n(pyan/analyzer.py:574,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Module\n\n(pyan/analyzer.py:164,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_Name\n\n(pyan/analyzer.py:490,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_SetComp\n\n(pyan/analyzer.py:580,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node visit_With\n\n(pyan/analyzer.py:646,\nmethod in pyan.analyzer.CallGraphVisitor)
Write node process\n\n(pyan/analyzer.py:977,\nfunction in pyan.analyzer.CallGraphVisitor.analyze_scopes)
Write node lookup\n\n(pyan/analyzer.py:1101,\nfunction in pyan.analyzer.CallGraphVisitor.get_attribute)
Write node find_scope\n\n(pyan/analyzer.py:1026,\nfunction in pyan.analyzer.CallGraphVisitor.get_value)
Write node find_scope\n\n(pyan/analyzer.py:1047,\nfunction in pyan.analyzer.CallGraphVisitor.set_value)
Write node add_uses_enter_exit_of\n\n(pyan/analyzer.py:649,\nfunction in pyan.analyzer.CallGraphVisitor.visit_With)
Write node ExecuteInInnerScope\n\n(pyan/anutils.py:190,\nclass in pyan.anutils)
Write node Scope\n\n(pyan/anutils.py:173,\nclass in pyan.anutils)
Write node UnresolvedSuperCallError\n\n(pyan/anutils.py:169,\nclass in pyan.anutils)
Write node format_alias\n\n(pyan/anutils.py:37,\nfunction in pyan.anutils)
Write node get_ast_node_name\n\n(pyan/anutils.py:47,\nfunction in pyan.anutils)
Write node get_module_name\n\n(pyan/anutils.py:19,\nfunction in pyan.anutils)
Write node head\n\n(pyan/anutils.py:9,\nfunction in pyan.anutils)
Write node resolve_method_resolution_order\n\n(pyan/anutils.py:70,\nfunction in pyan.anutils)
Write node sanitize_exprs\n\n(pyan/anutils.py:58,\nfunction in pyan.anutils)
Write node tail\n\n(pyan/anutils.py:13,\nfunction in pyan.anutils)
Write node __enter__\n\n(pyan/anutils.py:208,\nmethod in pyan.anutils.ExecuteInInnerScope)
Write node __exit__\n\n(pyan/anutils.py:226,\nmethod in pyan.anutils.ExecuteInInnerScope)
Write node __init__\n\n(pyan/anutils.py:202,\nmethod in pyan.anutils.ExecuteInInnerScope)
Write node __init__\n\n(pyan/anutils.py:177,\nmethod in pyan.anutils.Scope)
Write node __repr__\n\n(pyan/anutils.py:186,\nmethod in pyan.anutils.Scope)
Write node C3_find_good_head\n\n(pyan/anutils.py:84,\nfunction in pyan.anutils.resolve_method_resolution_order)
Write node C3_linearize\n\n(pyan/anutils.py:116,\nfunction in pyan.anutils.resolve_method_resolution_order)
Write node C3_merge\n\n(pyan/anutils.py:98,\nfunction in pyan.anutils.resolve_method_resolution_order)
Write node LinearizationImpossible\n\n(pyan/anutils.py:79,\nclass in pyan.anutils.resolve_method_resolution_order)
Write node lookup_bases_recursive\n\n(pyan/anutils.py:149,\nfunction in pyan.anutils.resolve_method_resolution_order)
Write node remove_all\n\n(pyan/anutils.py:93,\nfunction in pyan.anutils.resolve_method_resolution_order)
Write node remove_all_in\n\n(pyan/anutils.py:95,\nfunction in pyan.anutils.resolve_method_resolution_order)
Write node process\n\n(pyan/anutils.py:60,\nfunction in pyan.anutils.sanitize_exprs)
Write node main\n\n(pyan/main.py:20,\nfunction in pyan.main)
Write node Flavor\n\n(pyan/node.py:15,\nclass in pyan.node)
Write node Node\n\n(pyan/node.py:53,\nclass in pyan.node)
Write node make_safe_label\n\n(pyan/node.py:7,\nfunction in pyan.node)
Write node __repr__\n\n(pyan/node.py:50,\nmethod in pyan.node.Flavor)
Write node specificity\n\n(pyan/node.py:39,\nstaticmethod in pyan.node.Flavor)
Write node __init__\n\n(pyan/node.py:86,\nmethod in pyan.node.Node)
Write node __repr__\n\n(pyan/node.py:177,\nmethod in pyan.node.Node)
Write node get_annotated_name\n\n(pyan/node.py:103,\nmethod in pyan.node.Node)
Write node get_label\n\n(pyan/node.py:163,\nmethod in pyan.node.Node)
Write node get_level\n\n(pyan/node.py:138,\nmethod in pyan.node.Node)
Write node get_long_annotated_name\n\n(pyan/node.py:114,\nmethod in pyan.node.Node)
Write node get_name\n\n(pyan/node.py:128,\nmethod in pyan.node.Node)
Write node get_namespace_label\n\n(pyan/node.py:170,\nmethod in pyan.node.Node)
Write node get_short_name\n\n(pyan/node.py:94,\nmethod in pyan.node.Node)
Write node get_toplevel_namespace\n\n(pyan/node.py:150,\nmethod in pyan.node.Node)
Write node Colorizer\n\n(pyan/visgraph.py:17,\nclass in pyan.visgraph)
Write node VisualEdge\n\n(pyan/visgraph.py:97,\nclass in pyan.visgraph)
Write node VisualGraph\n\n(pyan/visgraph.py:115,\nclass in pyan.visgraph)
Write node VisualNode\n\n(pyan/visgraph.py:71,\nclass in pyan.visgraph)
Write node __init__\n\n(pyan/visgraph.py:18,\nmethod in pyan.visgraph.Colorizer)
Write node _next_idx\n\n(pyan/visgraph.py:26,\nmethod in pyan.visgraph.Colorizer)
Write node _node_to_idx\n\n(pyan/visgraph.py:34,\nmethod in pyan.visgraph.Colorizer)
Write node get\n\n(pyan/visgraph.py:41,\nmethod in pyan.visgraph.Colorizer)
Write node htmlize_rgb\n\n(pyan/visgraph.py:61,\nstaticmethod in pyan.visgraph.Colorizer)
Write node make_colors\n\n(pyan/visgraph.py:45,\nmethod in pyan.visgraph.Colorizer)
Write node __init__\n\n(pyan/visgraph.py:103,\nmethod in pyan.visgraph.VisualEdge)
Write node __repr__\n\n(pyan/visgraph.py:109,\nmethod in pyan.visgraph.VisualEdge)
Write node __init__\n\n(pyan/visgraph.py:116,\nmethod in pyan.visgraph.VisualGraph)
Write node from_visitor\n\n(pyan/visgraph.py:126,\nclassmethod in pyan.visgraph.VisualGraph)
Write node find_filenames\n\n(pyan/visgraph.py:163,\nfunction in pyan.visgraph.VisualGraph.from_visitor)
Write node __init__\n\n(pyan/visgraph.py:75,\nmethod in pyan.visgraph.VisualNode)
Write node __repr__\n\n(pyan/visgraph.py:85,\nmethod in pyan.visgraph.VisualNode)
Write node DotWriter\n\n(pyan/writers.py:105,\nclass in pyan.writers)
Write node TgfWriter\n\n(pyan/writers.py:81,\nclass in pyan.writers)
Write node Writer\n\n(pyan/writers.py:9,\nclass in pyan.writers)
Write node YedWriter\n\n(pyan/writers.py:172,\nclass in pyan.writers)
Write node __init__\n\n(pyan/writers.py:106,\nmethod in pyan.writers.DotWriter)
Write node finish_graph\n\n(pyan/writers.py:168,\nmethod in pyan.writers.DotWriter)
Write node finish_subgraph\n\n(pyan/writers.py:138,\nmethod in pyan.writers.DotWriter)
Write node start_graph\n\n(pyan/writers.py:119,\nmethod in pyan.writers.DotWriter)
Write node start_subgraph\n\n(pyan/writers.py:124,\nmethod in pyan.writers.DotWriter)
Write node write_edge\n\n(pyan/writers.py:153,\nmethod in pyan.writers.DotWriter)
Write node write_node\n\n(pyan/writers.py:144,\nmethod in pyan.writers.DotWriter)
Write node __init__\n\n(pyan/writers.py:82,\nmethod in pyan.writers.TgfWriter)
Write node start_edges\n\n(pyan/writers.py:95,\nmethod in pyan.writers.TgfWriter)
Write node write_edge\n\n(pyan/writers.py:98,\nmethod in pyan.writers.TgfWriter)
Write node write_node\n\n(pyan/writers.py:90,\nmethod in pyan.writers.TgfWriter)
Write node __init__\n\n(pyan/writers.py:10,\nmethod in pyan.writers.Writer)
Write node dedent\n\n(pyan/writers.py:23,\nmethod in pyan.writers.Writer)
Write node finish_edges\n\n(pyan/writers.py:71,\nmethod in pyan.writers.Writer)
Write node finish_graph\n\n(pyan/writers.py:77,\nmethod in pyan.writers.Writer)
Write node finish_subgraph\n\n(pyan/writers.py:74,\nmethod in pyan.writers.Writer)
Write node indent\n\n(pyan/writers.py:20,\nmethod in pyan.writers.Writer)
Write node log\n\n(pyan/writers.py:17,\nmethod in pyan.writers.Writer)
Write node run\n\n(pyan/writers.py:29,\nmethod in pyan.writers.Writer)
Write node start_edges\n\n(pyan/writers.py:65,\nmethod in pyan.writers.Writer)
Write node start_graph\n\n(pyan/writers.py:56,\nmethod in pyan.writers.Writer)
Write node start_subgraph\n\n(pyan/writers.py:59,\nmethod in pyan.writers.Writer)
Write node write\n\n(pyan/writers.py:26,\nmethod in pyan.writers.Writer)
Write node write_edge\n\n(pyan/writers.py:68,\nmethod in pyan.writers.Writer)
Write node write_edges\n\n(pyan/writers.py:50,\nmethod in pyan.writers.Writer)
Write node write_node\n\n(pyan/writers.py:62,\nmethod in pyan.writers.Writer)
Write node write_subgraph\n\n(pyan/writers.py:42,\nmethod in pyan.writers.Writer)
Write node __init__\n\n(pyan/writers.py:173,\nmethod in pyan.writers.YedWriter)
Write node finish_graph\n\n(pyan/writers.py:293,\nmethod in pyan.writers.YedWriter)
Write node finish_subgraph\n\n(pyan/writers.py:233,\nmethod in pyan.writers.YedWriter)
Write node start_graph\n\n(pyan/writers.py:183,\nmethod in pyan.writers.YedWriter)
Write node start_subgraph\n\n(pyan/writers.py:204,\nmethod in pyan.writers.YedWriter)
Write node write_edge\n\n(pyan/writers.py:264,\nmethod in pyan.writers.YedWriter)
Write node write_node\n\n(pyan/writers.py:240,\nmethod in pyan.writers.YedWriter)
Finish subgraph 
