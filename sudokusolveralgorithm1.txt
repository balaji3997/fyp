Timer unit: 1e-06 s

File: /usr/local/lib/python3.6/dist-packages/line_profiler.py
Function: f at line 97
Total time: 0.241436 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    97                                                   def f(*args, **kwds):
    98     36534        15039      0.4      6.2              self.enable_by_count()
    99     36536        12502      0.3      5.2              try:
   100     36536       185449      5.1     76.8                  result = func(*args, **kwds)
   101                                                       finally:
   102     36534        16001      0.4      6.6                  self.disable_by_count()
   103     36534        12445      0.3      5.2              return result

File: sudokusolveralgorithm.py
Function: print_grid at line 16
Total time: 0.00028 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           @profile
    18                                           def print_grid(arr): 
    19        10            7      0.7      2.5      for i in range(9): 
    20        90           59      0.7     21.1          for j in range(9): 
    21        81          115      1.4     41.1              print(arr[i][j],end=" ") 
    22         9           99     11.0     35.4          print ('\n') 

File: sudokusolveralgorithm.py
Function: find_empty_location at line 44
Total time: 0.026082 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                           @profile
    45                                           @profile
    46                                           def find_empty_location(arr,l): 
    47      3181         1411      0.4      5.4      for row in range(9): 
    48     28650        11966      0.4     45.9          for col in range(9): 
    49     26239        11763      0.4     45.1              if(arr[row][col]==0): 
    50       769          327      0.4      1.3                  l[0]=row 
    51       769          315      0.4      1.2                  l[1]=col 
    52       769          300      0.4      1.2                  return True
    53         1            0      0.0      0.0      return False

File: sudokusolveralgorithm.py
Function: used_in_row at line 69
Total time: 0.036476 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    69                                           @profile
    70                                           @profile
    71                                           def used_in_row(arr,row,num): 
    72     40913        17092      0.4     46.9      for i in range(9): 
    73     38728        16943      0.4     46.4          if(arr[row][i] == num): 
    74      4547         1670      0.4      4.6              return True
    75      2185          771      0.4      2.1      return False

File: sudokusolveralgorithm.py
Function: used_in_col at line 91
Total time: 0.013626 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                           @profile
    92                                           @profile
    93                                           def used_in_col(arr,col,num): 
    94     15531         6553      0.4     48.1      for i in range(9): 
    95     14453         6288      0.4     46.1          if(arr[i][col] == num): 
    96      1107          396      0.4      2.9              return True
    97      1078          389      0.4      2.9      return False

File: sudokusolveralgorithm.py
Function: used_in_box at line 113
Total time: 0.011676 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   113                                           @profile
   114                                           @profile
   115                                           def used_in_box(arr,row,col,num): 
   116      3654         1886      0.5     16.2      for i in range(3): 
   117     10955         4957      0.5     42.5          for j in range(3): 
   118      8379         4416      0.5     37.8              if(arr[i+row][j+col] == num): 
   119       309          136      0.4      1.2                  return True
   120       769          281      0.4      2.4      return False

File: sudokusolveralgorithm.py
Function: check_location_is_safe at line 137
Total time: 0.201508 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   137                                           @profile
   138                                           @profile
   139                                           def check_location_is_safe(arr,row,col,num): 
   140                                                 
   141                                               # Check if 'num' is not already placed in current row, 
   142                                               # current column and current 3x3 box 
   143      6732       201508     29.9    100.0      return not used_in_row(arr,row,num) and not used_in_col(arr,col,num) and not used_in_box(arr,row - row%3,col - col%3,num) 

File: sudokusolveralgorithm.py
Function: solve_sudoku at line 160
Total time: 0.328724 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   160                                           @profile
   161                                           @profile
   162                                           def solve_sudoku(arr): 
   163                                                 
   164                                               # 'l' is a list variable that keeps the record of row and col in find_empty_location Function     
   165       770          411      0.5      0.1      l=[0,0] 
   166                                                 
   167                                               # If there is no unassigned location, we are done     
   168       770        54362     70.6     16.5      if(not find_empty_location(arr,l)): 
   169         1            1      1.0      0.0          return True
   170                                                 
   171                                               # Assigning list values to row and col that we got from the above Function  
   172       769          356      0.5      0.1      row=l[0] 
   173       769          329      0.4      0.1      col=l[1] 
   174                                                 
   175                                               # consider digits 1 to 9 
   176      7452         3485      0.5      1.1      for num in range(1,10): 
   177                                                     
   178                                                   # if looks promising 
   179      6732       264886     39.3     80.6          if(check_location_is_safe(arr,row,col,num)): 
   180                                                         
   181                                                       # make tentative assignment 
   182       769          423      0.6      0.1              arr[row][col]=num 
   183                                             
   184                                                       # return, if sucess, ya! 
   185       769         3726      4.8      1.1              if(solve_sudoku(arr)): 
   186        49           19      0.4      0.0                  return True
   187                                             
   188                                                       # failure, unmake & try again 
   189       720          392      0.5      0.1              arr[row][col] = 0
   190                                                         
   191                                               # this triggers backtracking         
   192       720          334      0.5      0.1      return False 

