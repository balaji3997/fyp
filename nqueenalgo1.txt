Timer unit: 1e-06 s

File: nqueenalgo.py
Function: printSolution at line 11
Total time: 0.000135 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def printSolution(board): 
    13         5           15      3.0     11.1  	for i in range(N): 
    14        20           23      1.1     17.0  		for j in range(N): 
    15        16           47      2.9     34.8  			print(board[i][j], end=' ') 
    16         4           50     12.5     37.0  		print()

File: nqueenalgo.py
Function: isSafe at line 27
Total time: 0.000164 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def isSafe(board, row, col): 
    29                                           
    30                                           	# Check this row on left side 
    31        55           31      0.6     18.9  	for i in range(col): 
    32        40           22      0.6     13.4  		if board[row][i] == 1: 
    33        11            9      0.8      5.5  			return False
    34                                           
    35                                           	# Check upper diagonal on left side 
    36        38           41      1.1     25.0  	for i,j in zip(list(range(row,-1,-1)), list(range(col,-1,-1))): 
    37        28           15      0.5      9.1  		if board[i][j] == 1: 
    38         5            3      0.6      1.8  			return False
    39                                           
    40                                           	# Check lower diagonal on left side 
    41        26           27      1.0     16.5  	for i,j in zip(list(range(row,N,1)), list(range(col,-1,-1))): 
    42        18           11      0.6      6.7  		if board[i][j] == 1: 
    43         2            1      0.5      0.6  			return False
    44                                           
    45         8            4      0.5      2.4  	return True

File: nqueenalgo.py
Function: solveNQUtil at line 48
Total time: 0.00037 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                           @profile
    49                                           def solveNQUtil(board, col): 
    50                                           	# base case: If all queens are placed 
    51                                           	# then return true 
    52         9            4      0.4      1.1  	if col >= N: 
    53         1            1      1.0      0.3  		return True
    54                                           
    55                                           	# Consider this column and try placing 
    56                                           	# this queen in all rows one by one 
    57        30           21      0.7      5.7  	for i in range(N): 
    58                                           
    59        26          322     12.4     87.0  		if isSafe(board, i, col): 
    60                                           			# Place this queen in board[i][col] 
    61         8            6      0.8      1.6  			board[i][col] = 1
    62                                           
    63                                           			# recur to place rest of the queens 
    64         8            9      1.1      2.4  			if solveNQUtil(board, col+1) == True: 
    65         4            4      1.0      1.1  				return True
    66                                           
    67                                           			# If placing queen in board[i][col 
    68                                           			# doesn't lead to a solution, then 
    69                                           			# queen from board[i][col] 
    70         4            2      0.5      0.5  			board[i][col] = 0
    71                                           
    72                                           	# if the queen can not be placed in any row in 
    73                                           	# this colum col then return false 
    74         4            1      0.2      0.3  	return False

File: nqueenalgo.py
Function: solveNQ at line 86
Total time: 0.000577 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    86                                           @profile
    87                                           def solveNQ(): 
    88         1            2      2.0      0.3  	board = [ [0, 0, 0, 0], 
    89         1            1      1.0      0.2  			[0, 0, 0, 0], 
    90         1            0      0.0      0.0  			[0, 0, 0, 0], 
    91         1            1      1.0      0.2  			[0, 0, 0, 0] 
    92                                           			] 
    93                                           
    94         1          410    410.0     71.1  	if solveNQUtil(board, 0) == False: 
    95                                           		print("Solution does not exist")
    96                                           		return False
    97                                           
    98         1          162    162.0     28.1  	printSolution(board) 
    99         1            1      1.0      0.2  	return True

